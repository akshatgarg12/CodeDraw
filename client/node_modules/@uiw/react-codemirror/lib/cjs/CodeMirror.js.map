{"version":3,"sources":["../../src/CodeMirror.js"],"names":["ReactCodeMirror","props","codemirror","editor","renderCodeMirror","CodeMirror","fromTextArea","textarea","options","eventDict","getEventHandleFromProps","Object","keys","forEach","event","on","value","width","height","setValue","setSize","prevProps","val","getValue","undefined","setOptions","mode","findModeByName","mime","name","JSON","stringify","setOption","toTextArea","propNames","eventHandle","filter","prop","test","ele","slice","replace","toLowerCase","instance","Component","defaultProps","propTypes","PropTypes","string","object","oneOfType","number"],"mappings":"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","sourcesContent":["import CodeMirror from 'codemirror';\nimport 'codemirror/mode/meta';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ReactCodeMirror extends Component {\n  constructor(props) {\n    super(props);\n    this.codemirror = null;\n    this.editor = null;\n  }\n\n  componentDidMount() {\n    this.renderCodeMirror();\n  }\n  renderCodeMirror() {\n    // 生成codemirror实例\n    this.editor = CodeMirror.fromTextArea(this.textarea, this.props.options);\n    // 获取CodeMirror用于获取其中的一些常量\n    this.codemirror = CodeMirror;\n    // 事件处理映射\n    const eventDict = this.getEventHandleFromProps();\n\n    Object.keys(eventDict).forEach((event) => {\n      this.editor.on(eventDict[event], this.props[event]);\n    });\n\n    const { value, width, height } = this.props;\n    // 初始化值\n    this.editor.setValue(value || '');\n\n    if (width || height) {\n      // 设置尺寸\n      this.editor.setSize(width, height);\n    }\n  }\n  async componentDidUpdate(prevProps) {\n    const val = this.editor.getValue();\n    const value = this.props.value;\n    if (value !== undefined && value !== prevProps.value && value !== val) {\n      this.editor.setValue(value);\n    }\n    const { width, height } = prevProps;\n    await this.setOptions(this.props.options);\n    if (width !== this.props.width || height !== this.props.height) {\n      this.editor.setSize(this.props.width, this.props.height);\n    }\n  }\n  // http://codemirror.net/doc/manual.html#config\n  async setOptions(options) {\n    if (typeof options === 'object') {\n      const mode = CodeMirror.findModeByName(options.mode);\n      if (mode && mode.mode) {\n        await import(`codemirror/mode/${mode.mode}/${mode.mode}.js`);\n      }\n      if (mode) {\n        options.mode = mode.mime;\n      }\n      Object.keys(options).forEach((name) => {\n        if (options[name] && JSON.stringify(options[name])) {\n          this.editor.setOption(name, options[name]);\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.editor) {\n      this.editor.toTextArea();\n    }\n  }\n\n  // 将props中所有的事件处理函数映射并保存\n  getEventHandleFromProps() {\n    const propNames = Object.keys(this.props);\n    const eventHandle = propNames.filter((prop) => {\n      return /^on+/.test(prop);\n    });\n\n    const eventDict = {};\n    eventHandle.forEach((ele) => {\n      const name = ele.slice(2);\n      eventDict[ele] = name.replace(name[0],name[0].toLowerCase());\n    });\n\n    return eventDict;\n  }\n\n  render() {\n    return (\n      <textarea ref={(instance) => { this.textarea = instance; }} />\n    );\n  }\n}\n\nReactCodeMirror.defaultProps = {\n  value: '',\n  options: {},\n  width: '100%',\n  height: '100%',\n};\n\nReactCodeMirror.propTypes = {\n  value: PropTypes.string,\n  options: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n"]}