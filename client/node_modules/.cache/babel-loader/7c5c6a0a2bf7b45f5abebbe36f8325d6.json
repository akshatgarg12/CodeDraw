{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"properties\", function () {\n    return {\n      token: function (stream, state) {\n        var sol = stream.sol() || state.afterSection;\n        var eol = stream.eol();\n        state.afterSection = false;\n\n        if (sol) {\n          if (state.nextMultiline) {\n            state.inMultiline = true;\n            state.nextMultiline = false;\n          } else {\n            state.position = \"def\";\n          }\n        }\n\n        if (eol && !state.nextMultiline) {\n          state.inMultiline = false;\n          state.position = \"def\";\n        }\n\n        if (sol) {\n          while (stream.eatSpace()) {}\n        }\n\n        var ch = stream.next();\n\n        if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n          state.position = \"comment\";\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (sol && ch === \"[\") {\n          state.afterSection = true;\n          stream.skipTo(\"]\");\n          stream.eat(\"]\");\n          return \"header\";\n        } else if (ch === \"=\" || ch === \":\") {\n          state.position = \"quote\";\n          return null;\n        } else if (ch === \"\\\\\" && state.position === \"quote\") {\n          if (stream.eol()) {\n            // end of line?\n            // Multiline value\n            state.nextMultiline = true;\n          }\n        }\n\n        return state.position;\n      },\n      startState: function () {\n        return {\n          position: \"def\",\n          // Current position, \"def\", \"quote\" or \"comment\"\n          nextMultiline: false,\n          // Is the next line multiline value\n          inMultiline: false,\n          // Is the current line a multiline value\n          afterSection: false // Did we just open a section\n\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-properties\", \"properties\");\n  CodeMirror.defineMIME(\"text/x-ini\", \"properties\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/properties/properties.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","token","stream","state","sol","afterSection","eol","nextMultiline","inMultiline","position","eatSpace","ch","next","skipToEnd","skipTo","eat","startState","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,YAAtB,EAAoC,YAAW;AAC7C,WAAO;AACLC,MAAAA,KAAK,EAAE,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAIC,GAAG,GAAGF,MAAM,CAACE,GAAP,MAAgBD,KAAK,CAACE,YAAhC;AACA,YAAIC,GAAG,GAAGJ,MAAM,CAACI,GAAP,EAAV;AAEAH,QAAAA,KAAK,CAACE,YAAN,GAAqB,KAArB;;AAEA,YAAID,GAAJ,EAAS;AACP,cAAID,KAAK,CAACI,aAAV,EAAyB;AACvBJ,YAAAA,KAAK,CAACK,WAAN,GAAoB,IAApB;AACAL,YAAAA,KAAK,CAACI,aAAN,GAAsB,KAAtB;AACD,WAHD,MAGO;AACLJ,YAAAA,KAAK,CAACM,QAAN,GAAiB,KAAjB;AACD;AACF;;AAED,YAAIH,GAAG,IAAI,CAAEH,KAAK,CAACI,aAAnB,EAAkC;AAChCJ,UAAAA,KAAK,CAACK,WAAN,GAAoB,KAApB;AACAL,UAAAA,KAAK,CAACM,QAAN,GAAiB,KAAjB;AACD;;AAED,YAAIL,GAAJ,EAAS;AACP,iBAAMF,MAAM,CAACQ,QAAP,EAAN,EAAyB,CAAE;AAC5B;;AAED,YAAIC,EAAE,GAAGT,MAAM,CAACU,IAAP,EAAT;;AAEA,YAAIR,GAAG,KAAKO,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAArB,IAA4BA,EAAE,KAAK,GAAxC,CAAP,EAAqD;AACnDR,UAAAA,KAAK,CAACM,QAAN,GAAiB,SAAjB;AACAP,UAAAA,MAAM,CAACW,SAAP;AACA,iBAAO,SAAP;AACD,SAJD,MAIO,IAAIT,GAAG,IAAIO,EAAE,KAAK,GAAlB,EAAuB;AAC5BR,UAAAA,KAAK,CAACE,YAAN,GAAqB,IAArB;AACAH,UAAAA,MAAM,CAACY,MAAP,CAAc,GAAd;AAAoBZ,UAAAA,MAAM,CAACa,GAAP,CAAW,GAAX;AACpB,iBAAO,QAAP;AACD,SAJM,MAIA,IAAIJ,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAzB,EAA8B;AACnCR,UAAAA,KAAK,CAACM,QAAN,GAAiB,OAAjB;AACA,iBAAO,IAAP;AACD,SAHM,MAGA,IAAIE,EAAE,KAAK,IAAP,IAAeR,KAAK,CAACM,QAAN,KAAmB,OAAtC,EAA+C;AACpD,cAAIP,MAAM,CAACI,GAAP,EAAJ,EAAkB;AAAG;AACnB;AACAH,YAAAA,KAAK,CAACI,aAAN,GAAsB,IAAtB;AACD;AACF;;AAED,eAAOJ,KAAK,CAACM,QAAb;AACD,OA9CI;AAgDLO,MAAAA,UAAU,EAAE,YAAW;AACrB,eAAO;AACLP,UAAAA,QAAQ,EAAG,KADN;AACmB;AACxBF,UAAAA,aAAa,EAAG,KAFX;AAEmB;AACxBC,UAAAA,WAAW,EAAG,KAHT;AAGmB;AACxBH,UAAAA,YAAY,EAAG,KAJV,CAImB;;AAJnB,SAAP;AAMD;AAvDI,KAAP;AA0DD,GA3DD;AA6DAN,EAAAA,UAAU,CAACkB,UAAX,CAAsB,mBAAtB,EAA2C,YAA3C;AACAlB,EAAAA,UAAU,CAACkB,UAAX,CAAsB,YAAtB,EAAoC,YAApC;AAEC,CA1ED","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"properties\", function() {\n  return {\n    token: function(stream, state) {\n      var sol = stream.sol() || state.afterSection;\n      var eol = stream.eol();\n\n      state.afterSection = false;\n\n      if (sol) {\n        if (state.nextMultiline) {\n          state.inMultiline = true;\n          state.nextMultiline = false;\n        } else {\n          state.position = \"def\";\n        }\n      }\n\n      if (eol && ! state.nextMultiline) {\n        state.inMultiline = false;\n        state.position = \"def\";\n      }\n\n      if (sol) {\n        while(stream.eatSpace()) {}\n      }\n\n      var ch = stream.next();\n\n      if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n        state.position = \"comment\";\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (sol && ch === \"[\") {\n        state.afterSection = true;\n        stream.skipTo(\"]\"); stream.eat(\"]\");\n        return \"header\";\n      } else if (ch === \"=\" || ch === \":\") {\n        state.position = \"quote\";\n        return null;\n      } else if (ch === \"\\\\\" && state.position === \"quote\") {\n        if (stream.eol()) {  // end of line?\n          // Multiline value\n          state.nextMultiline = true;\n        }\n      }\n\n      return state.position;\n    },\n\n    startState: function() {\n      return {\n        position : \"def\",       // Current position, \"def\", \"quote\" or \"comment\"\n        nextMultiline : false,  // Is the next line multiline value\n        inMultiline : false,    // Is the current line a multiline value\n        afterSection : false    // Did we just open a section\n      };\n    }\n\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-properties\", \"properties\");\nCodeMirror.defineMIME(\"text/x-ini\", \"properties\");\n\n});\n"]},"metadata":{},"sourceType":"script"}