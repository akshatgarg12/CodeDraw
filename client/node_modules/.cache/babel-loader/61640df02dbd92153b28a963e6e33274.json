{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar moveBlockInContentState = require(\"./moveBlockInContentState\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var withMovedAtomicBlock;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\nmodule.exports = AtomicBlockUtils;","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/draft-js/lib/AtomicBlockUtils.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","BlockMapBuilder","require","CharacterMetadata","ContentBlock","ContentBlockNode","DraftModifier","EditorState","generateRandomKey","gkx","Immutable","moveBlockInContentState","experimentalTreeDataSupport","ContentBlockRecord","List","Repeat","AtomicBlockUtils","insertAtomicBlock","editorState","entityKey","character","contentState","getCurrentContent","selectionState","getSelection","afterRemoval","removeRange","targetSelection","getSelectionAfter","afterSplit","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","atomicBlockConfig","type","text","characterList","atomicDividerBlockConfig","nextSibling","prevSibling","fragmentArray","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContent","merge","selectionBefore","selectionAfter","set","push","moveAtomicBlock","atomicBlock","targetRange","insertionMode","withMovedAtomicBlock","targetBlock","getBlockForKey","getStartKey","getEndKey","selectionAfterRemoval","_targetBlock","getFocusKey","getStartOffset","getEndOffset","getLength","selectionAfterSplit","_targetBlock2","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar moveBlockInContentState = require(\"./moveBlockInContentState\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var withMovedAtomicBlock;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\nmodule.exports = AtomicBlockUtils;"]},"metadata":{},"sourceType":"script"}