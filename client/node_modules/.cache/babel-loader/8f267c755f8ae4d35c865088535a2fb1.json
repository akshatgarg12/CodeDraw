{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports === \"object\" && typeof module === \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define === \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"clojure\", function (options) {\n    var atoms = [\"false\", \"nil\", \"true\"];\n    var specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\", \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\n    var coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\", \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\", \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\", \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\", \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\", \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\", \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\", \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\", \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\", \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\", \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\", \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\", \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\", \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\", \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\", \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\", \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\", \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\", \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\", \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\", \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\", \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\", \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\", \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\", \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\", \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\", \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\", \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\", \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\", \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\", \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\", \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\", \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\", \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\", \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\", \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\", \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\", \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\", \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\", \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\", \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\", \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\", \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\", \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\", \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\", \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\", \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\", \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\", \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\", \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\", \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\", \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\", \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\", \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\", \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\", \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\", \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\", \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\", \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\", \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\", \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\", \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\", \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\", \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\", \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\", \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\", \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\", \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\", \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\", \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\", \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\", \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\", \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\", \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\", \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\", \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\", \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\", \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\", \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\", \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\", \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\", \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\", \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\", \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\", \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\", \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\", \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\", \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\", \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\", \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\", \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\", \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\", \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\", \"sequential?\", \"set\", \"set-agent-send-executor!\", \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\", \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\", \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\", \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\", \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\", \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\", \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\", \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\", \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\", \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\", \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\", \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\", \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\", \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\", \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\", \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\", \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\", \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\", \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\", \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\", \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\", \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\", \"zipmap\"];\n    var haveBodyParameter = [\"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\", \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\", \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\", \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\", \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n    CodeMirror.registerHelper(\"hintWords\", \"clojure\", [].concat(atoms, specialForms, coreSymbols));\n    var atom = createLookupMap(atoms);\n    var specialForm = createLookupMap(specialForms);\n    var coreSymbol = createLookupMap(coreSymbols);\n    var hasBodyParameter = createLookupMap(haveBodyParameter);\n    var delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\n    var numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\n    var characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/; // simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*/\n    // simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n    // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n\n    var qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n    function base(stream, state) {\n      if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n      if (stream.match(numberLiteral)) return [null, \"number\"];\n      if (stream.match(characterLiteral)) return [null, \"string-2\"];\n      if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n      if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n      if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n\n      if (stream.eat(/^;/)) {\n        stream.skipToEnd();\n        return [\"space\", \"comment\"];\n      }\n\n      if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n      var matches = stream.match(qualifiedSymbol);\n      var symbol = matches && matches[0];\n\n      if (!symbol) {\n        // advance stream by at least one character so we don't get stuck.\n        stream.next();\n        stream.eatWhile(function (c) {\n          return !is(c, delimiter);\n        });\n        return [null, \"error\"];\n      }\n\n      if (symbol === \"comment\" && state.lastToken === \"(\") return (state.tokenize = inComment)(stream, state);\n      if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n      if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n      if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n      return [\"symbol\", \"variable\"];\n    }\n\n    function inString(stream, state) {\n      var escaped = false,\n          next;\n\n      while (next = stream.next()) {\n        if (next === \"\\\"\" && !escaped) {\n          state.tokenize = base;\n          break;\n        }\n\n        escaped = !escaped && next === \"\\\\\";\n      }\n\n      return [null, \"string\"];\n    }\n\n    function inComment(stream, state) {\n      var parenthesisCount = 1;\n      var next;\n\n      while (next = stream.next()) {\n        if (next === \")\") parenthesisCount--;\n        if (next === \"(\") parenthesisCount++;\n\n        if (parenthesisCount === 0) {\n          stream.backUp(1);\n          state.tokenize = base;\n          break;\n        }\n      }\n\n      return [\"space\", \"comment\"];\n    }\n\n    function createLookupMap(words) {\n      var obj = {};\n\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n      return obj;\n    }\n\n    function is(value, test) {\n      if (test instanceof RegExp) return test.test(value);\n      if (test instanceof Object) return test.propertyIsEnumerable(value);\n    }\n\n    return {\n      startState: function () {\n        return {\n          ctx: {\n            prev: null,\n            start: 0,\n            indentTo: 0\n          },\n          lastToken: null,\n          tokenize: base\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol() && typeof state.ctx.indentTo !== \"number\") state.ctx.indentTo = state.ctx.start + 1;\n        var typeStylePair = state.tokenize(stream, state);\n        var type = typeStylePair[0];\n        var style = typeStylePair[1];\n        var current = stream.current();\n\n        if (type !== \"space\") {\n          if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n            if (type === \"symbol\" && is(current, hasBodyParameter)) state.ctx.indentTo = state.ctx.start + options.indentUnit;else state.ctx.indentTo = \"next\";\n          } else if (state.ctx.indentTo === \"next\") {\n            state.ctx.indentTo = stream.column();\n          }\n\n          state.lastToken = current;\n        }\n\n        if (type === \"open\") state.ctx = {\n          prev: state.ctx,\n          start: stream.column(),\n          indentTo: null\n        };else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n        return style;\n      },\n      indent: function (state) {\n        var i = state.ctx.indentTo;\n        return typeof i === \"number\" ? i : state.ctx.start + 1;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-clojure\", \"clojure\");\n  CodeMirror.defineMIME(\"text/x-clojurescript\", \"clojure\");\n  CodeMirror.defineMIME(\"application/edn\", \"clojure\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/clojure/clojure.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","options","atoms","specialForms","coreSymbols","haveBodyParameter","registerHelper","concat","atom","createLookupMap","specialForm","coreSymbol","hasBodyParameter","delimiter","numberLiteral","characterLiteral","qualifiedSymbol","base","stream","state","eatSpace","eat","match","tokenize","inString","skipToEnd","matches","symbol","next","eatWhile","c","is","lastToken","inComment","charAt","escaped","parenthesisCount","backUp","words","obj","i","length","value","test","RegExp","Object","propertyIsEnumerable","startState","ctx","prev","start","indentTo","token","sol","typeStylePair","type","style","current","indentUnit","column","indent","closeBrackets","pairs","lineComment","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,QAArD,EAA+D;AAC7DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACnDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,SAAtB,EAAiC,UAAUC,OAAV,EAAmB;AAClD,QAAIC,KAAK,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,CAAZ;AACA,QAAIC,YAAY,GAAG,CAAC,GAAD,EAAM,OAAN,EAAe,KAAf,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,eAAlC,EACf,cADe,EACC,KADD,EACQ,OADR,EACiB,OADjB,EAC0B,MAD1B,EACkC,OADlC,EAC2C,KAD3C,EACkD,KADlD,CAAnB;AAEA,QAAIC,WAAW,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,SAA9B,EACd,yBADc,EACa,UADb,EACyB,mBADzB,EAEd,qBAFc,EAES,iBAFT,EAE4B,gBAF5B,EAGd,oBAHc,EAGQ,gBAHR,EAG0B,0BAH1B,EAGsD,IAHtD,EAId,OAJc,EAIL,QAJK,EAIK,oBAJL,EAI2B,aAJ3B,EAI0C,MAJ1C,EAKd,gBALc,EAKI,MALJ,EAKY,OALZ,EAKqB,aALrB,EAKoC,gBALpC,EAMd,eANc,EAMG,cANH,EAMmB,wBANnB,EAOd,kBAPc,EAOM,aAPN,EAOqB,mBAPrB,EAO0C,eAP1C,EAQd,iBARc,EAQK,kBARL,EAQyB,2BARzB,EASd,sBATc,EASU,sBATV,EASkC,GATlC,EASuC,IATvC,EAS6C,GAT7C,EASkD,IATlD,EAUd,IAVc,EAUR,KAVQ,EAUD,cAVC,EAUe,YAVf,EAU6B,OAV7B,EAUsC,WAVtC,EAWd,UAXc,EAWF,oBAXE,EAWoB,gBAXpB,EAWsC,IAXtC,EAW4C,GAX5C,EAWiD,GAXjD,EAWsD,IAXtD,EAYd,GAZc,EAYT,IAZS,EAYH,GAZG,EAYE,IAZF,EAYQ,YAZR,EAYsB,MAZtB,EAY8B,wBAZ9B,EAad,gBAbc,EAaI,UAbJ,EAagB,QAbhB,EAa0B,eAb1B,EAa2C,WAb3C,EAcd,OAdc,EAcL,aAdK,EAcU,cAdV,EAc0B,MAd1B,EAckC,SAdlC,EAc6C,OAd7C,EAed,QAfc,EAeJ,OAfI,EAeK,aAfL,EAeoB,gBAfpB,EAesC,MAftC,EAe8C,WAf9C,EAgBd,KAhBc,EAgBP,MAhBO,EAgBC,OAhBD,EAgBU,SAhBV,EAgBqB,WAhBrB,EAgBkC,MAhBlC,EAgB0C,MAhB1C,EAiBd,cAjBc,EAiBE,WAjBF,EAiBe,WAjBf,EAiB4B,aAjB5B,EAiB2C,YAjB3C,EAkBd,UAlBc,EAkBF,WAlBE,EAkBW,YAlBX,EAkByB,QAlBzB,EAkBmC,OAlBnC,EAkB4C,QAlB5C,EAmBd,UAnBc,EAmBF,cAnBE,EAmBc,MAnBd,EAmBsB,OAnBtB,EAmB+B,WAnB/B,EAmB4C,QAnB5C,EAoBd,OApBc,EAoBL,MApBK,EAoBG,QApBH,EAoBa,QApBb,EAoBuB,YApBvB,EAoBqC,SApBrC,EAoBgD,SApBhD,EAqBd,aArBc,EAqBC,WArBD,EAqBc,UArBd,EAqB0B,SArB1B,EAqBqC,QArBrC,EAqB+C,SArB/C,EAsBd,gBAtBc,EAsBI,iBAtBJ,EAsBuB,UAtBvB,EAsBmC,SAtBnC,EAsB8C,SAtB9C,EAuBd,eAvBc,EAuBG,UAvBH,EAuBe,UAvBf,EAuB2B,UAvB3B,EAuBuC,WAvBvC,EAwBd,QAxBc,EAwBJ,eAxBI,EAwBa,SAxBb,EAwBwB,MAxBxB,EAwBgC,YAxBhC,EAwB8C,OAxB9C,EAyBd,QAzBc,EAyBJ,MAzBI,EAyBI,MAzBJ,EAyBY,KAzBZ,EAyBmB,MAzBnB,EAyB2B,YAzB3B,EA0Bd,oBA1Bc,EA0BQ,kBA1BR,EA0B4B,OA1B5B,EA0BqC,OA1BrC,EA0B8C,OA1B9C,EA2Bd,cA3Bc,EA2BE,cA3BF,EA2BkB,YA3BlB,EA2BgC,aA3BhC,EA2B+C,YA3B/C,EA4Bd,YA5Bc,EA4BA,cA5BA,EA4BgB,OA5BhB,EA4ByB,QA5BzB,EA4BmC,oBA5BnC,EA6Bd,iBA7Bc,EA6BK,OA7BL,EA6Bc,SA7Bd,EA6ByB,SA7BzB,EA6BoC,MA7BpC,EA6B4C,YA7B5C,EA8Bd,SA9Bc,EA8BH,kBA9BG,EA8BiB,SA9BjB,EA8B4B,YA9B5B,EA8B0C,YA9B1C,EA+Bd,QA/Bc,EA+BJ,MA/BI,EA+BI,QA/BJ,EA+Bc,SA/Bd,EA+ByB,OA/BzB,EA+BkC,MA/BlC,EA+B0C,OA/B1C,EA+BmD,MA/BnD,EAgCd,YAhCc,EAgCA,iBAhCA,EAgCmB,WAhCnB,EAgCgC,OAhChC,EAgCyC,UAhCzC,EAiCd,WAjCc,EAiCD,eAjCC,EAiCgB,OAjChB,EAiCyB,KAjCzB,EAiCgC,MAjChC,EAiCwC,UAjCxC,EAkCd,SAlCc,EAkCH,QAlCG,EAkCO,sBAlCP,EAkC+B,WAlC/B,EAkC4C,cAlC5C,EAmCd,UAnCc,EAmCF,WAnCE,EAmCW,UAnCX,EAmCuB,MAnCvB,EAmC+B,OAnC/B,EAmCwC,SAnCxC,EAoCd,aApCc,EAoCC,WApCD,EAoCc,WApCd,EAoC2B,SApC3B,EAoCsC,OApCtC,EAoC+C,QApC/C,EAqCd,SArCc,EAqCH,aArCG,EAqCY,OArCZ,EAqCqB,QArCrB,EAqC+B,aArC/B,EAqC8C,aArC9C,EAsCd,MAtCc,EAsCN,OAtCM,EAsCG,QAtCH,EAsCa,SAtCb,EAsCwB,UAtCxB,EAsCoC,WAtCpC,EAsCiD,OAtCjD,EAuCd,OAvCc,EAuCL,OAvCK,EAuCI,QAvCJ,EAuCc,SAvCd,EAuCyB,MAvCzB,EAuCiC,QAvCjC,EAuC2C,cAvC3C,EAwCd,SAxCc,EAwCH,SAxCG,EAwCQ,MAxCR,EAwCgB,WAxChB,EAwC6B,YAxC7B,EAwC2C,UAxC3C,EAyCd,OAzCc,EAyCL,QAzCK,EAyCK,QAzCL,EAyCe,gBAzCf,EAyCiC,iBAzCjC,EA0Cd,eA1Cc,EA0CG,YA1CH,EA0CiB,MA1CjB,EA0CyB,OA1CzB,EA0CkC,YA1ClC,EA0CgD,QA1ChD,EA2Cd,SA3Cc,EA2CH,SA3CG,EA2CQ,QA3CR,EA2CkB,iBA3ClB,EA2CqC,aA3CrC,EA4Cd,WA5Cc,EA4CD,UA5CC,EA4CW,QA5CX,EA4CqB,QA5CrB,EA4C+B,UA5C/B,EA4C2C,QA5C3C,EA6Cd,SA7Cc,EA6CH,MA7CG,EA6CK,cA7CL,EA6CqB,SA7CrB,EA6CgC,oBA7ChC,EA8Cd,sBA9Cc,EA8CU,UA9CV,EA8CsB,OA9CtB,EA8C+B,SA9C/B,EA8C0C,OA9C1C,EA+Cd,aA/Cc,EA+CC,QA/CD,EA+CW,QA/CX,EA+CqB,OA/CrB,EA+C8B,IA/C9B,EA+CoC,KA/CpC,EA+C2C,OA/C3C,EA+CoD,MA/CpD,EAgDd,KAhDc,EAgDP,OAhDO,EAgDE,QAhDF,EAgDY,aAhDZ,EAgD2B,QAhD3B,EAgDqC,aAhDrC,EAiDd,eAjDc,EAiDG,mBAjDH,EAiDwB,cAjDxB,EAiDwC,SAjDxC,EAkDd,WAlDc,EAkDD,eAlDC,EAkDgB,QAlDhB,EAkD0B,KAlD1B,EAkDiC,QAlDjC,EAkD2C,YAlD3C,EAmDd,iBAnDc,EAmDK,qBAnDL,EAmD4B,eAnD5B,EAmD6C,UAnD7C,EAoDd,WApDc,EAoDD,MApDC,EAoDO,cApDP,EAoDuB,UApDvB,EAoDmC,mBApDnC,EAqDd,UArDc,EAqDF,qBArDE,EAqDqB,QArDrB,EAqD+B,YArD/B,EAqD6C,UArD7C,EAsDd,QAtDc,EAsDJ,QAtDI,EAsDM,SAtDN,EAsDiB,MAtDjB,EAsDyB,QAtDzB,EAsDmC,OAtDnC,EAsD4C,KAtD5C,EAsDmD,MAtDnD,EAuDd,UAvDc,EAuDF,YAvDE,EAuDY,SAvDZ,EAuDuB,UAvDvB,EAuDmC,OAvDnC,EAuD4C,WAvD5C,EAwDd,KAxDc,EAwDP,WAxDO,EAwDM,MAxDN,EAwDc,UAxDd,EAwD0B,YAxD1B,EAwDwC,QAxDxC,EAyDd,WAzDc,EAyDD,MAzDC,EAyDO,YAzDP,EAyDqB,MAzDrB,EAyD6B,KAzD7B,EAyDoC,MAzDpC,EAyD4C,SAzD5C,EA0Dd,cA1Dc,EA0DE,MA1DF,EA0DU,MA1DV,EA0DkB,cA1DlB,EA0DkC,KA1DlC,EA0DyC,MA1DzC,EA0DiD,SA1DjD,EA2Dd,UA3Dc,EA2DF,MA3DE,EA2DM,UA3DN,EA2DkB,UA3DlB,EA2D8B,KA3D9B,EA2DqC,OA3DrC,EA2D8C,UA3D9C,EA4Dd,MA5Dc,EA4DN,OA5DM,EA4DG,OA5DH,EA4DY,MA5DZ,EA4DoB,WA5DpB,EA4DiC,aA5DjC,EA6Dd,aA7Dc,EA6DC,aA7DD,EA6DgB,SA7DhB,EA6D2B,MA7D3B,EA6DmC,YA7DnC,EA6DiD,OA7DjD,EA8Dd,MA9Dc,EA8DN,aA9DM,EA8DS,eA9DT,EA8D0B,YA9D1B,EA8DwC,gBA9DxC,EA+Dd,KA/Dc,EA+DP,YA/DO,EA+DO,aA/DP,EA+DsB,MA/DtB,EA+D8B,QA/D9B,EA+DwC,MA/DxC,EA+DgD,KA/DhD,EAgEd,SAhEc,EAgEH,OAhEG,EAgEM,SAhEN,EAgEiB,OAhEjB,EAgE0B,YAhE1B,EAgEwC,MAhExC,EAiEd,YAjEc,EAiEA,SAjEA,EAiEW,KAjEX,EAiEkB,SAjElB,EAiE6B,qBAjE7B,EAiEoD,KAjEpD,EAkEd,OAlEc,EAkEL,MAlEK,EAkEG,WAlEH,EAkEgB,iBAlEhB,EAkEmC,UAlEnC,EAkE+C,UAlE/C,EAmEd,MAnEc,EAmEN,SAnEM,EAmEK,MAnEL,EAmEa,QAnEb,EAmEuB,MAnEvB,EAmE+B,OAnE/B,EAmEwC,KAnExC,EAmE+C,UAnE/C,EAoEd,WApEc,EAoED,YApEC,EAoEa,MApEb,EAoEqB,IApErB,EAoE2B,YApE3B,EAoEyC,YApEzC,EAqEd,YArEc,EAqEA,QArEA,EAqEU,SArEV,EAqEqB,YArErB,EAqEmC,WArEnC,EAsEd,YAtEc,EAsEA,YAtEA,EAsEc,UAtEd,EAsE0B,KAtE1B,EAsEiC,SAtEjC,EAsE4C,SAtE5C,EAuEd,KAvEc,EAuEP,SAvEO,EAuEI,WAvEJ,EAuEiB,cAvEjB,EAuEiC,MAvEjC,EAuEyC,IAvEzC,EAuE+C,SAvE/C,EAwEd,SAxEc,EAwEH,WAxEG,EAwEU,eAxEV,EAwE2B,cAxE3B,EAwE2C,QAxE3C,EAwEqD,MAxErD,EAyEd,aAzEc,EAyEC,MAzED,EAyES,KAzET,EAyEgB,MAzEhB,EAyEwB,qBAzExB,EAyE+C,UAzE/C,EA0Ed,MA1Ec,EA0EN,IA1EM,EA0EA,QA1EA,EA0EU,eA1EV,EA0E2B,SA1E3B,EA2Ed,uBA3Ec,EA2EW,OA3EX,EA2EoB,YA3EpB,EA2EkC,WA3ElC,EA4Ed,cA5Ec,EA4EE,cA5EF,EA4EkB,WA5ElB,EA4E+B,QA5E/B,EA4EyC,SA5EzC,EA6Ed,aA7Ec,EA6EC,KA7ED,EA6EQ,SA7ER,EA6EmB,SA7EnB,EA6E8B,OA7E9B,EA8Ed,uBA9Ec,EA8EW,gBA9EX,EA8E6B,YA9E7B,EA8E2C,aA9E3C,EA+Ed,sBA/Ec,EA+EU,SA/EV,EA+EqB,kBA/ErB,EAgFd,oBAhFc,EAgFQ,mBAhFR,EAgF6B,MAhF7B,EAgFqC,MAhFrC,EAgF6C,UAhF7C,EAiFd,UAjFc,EAiFF,eAjFE,EAiFe,OAjFf,EAiFwB,QAjFxB,EAiFkC,WAjFlC,EAkFd,aAlFc,EAkFC,SAlFD,EAkFY,WAlFZ,EAkFyB,YAlFzB,EAkFuC,YAlFvC,EAmFd,YAnFc,EAmFA,QAnFA,EAmFU,MAnFV,EAmFkB,WAnFlB,EAmF+B,aAnF/B,EAoFd,oBApFc,EAoFQ,qBApFR,EAoF+B,WApF/B,EAoF4C,SApF5C,EAqFd,QArFc,EAqFJ,WArFI,EAqFS,SArFT,EAqFoB,UArFpB,EAqFgC,YArFhC,EAqF8C,KArF9C,EAsFd,mBAtFc,EAsFO,iBAtFP,EAsF0B,iBAtF1B,EAsF6C,SAtF7C,EAuFd,OAvFc,EAuFL,eAvFK,EAuFY,OAvFZ,EAuFqB,uBAvFrB,EAuF8C,KAvF9C,EAwFd,QAxFc,EAwFJ,oBAxFI,EAwFkB,eAxFlB,EAwFmC,WAxFnC,EAyFd,cAzFc,EAyFE,QAzFF,EAyFY,YAzFZ,EAyF0B,SAzF1B,EAyFqC,WAzFrC,EAyFkD,SAzFlD,EA0Fd,QA1Fc,EA0FJ,aA1FI,EA0FW,aA1FX,EA0F0B,SA1F1B,EA0FqC,MA1FrC,EA2Fd,eA3Fc,EA2FG,eA3FH,EA2FoB,SA3FpB,EA2F+B,aA3F/B,EA2F8C,MA3F9C,EA4Fd,SA5Fc,EA4FH,MA5FG,EA4FK,YA5FL,EA4FmB,QA5FnB,EA4F6B,aA5F7B,EA4F4C,MA5F5C,EA6Fd,UA7Fc,EA6FF,UA7FE,EA6FU,KA7FV,EA6FiB,MA7FjB,EA6FyB,UA7FzB,EA6FqC,OA7FrC,EA6F8C,UA7F9C,EA8Fd,aA9Fc,EA8FC,KA9FD,EA8FQ,0BA9FR,EA+Fd,8BA/Fc,EA+FkB,oBA/FlB,EA+FwC,iBA/FxC,EAgGd,gBAhGc,EAgGI,MAhGJ,EAgGY,OAhGZ,EAgGqB,aAhGrB,EAgGoC,QAhGpC,EAgG8C,SAhG9C,EAiGd,iBAjGc,EAiGK,eAjGL,EAiGsB,iBAjGtB,EAiGyC,gBAjGzC,EAkGd,OAlGc,EAkGL,MAlGK,EAkGG,QAlGH,EAkGa,SAlGb,EAkGwB,SAlGxB,EAkGmC,OAlGnC,EAkG4C,MAlG5C,EAmGd,SAnGc,EAmGH,YAnGG,EAmGW,eAnGX,EAmG4B,YAnG5B,EAmG0C,eAnG1C,EAoGd,SApGc,EAoGH,iBApGG,EAoGgB,MApGhB,EAoGwB,UApGxB,EAoGoC,YApGpC,EAoGkD,KApGlD,EAqGd,SArGc,EAqGH,QArGG,EAqGO,YArGP,EAqGqB,MArGrB,EAqG6B,QArG7B,EAqGuC,QArGvC,EAqGiD,QArGjD,EAsGd,OAtGc,EAsGL,YAtGK,EAsGS,QAtGT,EAsGmB,SAtGnB,EAsG8B,MAtG9B,EAsGsC,gBAtGtC,EAuGd,iBAvGc,EAuGK,MAvGL,EAuGa,WAvGb,EAuG0B,UAvG1B,EAuGsC,YAvGtC,EAuGoD,MAvGpD,EAwGd,QAxGc,EAwGJ,eAxGI,EAwGa,MAxGb,EAwGqB,UAxGrB,EAwGiC,aAxGjC,EAyGd,YAzGc,EAyGA,WAzGA,EAyGa,WAzGb,EAyG0B,UAzG1B,EAyGsC,OAzGtC,EAyG+C,MAzG/C,EA0Gd,eA1Gc,EA0GG,mBA1GH,EA0GwB,gBA1GxB,EA0G0C,gBA1G1C,EA2Gd,eA3Gc,EA2GG,mBA3GH,EA2GwB,sBA3GxB,EA4Gd,kBA5Gc,EA4GM,iBA5GN,EA4GyB,eA5GzB,EA6Gd,mBA7Gc,EA6GO,eA7GP,EA6GwB,gBA7GxB,EA8Gd,oBA9Gc,EA8GQ,wBA9GR,EA8GkC,kBA9GlC,EA+Gd,sBA/Gc,EA+GU,yBA/GV,EA+GqC,iBA/GrC,EAgHd,oBAhHc,EAgHQ,wBAhHR,EAgHkC,UAhHlC,EAgH8C,SAhH9C,EAiHd,kBAjHc,EAiHM,WAjHN,EAiHmB,0BAjHnB,EAiH+C,QAjH/C,EAkHd,WAlHc,EAkHD,cAlHC,EAkHe,MAlHf,EAkHuB,KAlHvB,EAkH8B,OAlH9B,EAkHuC,KAlHvC,EAkH8C,MAlH9C,EAmHd,SAnHc,EAmHH,SAnHG,EAmHQ,MAnHR,EAmHgB,WAnHhB,EAmH6B,KAnH7B,EAmHoC,QAnHpC,EAmH8C,WAnH9C,EAoHd,SApHc,EAoHH,WApHG,EAoHU,WApHV,EAoHuB,SApHvB,EAoHkC,QApHlC,EAoH4C,MApH5C,EAqHd,YArHc,EAqHA,UArHA,EAqHY,UArHZ,EAqHwB,WArHxB,EAqHqC,OArHrC,EAsHd,eAtHc,EAsHG,gBAtHH,EAsHqB,aAtHrB,EAsHoC,sBAtHpC,EAuHd,iBAvHc,EAuHK,WAvHL,EAuHkB,WAvHlB,EAuH+B,cAvH/B,EAwHd,gBAxHc,EAwHI,aAxHJ,EAwHmB,gBAxHnB,EAwHqC,SAxHrC,EAwHgD,OAxHhD,EAyHd,QAzHc,CAAlB;AA0HA,QAAIC,iBAAiB,GAAG,CACpB,IADoB,EACd,KADc,EACP,MADO,EACC,SADD,EACY,UADZ,EACwB,MADxB,EACgC,OADhC,EACyC,SADzC,EAEpB,MAFoB,EAEZ,QAFY,EAEF,SAFE,EAES,OAFT,EAEkB,KAFlB,EAEyB,cAFzB,EAEyC,WAFzC,EAGpB,MAHoB,EAGZ,UAHY,EAGA,aAHA,EAGe,WAHf,EAG4B,WAH5B,EAGyC,SAHzC,EAIpB,IAJoB,EAId,OAJc,EAIL,SAJK,EAIM,MAJN,EAIc,QAJd,EAIwB,iBAJxB,EAKpB,aALoB,EAKL,IALK,EAKC,KALD,EAKQ,QALR,EAKkB,IALlB,EAKwB,QALxB,EAKkC,QALlC,EAK4C,SAL5C,EAMpB,KANoB,EAMb,OANa,EAMJ,SANI,EAMO,MANP,EAMe,IANf,EAMqB,OANrB,EAM8B,OAN9B,EAMuC,YANvC,EAOpB,QAPoB,EAOV,SAPU,EAOC,KAPD,EAOQ,MAPR,EAOgB,YAPhB,EAO8B,UAP9B,EAO0C,UAP1C,EAQpB,WARoB,EAQP,OARO,EAQE,eARF,EAQmB,gBARnB,EAQqC,aARrC,EASpB,sBAToB,EASI,iBATJ,EASuB,WATvB,EASoC,WATpC,EAUpB,cAVoB,EAUJ,gBAVI,EAUc,aAVd,EAU6B,gBAV7B,CAAxB;AAYAN,IAAAA,UAAU,CAACO,cAAX,CAA0B,WAA1B,EAAuC,SAAvC,EACE,GAAGC,MAAH,CAAUL,KAAV,EAAiBC,YAAjB,EAA+BC,WAA/B,CADF;AAGA,QAAII,IAAI,GAAGC,eAAe,CAACP,KAAD,CAA1B;AACA,QAAIQ,WAAW,GAAGD,eAAe,CAACN,YAAD,CAAjC;AACA,QAAIQ,UAAU,GAAGF,eAAe,CAACL,WAAD,CAAhC;AACA,QAAIQ,gBAAgB,GAAGH,eAAe,CAACJ,iBAAD,CAAtC;AACA,QAAIQ,SAAS,GAAG,8BAAhB;AACA,QAAIC,aAAa,GAAG,iJAApB;AACA,QAAIC,gBAAgB,GAAG,gIAAvB,CAnJkD,CAqJlD;AACA;AACA;;AACA,QAAIC,eAAe,GAAG,iNAAtB;;AAEA,aAASC,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AAC3B,UAAID,MAAM,CAACE,QAAP,MAAqBF,MAAM,CAACG,GAAP,CAAW,GAAX,CAAzB,EAA0C,OAAO,CAAC,OAAD,EAAU,IAAV,CAAP;AAC1C,UAAIH,MAAM,CAACI,KAAP,CAAaR,aAAb,CAAJ,EAAiC,OAAO,CAAC,IAAD,EAAO,QAAP,CAAP;AACjC,UAAII,MAAM,CAACI,KAAP,CAAaP,gBAAb,CAAJ,EAAoC,OAAO,CAAC,IAAD,EAAO,UAAP,CAAP;AACpC,UAAIG,MAAM,CAACG,GAAP,CAAW,IAAX,CAAJ,EAAsB,OAAO,CAACF,KAAK,CAACI,QAAN,GAAiBC,QAAlB,EAA4BN,MAA5B,EAAoCC,KAApC,CAAP;AACtB,UAAID,MAAM,CAACG,GAAP,CAAW,SAAX,CAAJ,EAA2B,OAAO,CAAC,MAAD,EAAS,SAAT,CAAP;AAC3B,UAAIH,MAAM,CAACG,GAAP,CAAW,SAAX,CAAJ,EAA2B,OAAO,CAAC,OAAD,EAAU,SAAV,CAAP;;AAC3B,UAAIH,MAAM,CAACG,GAAP,CAAW,IAAX,CAAJ,EAAsB;AAACH,QAAAA,MAAM,CAACO,SAAP;AAAoB,eAAO,CAAC,OAAD,EAAU,SAAV,CAAP;AAA6B;;AACxE,UAAIP,MAAM,CAACG,GAAP,CAAW,WAAX,CAAJ,EAA6B,OAAO,CAAC,IAAD,EAAO,MAAP,CAAP;AAE7B,UAAIK,OAAO,GAAGR,MAAM,CAACI,KAAP,CAAaN,eAAb,CAAd;AACA,UAAIW,MAAM,GAAGD,OAAO,IAAIA,OAAO,CAAC,CAAD,CAA/B;;AAEA,UAAI,CAACC,MAAL,EAAa;AACX;AACAT,QAAAA,MAAM,CAACU,IAAP;AACAV,QAAAA,MAAM,CAACW,QAAP,CAAgB,UAAUC,CAAV,EAAa;AAAC,iBAAO,CAACC,EAAE,CAACD,CAAD,EAAIjB,SAAJ,CAAV;AAA0B,SAAxD;AACA,eAAO,CAAC,IAAD,EAAO,OAAP,CAAP;AACD;;AAED,UAAIc,MAAM,KAAK,SAAX,IAAwBR,KAAK,CAACa,SAAN,KAAoB,GAAhD,EACE,OAAO,CAACb,KAAK,CAACI,QAAN,GAAiBU,SAAlB,EAA6Bf,MAA7B,EAAqCC,KAArC,CAAP;AACF,UAAIY,EAAE,CAACJ,MAAD,EAASnB,IAAT,CAAF,IAAoBmB,MAAM,CAACO,MAAP,CAAc,CAAd,MAAqB,GAA7C,EAAkD,OAAO,CAAC,QAAD,EAAW,MAAX,CAAP;AAClD,UAAIH,EAAE,CAACJ,MAAD,EAASjB,WAAT,CAAF,IAA2BqB,EAAE,CAACJ,MAAD,EAAShB,UAAT,CAAjC,EAAuD,OAAO,CAAC,QAAD,EAAW,SAAX,CAAP;AACvD,UAAIQ,KAAK,CAACa,SAAN,KAAoB,GAAxB,EAA6B,OAAO,CAAC,QAAD,EAAW,SAAX,CAAP,CAxBF,CAwBgC;;AAE3D,aAAO,CAAC,QAAD,EAAW,UAAX,CAAP;AACD;;AAED,aAASR,QAAT,CAAkBN,MAAlB,EAA0BC,KAA1B,EAAiC;AAC/B,UAAIgB,OAAO,GAAG,KAAd;AAAA,UAAqBP,IAArB;;AAEA,aAAOA,IAAI,GAAGV,MAAM,CAACU,IAAP,EAAd,EAA6B;AAC3B,YAAIA,IAAI,KAAK,IAAT,IAAiB,CAACO,OAAtB,EAA+B;AAAChB,UAAAA,KAAK,CAACI,QAAN,GAAiBN,IAAjB;AAAuB;AAAO;;AAC9DkB,QAAAA,OAAO,GAAG,CAACA,OAAD,IAAYP,IAAI,KAAK,IAA/B;AACD;;AAED,aAAO,CAAC,IAAD,EAAO,QAAP,CAAP;AACD;;AAED,aAASK,SAAT,CAAmBf,MAAnB,EAA2BC,KAA3B,EAAkC;AAChC,UAAIiB,gBAAgB,GAAG,CAAvB;AACA,UAAIR,IAAJ;;AAEA,aAAOA,IAAI,GAAGV,MAAM,CAACU,IAAP,EAAd,EAA6B;AAC3B,YAAIA,IAAI,KAAK,GAAb,EAAkBQ,gBAAgB;AAClC,YAAIR,IAAI,KAAK,GAAb,EAAkBQ,gBAAgB;;AAClC,YAAIA,gBAAgB,KAAK,CAAzB,EAA4B;AAC1BlB,UAAAA,MAAM,CAACmB,MAAP,CAAc,CAAd;AACAlB,UAAAA,KAAK,CAACI,QAAN,GAAiBN,IAAjB;AACA;AACD;AACF;;AAED,aAAO,CAAC,OAAD,EAAU,SAAV,CAAP;AACD;;AAED,aAASR,eAAT,CAAyB6B,KAAzB,EAAgC;AAC9B,UAAIC,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkC,EAAED,CAApC,EAAuCD,GAAG,CAACD,KAAK,CAACE,CAAD,CAAN,CAAH,GAAgB,IAAhB;;AAEvC,aAAOD,GAAP;AACD;;AAED,aAASR,EAAT,CAAYW,KAAZ,EAAmBC,IAAnB,EAAyB;AACvB,UAAIA,IAAI,YAAYC,MAApB,EAA4B,OAAOD,IAAI,CAACA,IAAL,CAAUD,KAAV,CAAP;AAC5B,UAAIC,IAAI,YAAYE,MAApB,EAA4B,OAAOF,IAAI,CAACG,oBAAL,CAA0BJ,KAA1B,CAAP;AAC7B;;AAED,WAAO;AACLK,MAAAA,UAAU,EAAE,YAAY;AACtB,eAAO;AACLC,UAAAA,GAAG,EAAE;AAACC,YAAAA,IAAI,EAAE,IAAP;AAAaC,YAAAA,KAAK,EAAE,CAApB;AAAuBC,YAAAA,QAAQ,EAAE;AAAjC,WADA;AAELnB,UAAAA,SAAS,EAAE,IAFN;AAGLT,UAAAA,QAAQ,EAAEN;AAHL,SAAP;AAKD,OAPI;AASLmC,MAAAA,KAAK,EAAE,UAAUlC,MAAV,EAAkBC,KAAlB,EAAyB;AAC9B,YAAID,MAAM,CAACmC,GAAP,MAAiB,OAAOlC,KAAK,CAAC6B,GAAN,CAAUG,QAAjB,KAA8B,QAAnD,EACEhC,KAAK,CAAC6B,GAAN,CAAUG,QAAV,GAAqBhC,KAAK,CAAC6B,GAAN,CAAUE,KAAV,GAAkB,CAAvC;AAEF,YAAII,aAAa,GAAGnC,KAAK,CAACI,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAApB;AACA,YAAIoC,IAAI,GAAGD,aAAa,CAAC,CAAD,CAAxB;AACA,YAAIE,KAAK,GAAGF,aAAa,CAAC,CAAD,CAAzB;AACA,YAAIG,OAAO,GAAGvC,MAAM,CAACuC,OAAP,EAAd;;AAEA,YAAIF,IAAI,KAAK,OAAb,EAAsB;AACpB,cAAIpC,KAAK,CAACa,SAAN,KAAoB,GAApB,IAA2Bb,KAAK,CAAC6B,GAAN,CAAUG,QAAV,KAAuB,IAAtD,EAA4D;AAC1D,gBAAII,IAAI,KAAK,QAAT,IAAqBxB,EAAE,CAAC0B,OAAD,EAAU7C,gBAAV,CAA3B,EACEO,KAAK,CAAC6B,GAAN,CAAUG,QAAV,GAAqBhC,KAAK,CAAC6B,GAAN,CAAUE,KAAV,GAAkBjD,OAAO,CAACyD,UAA/C,CADF,KAEKvC,KAAK,CAAC6B,GAAN,CAAUG,QAAV,GAAqB,MAArB;AACN,WAJD,MAIO,IAAIhC,KAAK,CAAC6B,GAAN,CAAUG,QAAV,KAAuB,MAA3B,EAAmC;AACxChC,YAAAA,KAAK,CAAC6B,GAAN,CAAUG,QAAV,GAAqBjC,MAAM,CAACyC,MAAP,EAArB;AACD;;AAEDxC,UAAAA,KAAK,CAACa,SAAN,GAAkByB,OAAlB;AACD;;AAED,YAAIF,IAAI,KAAK,MAAb,EACEpC,KAAK,CAAC6B,GAAN,GAAY;AAACC,UAAAA,IAAI,EAAE9B,KAAK,CAAC6B,GAAb;AAAkBE,UAAAA,KAAK,EAAEhC,MAAM,CAACyC,MAAP,EAAzB;AAA0CR,UAAAA,QAAQ,EAAE;AAApD,SAAZ,CADF,KAEK,IAAII,IAAI,KAAK,OAAb,EAAsBpC,KAAK,CAAC6B,GAAN,GAAY7B,KAAK,CAAC6B,GAAN,CAAUC,IAAV,IAAkB9B,KAAK,CAAC6B,GAApC;AAE3B,eAAOQ,KAAP;AACD,OAnCI;AAqCLI,MAAAA,MAAM,EAAE,UAAUzC,KAAV,EAAiB;AACvB,YAAIqB,CAAC,GAAGrB,KAAK,CAAC6B,GAAN,CAAUG,QAAlB;AAEA,eAAQ,OAAOX,CAAP,KAAa,QAAd,GACLA,CADK,GAELrB,KAAK,CAAC6B,GAAN,CAAUE,KAAV,GAAkB,CAFpB;AAGD,OA3CI;AA6CLW,MAAAA,aAAa,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OA7CV;AA8CLC,MAAAA,WAAW,EAAE;AA9CR,KAAP;AAgDD,GAhRD;AAkRAhE,EAAAA,UAAU,CAACiE,UAAX,CAAsB,gBAAtB,EAAwC,SAAxC;AACAjE,EAAAA,UAAU,CAACiE,UAAX,CAAsB,sBAAtB,EAA8C,SAA9C;AACAjE,EAAAA,UAAU,CAACiE,UAAX,CAAsB,iBAAtB,EAAyC,SAAzC;AAEC,CAhSD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports === \"object\" && typeof module === \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define === \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"clojure\", function (options) {\n  var atoms = [\"false\", \"nil\", \"true\"];\n  var specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\",\n      \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\n  var coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\",\n      \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\",\n      \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\",\n      \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\",\n      \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\",\n      \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\",\n      \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\",\n      \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\",\n      \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\",\n      \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\",\n      \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\",\n      \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\",\n      \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\",\n      \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\",\n      \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\",\n      \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\",\n      \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\",\n      \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\",\n      \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\",\n      \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\",\n      \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\",\n      \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\",\n      \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\",\n      \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\",\n      \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\",\n      \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\",\n      \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\",\n      \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\",\n      \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\",\n      \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\",\n      \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\",\n      \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\",\n      \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\",\n      \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\",\n      \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\",\n      \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\",\n      \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\",\n      \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\",\n      \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\",\n      \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\",\n      \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\",\n      \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\",\n      \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\",\n      \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\",\n      \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\",\n      \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\",\n      \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\",\n      \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\",\n      \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\",\n      \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\",\n      \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\",\n      \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\",\n      \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\",\n      \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\",\n      \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\",\n      \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\",\n      \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\",\n      \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\",\n      \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\",\n      \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\",\n      \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\",\n      \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\",\n      \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\",\n      \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\",\n      \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\",\n      \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\",\n      \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\",\n      \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\",\n      \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\",\n      \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\",\n      \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\",\n      \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\",\n      \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\",\n      \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\",\n      \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\",\n      \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\",\n      \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\",\n      \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\",\n      \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\",\n      \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\",\n      \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\",\n      \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\",\n      \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\",\n      \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\",\n      \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\",\n      \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\",\n      \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\",\n      \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\",\n      \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\",\n      \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\",\n      \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\",\n      \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\",\n      \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\",\n      \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\",\n      \"sequential?\", \"set\", \"set-agent-send-executor!\",\n      \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\",\n      \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\",\n      \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\",\n      \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\",\n      \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\",\n      \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\",\n      \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\",\n      \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\",\n      \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\",\n      \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\",\n      \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\",\n      \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\",\n      \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\",\n      \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\",\n      \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\",\n      \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\",\n      \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\",\n      \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\",\n      \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\",\n      \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\",\n      \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\",\n      \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\",\n      \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\",\n      \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\",\n      \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\",\n      \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\",\n      \"zipmap\"];\n  var haveBodyParameter = [\n      \"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\",\n      \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\",\n      \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\",\n      \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\",\n      \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\",\n      \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\",\n      \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n      \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\",\n      \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\",\n      \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"clojure\",\n    [].concat(atoms, specialForms, coreSymbols));\n\n  var atom = createLookupMap(atoms);\n  var specialForm = createLookupMap(specialForms);\n  var coreSymbol = createLookupMap(coreSymbols);\n  var hasBodyParameter = createLookupMap(haveBodyParameter);\n  var delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\n  var numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\n  var characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n  // simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*/\n  // simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n  // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n  var qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n  function base(stream, state) {\n    if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n    if (stream.match(numberLiteral)) return [null, \"number\"];\n    if (stream.match(characterLiteral)) return [null, \"string-2\"];\n    if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n    if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n    if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n    if (stream.eat(/^;/)) {stream.skipToEnd(); return [\"space\", \"comment\"];}\n    if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n\n    var matches = stream.match(qualifiedSymbol);\n    var symbol = matches && matches[0];\n\n    if (!symbol) {\n      // advance stream by at least one character so we don't get stuck.\n      stream.next();\n      stream.eatWhile(function (c) {return !is(c, delimiter);});\n      return [null, \"error\"];\n    }\n\n    if (symbol === \"comment\" && state.lastToken === \"(\")\n      return (state.tokenize = inComment)(stream, state);\n    if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n    if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n    if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n    return [\"symbol\", \"variable\"];\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n\n    while (next = stream.next()) {\n      if (next === \"\\\"\" && !escaped) {state.tokenize = base; break;}\n      escaped = !escaped && next === \"\\\\\";\n    }\n\n    return [null, \"string\"];\n  }\n\n  function inComment(stream, state) {\n    var parenthesisCount = 1;\n    var next;\n\n    while (next = stream.next()) {\n      if (next === \")\") parenthesisCount--;\n      if (next === \"(\") parenthesisCount++;\n      if (parenthesisCount === 0) {\n        stream.backUp(1);\n        state.tokenize = base;\n        break;\n      }\n    }\n\n    return [\"space\", \"comment\"];\n  }\n\n  function createLookupMap(words) {\n    var obj = {};\n\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n    return obj;\n  }\n\n  function is(value, test) {\n    if (test instanceof RegExp) return test.test(value);\n    if (test instanceof Object) return test.propertyIsEnumerable(value);\n  }\n\n  return {\n    startState: function () {\n      return {\n        ctx: {prev: null, start: 0, indentTo: 0},\n        lastToken: null,\n        tokenize: base\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && (typeof state.ctx.indentTo !== \"number\"))\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      var typeStylePair = state.tokenize(stream, state);\n      var type = typeStylePair[0];\n      var style = typeStylePair[1];\n      var current = stream.current();\n\n      if (type !== \"space\") {\n        if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n          if (type === \"symbol\" && is(current, hasBodyParameter))\n            state.ctx.indentTo = state.ctx.start + options.indentUnit;\n          else state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo === \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n\n        state.lastToken = current;\n      }\n\n      if (type === \"open\")\n        state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n\n      return style;\n    },\n\n    indent: function (state) {\n      var i = state.ctx.indentTo;\n\n      return (typeof i === \"number\") ?\n        i :\n        state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-clojure\", \"clojure\");\nCodeMirror.defineMIME(\"text/x-clojurescript\", \"clojure\");\nCodeMirror.defineMIME(\"application/edn\", \"clojure\");\n\n});\n"]},"metadata":{},"sourceType":"script"}