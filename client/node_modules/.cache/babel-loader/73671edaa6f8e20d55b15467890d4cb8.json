{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function (basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" + \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" + \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" + \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" + \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" + \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" + \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" + \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" + \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" + \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" + \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" + \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" + \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" + \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" + \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" + \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" + \" TruthValue RowStatus DisplayString GeneralString\" + \" GraphicString IA5String NumericString\" + \" PrintableString SnmpAdminAtring TeletexString\" + \" UTF8String VideotexString VisibleString StringStore\" + \" ISO646String T61String UniversalString Unsigned32\" + \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" + \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" + \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" + \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/asn.1/asn.1.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","words","str","obj","split","i","length","defineMIME","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes|| {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"-\"){\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n    \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n    \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n    \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n    \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n    \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n    \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n    \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n    \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n    \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n    \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n    \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n    \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n    \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n    \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n    \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n    \" TruthValue RowStatus DisplayString GeneralString\" +\n    \" GraphicString IA5String NumericString\" +\n    \" PrintableString SnmpAdminAtring TeletexString\" +\n    \" UTF8String VideotexString VisibleString StringStore\" +\n    \" ISO646String T61String UniversalString Unsigned32\" +\n    \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n    \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n    \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n    \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});\n"]},"metadata":{},"sourceType":"script"}