{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mathematica', function (_config, _parserConfig) {\n    // used pattern building blocks\n    var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n    var pBase = \"(?:\\\\d+)\";\n    var pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n    var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n    var pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\"; // regular expressions\n\n    var reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n    var reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n    var reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n    function tokenBase(stream, state) {\n      var ch; // get next character\n\n      ch = stream.next(); // string\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      } // comment\n\n\n      if (ch === '(') {\n        if (stream.eat('*')) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      } // go back one character\n\n\n      stream.backUp(1); // look for numbers\n      // Numbers in a baseform\n\n      if (stream.match(reBaseForm, true, false)) {\n        return 'number';\n      } // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n      // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n\n\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      }\n      /* In[23] and Out[34] */\n\n\n      if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n        return 'atom';\n      } // usage\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n        return 'meta';\n      } // message\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n        return 'string-2';\n      } // this makes a look-ahead match for something like variable:{_Integer}\n      // the match is then forwarded to the mma-patterns tokenizer.\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n        return 'variable-2';\n      } // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n      // Cannot start with a number, but can have numbers at any other position. Examples\n      // blub__Integer, a1_, b34_Integer32\n\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      } // Named characters in Mathematica, like \\[Gamma].\n\n\n      if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n        return 'variable-3';\n      } // Match all braces separately\n\n\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      } // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n      // only one.\n\n\n      if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n        return 'variable-2';\n      } // Literals like variables, keywords, functions\n\n\n      if (stream.match(reIdInContext, true, false)) {\n        return 'keyword';\n      } // operators. Note that operators like @@ or /; are matched separately for each symbol.\n\n\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n        return 'operator';\n      } // everything else is an error\n\n\n      stream.next(); // advance the stream.\n\n      return 'error';\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'comment';\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-mathematica', {\n    name: 'mathematica'\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/mathematica/mathematica.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","_parserConfig","Identifier","pBase","pFloat","pFloatBase","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","startState","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mathematica', function(_config, _parserConfig) {\n\n  // used pattern building blocks\n  var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n  var pBase      = \"(?:\\\\d+)\";\n  var pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n  var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n  var pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n  // regular expressions\n  var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n  var reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n  var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // look for numbers\n    // Numbers in a baseform\n    if (stream.match(reBaseForm, true, false)) {\n      return 'number';\n    }\n\n    // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n    // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    /* In[23] and Out[34] */\n    if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n      return 'atom';\n    }\n\n    // usage\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n      return 'meta';\n    }\n\n    // message\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n      return 'string-2';\n    }\n\n    // this makes a look-ahead match for something like variable:{_Integer}\n    // the match is then forwarded to the mma-patterns tokenizer.\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n    // Cannot start with a number, but can have numbers at any other position. Examples\n    // blub__Integer, a1_, b34_Integer32\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Named characters in Mathematica, like \\[Gamma].\n    if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n      return 'variable-3';\n    }\n\n    // Match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n    // only one.\n    if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Literals like variables, keywords, functions\n    if (stream.match(reIdInContext, true, false)) {\n      return 'keyword';\n    }\n\n    // operators. Note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    stream.next(); // advance the stream.\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-mathematica', {\n  name: 'mathematica'\n});\n\n});\n"]},"metadata":{},"sourceType":"script"}