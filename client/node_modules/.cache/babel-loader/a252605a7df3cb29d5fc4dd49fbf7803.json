{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {\n      slash: 0,\n      parenthesis: 1\n    };\n    var stateType = {\n      comment: 0,\n      _string: 1,\n      characterClass: 2\n    };\n    var bracesMode = null;\n    if (config.bracesMode) bracesMode = CodeMirror.getMode(config, config.bracesMode);\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return; //check for state changes\n\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n\n            state.stack.unshift(stateType._string);\n          } else if (stream.match(/^\\/\\*/)) {\n            //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match(/^\\(\\*/)) {\n            //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        } //return state\n        //stack has\n\n\n        switch (state.stack[0]) {\n          case stateType._string:\n            while (state.stack[0] === stateType._string && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n\n            return state.lhs ? \"property string\" : \"string\";\n          // Token style\n\n          case stateType.comment:\n            while (state.stack[0] === stateType.comment && !stream.eol()) {\n              if (state.commentType === commentType.slash && stream.match(/\\*\\//)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else if (state.commentType === commentType.parenthesis && stream.match(/\\*\\)/)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else {\n                stream.match(/^.[^\\*]*/);\n              }\n            }\n\n            return \"comment\";\n\n          case stateType.characterClass:\n            while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n                state.stack.shift();\n              }\n            }\n\n            return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null) state.localState = CodeMirror.startState(bracesMode);\n          var token = bracesMode.token(stream, state.localState),\n              text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n\n          return token;\n        } //no stack\n\n\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(stateType.characterClass);\n            return \"bracket\";\n\n          case \":\":\n          case \"|\":\n          case \";\":\n            stream.next();\n            return \"operator\";\n\n          case \"%\":\n            if (stream.match(\"%%\")) {\n              return \"header\";\n            } else if (stream.match(/[%][A-Za-z]+/)) {\n              return \"keyword\";\n            } else if (stream.match(/[%][}]/)) {\n              return \"matchingbracket\";\n            }\n\n            break;\n\n          case \"/\":\n            if (stream.match(/[\\/][A-Za-z]+/)) {\n              return \"keyword\";\n            }\n\n          case \"\\\\\":\n            if (stream.match(/[\\][a-z]+/)) {\n              return \"string-2\";\n            }\n\n          case \".\":\n            if (stream.match(\".\")) {\n              return \"atom\";\n            }\n\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n            if (stream.match(peek)) {\n              return \"atom\";\n            }\n\n          case \"$\":\n            if (stream.match(\"$$\")) {\n              return \"builtin\";\n            } else if (stream.match(/[$][0-9]+/)) {\n              return \"variable-3\";\n            }\n\n          case \"<\":\n            if (stream.match(/<<[a-zA-Z_]+>>/)) {\n              return \"builtin\";\n            }\n\n        }\n\n        if (stream.match(/^\\/\\//)) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(/return/)) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/ebnf/ebnf.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","commentType","slash","parenthesis","stateType","comment","_string","characterClass","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match(/^\\/\\*/)) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match(/^\\(\\*/)) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match(/\\*\\//)) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match(/\\*\\)/)) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match(/^\\/\\//)) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(/return/)) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"]},"metadata":{},"sourceType":"script"}