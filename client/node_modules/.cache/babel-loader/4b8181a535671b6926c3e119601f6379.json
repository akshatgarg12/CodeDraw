{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */\n\n\nfunction moveSelectionForward(editorState, maxDistance) {\n  var selection = editorState.getSelection(); // Should eventually make this an invariant\n\n  process.env.NODE_ENV !== \"production\" ? warning(selection.isCollapsed(), 'moveSelectionForward should only be called with a collapsed SelectionState') : void 0;\n  var key = selection.getStartKey();\n  var offset = selection.getStartOffset();\n  var content = editorState.getCurrentContent();\n  var focusKey = key;\n  var focusOffset;\n  var block = content.getBlockForKey(key);\n\n  if (maxDistance > block.getText().length - offset) {\n    focusKey = content.getKeyAfter(key);\n    focusOffset = 0;\n  } else {\n    focusOffset = offset + maxDistance;\n  }\n\n  return selection.merge({\n    focusKey: focusKey,\n    focusOffset: focusOffset\n  });\n}\n\nmodule.exports = moveSelectionForward;","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/draft-js/lib/moveSelectionForward.js"],"names":["warning","require","moveSelectionForward","editorState","maxDistance","selection","getSelection","process","env","NODE_ENV","isCollapsed","key","getStartKey","offset","getStartOffset","content","getCurrentContent","focusKey","focusOffset","block","getBlockForKey","getText","length","getKeyAfter","merge","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAArB;AACA;;;;;;;;;;AAUA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2CC,WAA3C,EAAwD;AACtD,MAAIC,SAAS,GAAGF,WAAW,CAACG,YAAZ,EAAhB,CADsD,CACV;;AAE5CC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,OAAO,CAACK,SAAS,CAACK,WAAV,EAAD,EAA0B,4EAA1B,CAA/C,GAAyJ,KAAK,CAA9J;AACA,MAAIC,GAAG,GAAGN,SAAS,CAACO,WAAV,EAAV;AACA,MAAIC,MAAM,GAAGR,SAAS,CAACS,cAAV,EAAb;AACA,MAAIC,OAAO,GAAGZ,WAAW,CAACa,iBAAZ,EAAd;AACA,MAAIC,QAAQ,GAAGN,GAAf;AACA,MAAIO,WAAJ;AACA,MAAIC,KAAK,GAAGJ,OAAO,CAACK,cAAR,CAAuBT,GAAvB,CAAZ;;AAEA,MAAIP,WAAW,GAAGe,KAAK,CAACE,OAAN,GAAgBC,MAAhB,GAAyBT,MAA3C,EAAmD;AACjDI,IAAAA,QAAQ,GAAGF,OAAO,CAACQ,WAAR,CAAoBZ,GAApB,CAAX;AACAO,IAAAA,WAAW,GAAG,CAAd;AACD,GAHD,MAGO;AACLA,IAAAA,WAAW,GAAGL,MAAM,GAAGT,WAAvB;AACD;;AAED,SAAOC,SAAS,CAACmB,KAAV,CAAgB;AACrBP,IAAAA,QAAQ,EAAEA,QADW;AAErBC,IAAAA,WAAW,EAAEA;AAFQ,GAAhB,CAAP;AAID;;AAEDO,MAAM,CAACC,OAAP,GAAiBxB,oBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */\n\n\nfunction moveSelectionForward(editorState, maxDistance) {\n  var selection = editorState.getSelection(); // Should eventually make this an invariant\n\n  process.env.NODE_ENV !== \"production\" ? warning(selection.isCollapsed(), 'moveSelectionForward should only be called with a collapsed SelectionState') : void 0;\n  var key = selection.getStartKey();\n  var offset = selection.getStartOffset();\n  var content = editorState.getCurrentContent();\n  var focusKey = key;\n  var focusOffset;\n  var block = content.getBlockForKey(key);\n\n  if (maxDistance > block.getText().length - offset) {\n    focusKey = content.getKeyAfter(key);\n    focusOffset = 0;\n  } else {\n    focusOffset = offset + maxDistance;\n  }\n\n  return selection.merge({\n    focusKey: focusKey,\n    focusOffset: focusOffset\n  });\n}\n\nmodule.exports = moveSelectionForward;"]},"metadata":{},"sourceType":"script"}