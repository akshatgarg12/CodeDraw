{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"yaml\", function () {\n    var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n    var keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\n    return {\n      token: function (stream, state) {\n        var ch = stream.peek();\n        var esc = state.escaped;\n        state.escaped = false;\n        /* comments */\n\n        if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n\n        if (state.literal && stream.indentation() > state.keyCol) {\n          stream.skipToEnd();\n          return \"string\";\n        } else if (state.literal) {\n          state.literal = false;\n        }\n\n        if (stream.sol()) {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          /* document start */\n\n          if (stream.match(/---/)) {\n            return \"def\";\n          }\n          /* document end */\n\n\n          if (stream.match(/\\.\\.\\./)) {\n            return \"def\";\n          }\n          /* array list item */\n\n\n          if (stream.match(/\\s*-\\s+/)) {\n            return 'meta';\n          }\n        }\n        /* inline pairs/lists */\n\n\n        if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n          if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n          return 'meta';\n        }\n        /* list seperator */\n\n\n        if (state.inlineList > 0 && !esc && ch == ',') {\n          stream.next();\n          return 'meta';\n        }\n        /* pairs seperator */\n\n\n        if (state.inlinePairs > 0 && !esc && ch == ',') {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          stream.next();\n          return 'meta';\n        }\n        /* start of value of a pair */\n\n\n        if (state.pairStart) {\n          /* block literals */\n          if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n            state.literal = true;\n            return 'meta';\n          }\n\n          ;\n          /* references */\n\n          if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n            return 'variable-2';\n          }\n          /* numbers */\n\n\n          if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n            return 'number';\n          }\n\n          if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n            return 'number';\n          }\n          /* keywords */\n\n\n          if (stream.match(keywordRegex)) {\n            return 'keyword';\n          }\n        }\n        /* pairs (associative arrays) -> key */\n\n\n        if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n          state.pair = true;\n          state.keyCol = stream.indentation();\n          return \"atom\";\n        }\n\n        if (state.pair && stream.match(/^:\\s*/)) {\n          state.pairStart = true;\n          return 'meta';\n        }\n        /* nothing found, continue */\n\n\n        state.pairStart = false;\n        state.escaped = ch == '\\\\';\n        stream.next();\n        return null;\n      },\n      startState: function () {\n        return {\n          pair: false,\n          pairStart: false,\n          keyCol: 0,\n          inlinePairs: 0,\n          inlineList: 0,\n          literal: false,\n          escaped: false\n        };\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\n  CodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/yaml/yaml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match(/---/)) { return \"def\"; }\n        /* document end */\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list seperator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs seperator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n"]},"metadata":{},"sourceType":"script"}