{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [{\n      regex: /\\{\\{\\{/,\n      push: \"handlebars_raw\",\n      token: \"tag\"\n    }, {\n      regex: /\\{\\{!--/,\n      push: \"dash_comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{!/,\n      push: \"comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{/,\n      push: \"handlebars\",\n      token: \"tag\"\n    }],\n    handlebars_raw: [{\n      regex: /\\}\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }],\n    handlebars: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }, // Double and single quotes\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, // Handlebars keywords\n    {\n      regex: />|[#\\/]([A-Za-z_]\\w*)/,\n      token: \"keyword\"\n    }, {\n      regex: /(?:else|this)\\b/,\n      token: \"keyword\"\n    }, // Numeral\n    {\n      regex: /\\d+/i,\n      token: \"number\"\n    }, // Atoms like = and .\n    {\n      regex: /=|~|@|true|false/,\n      token: \"atom\"\n    }, // Paths\n    {\n      regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/,\n      token: \"variable-2\"\n    }],\n    dash_comment: [{\n      regex: /--\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, // Commented code\n    {\n      regex: /./,\n      token: \"comment\"\n    }],\n    comment: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, {\n      regex: /./,\n      token: \"comment\"\n    }],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n  CodeMirror.defineMode(\"handlebars\", function (config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: \"{{\",\n      close: /\\}\\}\\}?/,\n      mode: handlebars,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/handlebars/handlebars.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","push","token","handlebars_raw","pop","handlebars","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [\n      { regex: /\\{\\{\\{/, push: \"handlebars_raw\", token: \"tag\" },\n      { regex: /\\{\\{!--/, push: \"dash_comment\", token: \"comment\" },\n      { regex: /\\{\\{!/,   push: \"comment\", token: \"comment\" },\n      { regex: /\\{\\{/,    push: \"handlebars\", token: \"tag\" }\n    ],\n    handlebars_raw: [\n      { regex: /\\}\\}\\}/, pop: true, token: \"tag\" },\n    ],\n    handlebars: [\n      { regex: /\\}\\}/, pop: true, token: \"tag\" },\n\n      // Double and single quotes\n      { regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/, token: \"string\" },\n      { regex: /'(?:[^\\\\']|\\\\.)*'?/, token: \"string\" },\n\n      // Handlebars keywords\n      { regex: />|[#\\/]([A-Za-z_]\\w*)/, token: \"keyword\" },\n      { regex: /(?:else|this)\\b/, token: \"keyword\" },\n\n      // Numeral\n      { regex: /\\d+/i, token: \"number\" },\n\n      // Atoms like = and .\n      { regex: /=|~|@|true|false/, token: \"atom\" },\n\n      // Paths\n      { regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/, token: \"variable-2\" }\n    ],\n    dash_comment: [\n      { regex: /--\\}\\}/, pop: true, token: \"comment\" },\n\n      // Commented code\n      { regex: /./, token: \"comment\"}\n    ],\n    comment: [\n      { regex: /\\}\\}/, pop: true, token: \"comment\" },\n      { regex: /./, token: \"comment\" }\n    ],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n\n  CodeMirror.defineMode(\"handlebars\", function(config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base),\n      {open: \"{{\", close: /\\}\\}\\}?/, mode: handlebars, parseDelimiters: true}\n    );\n  });\n\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});\n"]},"metadata":{},"sourceType":"script"}