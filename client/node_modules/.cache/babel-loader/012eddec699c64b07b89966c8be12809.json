{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"verilog\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        dontAlignCalls = parserConfig.dontAlignCalls,\n        noIndentKeywords = parserConfig.noIndentKeywords || [],\n        multiLineStrings = parserConfig.multiLineStrings,\n        hooks = parserConfig.hooks || {};\n\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n      return obj;\n    }\n    /**\n     * Keywords from IEEE 1800-2012\n     */\n\n\n    var keywords = words(\"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" + \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" + \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" + \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" + \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" + \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" + \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" + \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" + \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" + \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" + \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" + \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" + \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" + \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" + \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" + \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" + \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" + \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n    /** Operators from IEEE 1800-2012\n       unary_operator ::=\n         + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n       binary_operator ::=\n         + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n         | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n         | -> | <->\n       inc_or_dec_operator ::= ++ | --\n       unary_module_path_operator ::=\n         ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n       binary_module_path_operator ::=\n         == | != | && | || | & | | | ^ | ^~ | ~^\n    */\n\n    var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n    var isBracketChar = /[\\[\\]{}()]/;\n    var unsignedNumber = /\\d[0-9_]*/;\n    var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n    var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n    var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n    var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n    var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n    var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n    var closingBracket = /[)}\\]]/;\n    var curPunc;\n    var curKeyword; // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n    // E.g. \"task\" => \"endtask\"\n\n    var blockKeywords = words(\"case checker class clocking config function generate interface module package \" + \"primitive program property specify sequence table task\"); // Opening/closing pairs\n\n    var openClose = {};\n\n    for (var keyword in blockKeywords) {\n      openClose[keyword] = \"end\" + keyword;\n    }\n\n    openClose[\"begin\"] = \"end\";\n    openClose[\"casex\"] = \"endcase\";\n    openClose[\"casez\"] = \"endcase\";\n    openClose[\"do\"] = \"while\";\n    openClose[\"fork\"] = \"join;join_any;join_none\";\n    openClose[\"covergroup\"] = \"endgroup\";\n\n    for (var i in noIndentKeywords) {\n      var keyword = noIndentKeywords[i];\n\n      if (openClose[keyword]) {\n        openClose[keyword] = undefined;\n      }\n    } // Keywords which open statements that are ended with a semi-colon\n\n\n    var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(),\n          style;\n      if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n      if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false) return style;\n\n      if (/[,;:\\.]/.test(ch)) {\n        curPunc = stream.next();\n        return null;\n      }\n\n      if (isBracketChar.test(ch)) {\n        curPunc = stream.next();\n        return \"bracket\";\n      } // Macros (tick-defines)\n\n\n      if (ch == '`') {\n        stream.next();\n\n        if (stream.eatWhile(/[\\w\\$_]/)) {\n          return \"def\";\n        } else {\n          return null;\n        }\n      } // System calls\n\n\n      if (ch == '$') {\n        stream.next();\n\n        if (stream.eatWhile(/[\\w\\$_]/)) {\n          return \"meta\";\n        } else {\n          return null;\n        }\n      } // Time literals\n\n\n      if (ch == '#') {\n        stream.next();\n        stream.eatWhile(/[\\d_.]/);\n        return \"def\";\n      } // Strings\n\n\n      if (ch == '\"') {\n        stream.next();\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } // Comments\n\n\n      if (ch == \"/\") {\n        stream.next();\n\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        stream.backUp(1);\n      } // Numeric literals\n\n\n      if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {\n        return \"number\";\n      } // Operators\n\n\n      if (stream.eatWhile(isOperatorChar)) {\n        return \"meta\";\n      } // Keywords / plain variables\n\n\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        var cur = stream.current();\n\n        if (keywords[cur]) {\n          if (openClose[cur]) {\n            curPunc = \"newblock\";\n          }\n\n          if (statementKeywords[cur]) {\n            curPunc = \"newstatement\";\n          }\n\n          curKeyword = cur;\n          return \"keyword\";\n        }\n\n        return \"variable\";\n      }\n\n      stream.next();\n      return null;\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      var c = new Context(indent, col, type, null, state.context);\n      return state.context = c;\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n\n      if (t == \")\" || t == \"]\" || t == \"}\") {\n        state.indented = state.context.indented;\n      }\n\n      return state.context = state.context.prev;\n    }\n\n    function isClosing(text, contextClosing) {\n      if (text == contextClosing) {\n        return true;\n      } else {\n        // contextClosing may be multiple keywords separated by ;\n        var closingKeywords = contextClosing.split(\";\");\n\n        for (var i in closingKeywords) {\n          if (text == closingKeywords[i]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n\n    function buildElectricInputRegEx() {\n      // Reindentation should occur on any bracket char: {}()[]\n      // or on a match of any of the block closing keywords, at\n      // the end of a line\n      var allClosings = [];\n\n      for (var i in openClose) {\n        if (openClose[i]) {\n          var closings = openClose[i].split(\";\");\n\n          for (var j in closings) {\n            allClosings.push(closings[j]);\n          }\n        }\n      }\n\n      var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n      return re;\n    } // Interface\n\n\n    return {\n      // Regex to force current line to reindent\n      electricInput: buildElectricInputRegEx(),\n      startState: function (basecolumn) {\n        var state = {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n        if (hooks.startState) hooks.startState(state);\n        return state;\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (hooks.token) {\n          // Call hook, with an optional return value of a style to override verilog styling.\n          var style = hooks.token(stream, state);\n\n          if (style !== undefined) {\n            return style;\n          }\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        curKeyword = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if (curPunc == ctx.type) {\n          popContext(state);\n        } else if (curPunc == \";\" && ctx.type == \"statement\" || ctx.type && isClosing(curKeyword, ctx.type)) {\n          ctx = popContext(state);\n\n          while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == \"{\") {\n          pushContext(state, stream.column(), \"}\");\n        } else if (curPunc == \"[\") {\n          pushContext(state, stream.column(), \"]\");\n        } else if (curPunc == \"(\") {\n          pushContext(state, stream.column(), \")\");\n        } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n          pushContext(state, stream.column(), \"statement\");\n        } else if (curPunc == \"newstatement\") {\n          pushContext(state, stream.column(), \"statement\");\n        } else if (curPunc == \"newblock\") {\n          if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {// The 'function' keyword can appear in some other contexts where it actually does not\n            // indicate a function (import/export DPI and covergroup definitions).\n            // Do nothing in this case\n          } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {// Same thing for task\n          } else {\n            var close = openClose[curKeyword];\n            pushContext(state, stream.column(), close);\n          }\n        }\n\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n\n        if (hooks.indent) {\n          var fromHook = hooks.indent(state);\n          if (fromHook >= 0) return fromHook;\n        }\n\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = false;\n        var possibleClosing = textAfter.match(closingBracketOrWord);\n        if (possibleClosing) closing = isClosing(possibleClosing[0], ctx.type);\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  }); // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",\n    // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",\n    // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  }; // Lines starting with these characters define scope (result in indentation).\n\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/; // Matches an identifiere.\n  // Note that ':' is excluded, because of it's use in [:].\n\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/; // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit; // TODO: Pass this in instead.\n\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  } // Return true if the next thing in the stream is an identifier with a mnemonic.\n\n\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n    hooks: {\n      electricInput: false,\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function (stream, state) {\n        var style = undefined;\n        var match; // Return value of pattern matches.\n        // Set highlighting mode based on code region (TLV or SV).\n\n        if (stream.sol() && !state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)) {\n              state.tlvCodeActive = true;\n            }\n          } // Correct indentation in the face of a line prefix char.\n\n\n          if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          } // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n\n\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n\n              if (tlvScopePrefixChars[ch] && (match = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match[1]]) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit; // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n\n                  if (tlvTrackStatements) {\n                    state.statementComment = false;\n                  }\n\n                  depth++;\n                }\n              }\n            } // Clear out deeper indentation levels unless line is blank.\n\n\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          } // Set next level of indentation.\n\n\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n          var beginStatement = false;\n\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement = stream.peek() != \" \" && // not a space\n            style === undefined && // not a region identifier\n            !state.tlvInBlockComment && // not in block comment\n            //!stream.match(tlvCommentMatch, false) && // not comment start\n            stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit; // at scope level\n\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n\n              state.statementComment = stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\");\n          } else if (stream.pos / tlvIndentUnit < state.tlvIndentationStyle.length && (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n            // codemirror from combining spans\n            \"tlv-indent-\" + (stream.pos % 2 == 0 ? \"even\" : \"odd\") + // and style it\n            \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\"); // Style the line prefix character.\n\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            } // Place a class before a scope identifier.\n\n\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n\n            if ( // is identifier prefix\n            tlvIdentifierStyle.hasOwnProperty(prefix) && ( // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n            mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\");\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = match[1] == \"+\" ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)) {\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n\n        return style;\n      },\n      indent: function (state) {\n        return state.tlvCodeActive == true ? state.tlvNextIndent : -1;\n      },\n      startState: function (state) {\n        state.tlvIndentationStyle = []; // Styles to use for each level of indentation.\n\n        state.tlvCodeActive = true; // True when we're in a TLV region (and at beginning of file).\n\n        state.tlvNextIndent = -1; // The number of spaces to autoindent the next line if tlvCodeActive.\n\n        state.tlvInBlockComment = false; // True inside /**/ comment.\n\n        if (tlvTrackStatements) {\n          state.statementComment = false; // True inside a statement's header comment.\n        }\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/verilog/verilog.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","curPunc","curKeyword","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","ch","peek","style","test","next","eatWhile","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","match","cur","current","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","buildElectricInputRegEx","allClosings","closings","j","push","re","RegExp","join","electricInput","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","close","textAfter","Pass","fromHook","firstChar","charAt","closing","possibleClosing","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","name","tlvIdentifierStyle","tlvScopePrefixChars","tlvIndentUnit","tlvTrackStatements","tlvIdentMatch","tlvFirstLevelIndentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlvScopeStyle","depth","tlvIndentationStyle","tlvIdentNext","tlvInBlockComment","string","tlvCodeActive","pos","blankline","chPos","bodyString","slice","statementComment","pop","tlvNextIndent","beginStatement","eol","prefix","mnemonic","hasOwnProperty"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"verilog\", function(config, parserConfig) {\n\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n    \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n    \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n    \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n    \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n    \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n    \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n    \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n    \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n    \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n    \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n    \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n    \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n    \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n    \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n    \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n    \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n    \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n     unary_operator ::=\n       + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_operator ::=\n       + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n       | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n       | -> | <->\n     inc_or_dec_operator ::= ++ | --\n     unary_module_path_operator ::=\n       ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_module_path_operator ::=\n       == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n    \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n\n    // Regex to force current line to reindent\n    electricInput: buildElectricInputRegEx(),\n\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if ((curPunc == \";\" && ctx.type == \"statement\") ||\n               (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n});\n\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  });\n\n\n\n  // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",  // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",  // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  };\n\n  // Lines starting with these characters define scope (result in indentation).\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifiere.\n  // Note that ':' is excluded, because of it's use in [:].\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/;\n\n\n  // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit;  // TODO: Pass this in instead.\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  }\n\n  // Return true if the next thing in the stream is an identifier with a mnemonic.\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n\n    hooks: {\n\n      electricInput: false,\n\n\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function(stream, state) {\n        var style = undefined;\n        var match;  // Return value of pattern matches.\n\n        // Set highlighting mode based on code region (TLV or SV).\n        if (stream.sol() && ! state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)){\n              state.tlvCodeActive = true;\n            }\n          }\n          // Correct indentation in the face of a line prefix char.\n          if (state.tlvCodeActive && stream.pos == 0 &&\n              (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          }\n\n          // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n              if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                  tlvIdentifierStyle[match[1]])) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit;\n                // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                  if (tlvTrackStatements) {state.statementComment = false;}\n                  depth++;\n                }\n              }\n            }\n            // Clear out deeper indentation levels unless line is blank.\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          }\n          // Set next level of indentation.\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n\n          var beginStatement = false;\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement =\n                   (stream.peek() != \" \") &&   // not a space\n                   (style === undefined) &&    // not a region identifier\n                   !state.tlvInBlockComment && // not in block comment\n                   //!stream.match(tlvCommentMatch, false) && // not comment start\n                   (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n              state.statementComment =\n                   stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\")\n          } else if (((stream.pos / tlvIndentUnit) < state.tlvIndentationStyle.length) &&\n                     (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n                    // codemirror from combining spans\n                    \"tlv-indent-\" + (((stream.pos % 2) == 0) ? \"even\" : \"odd\") +\n                    // and style it\n                    \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\");\n            // Style the line prefix character.\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            }\n            // Place a class before a scope identifier.\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n            if (// is identifier prefix\n                tlvIdentifierStyle.hasOwnProperty(prefix) &&\n                // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n                (mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\")\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = (match[1] == \"+\") ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)){\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n        return style;\n      },\n\n      indent: function(state) {\n        return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n      },\n\n      startState: function(state) {\n        state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n        state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n        state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n        state.tlvInBlockComment = false;  // True inside /**/ comment.\n        if (tlvTrackStatements) {\n          state.statementComment = false;  // True inside a statement's header comment.\n        }\n      }\n\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"script"}