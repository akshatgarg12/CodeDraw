{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _require = require(\"immutable\"),\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet,\n    Record = _require.Record; // Immutable.map is typed such that the value for every key in the map\n// must be the same type\n\n\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n  style: EMPTY_SET,\n  entity: null\n};\nvar CharacterMetadataRecord = Record(defaultRecord);\n\nvar CharacterMetadata = /*#__PURE__*/function (_CharacterMetadataRec) {\n  _inheritsLoose(CharacterMetadata, _CharacterMetadataRec);\n\n  function CharacterMetadata() {\n    return _CharacterMetadataRec.apply(this, arguments) || this;\n  }\n\n  var _proto = CharacterMetadata.prototype;\n\n  _proto.getStyle = function getStyle() {\n    return this.get('style');\n  };\n\n  _proto.getEntity = function getEntity() {\n    return this.get('entity');\n  };\n\n  _proto.hasStyle = function hasStyle(style) {\n    return this.getStyle().includes(style);\n  };\n\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\n    var withStyle = record.set('style', record.getStyle().add(style));\n    return CharacterMetadata.create(withStyle);\n  };\n\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\n    return CharacterMetadata.create(withoutStyle);\n  };\n\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\n    return CharacterMetadata.create(withEntity);\n  }\n  /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */\n  ;\n\n  CharacterMetadata.create = function create(config) {\n    if (!config) {\n      return EMPTY;\n    }\n\n    var defaultConfig = {\n      style: EMPTY_SET,\n      entity: null\n    }; // Fill in unspecified properties, if necessary.\n\n    var configMap = Map(defaultConfig).merge(config);\n    var existing = pool.get(configMap);\n\n    if (existing) {\n      return existing;\n    }\n\n    var newCharacter = new CharacterMetadata(configMap);\n    pool = pool.set(configMap, newCharacter);\n    return newCharacter;\n  };\n\n  CharacterMetadata.fromJS = function fromJS(_ref) {\n    var style = _ref.style,\n        entity = _ref.entity;\n    return new CharacterMetadata({\n      style: Array.isArray(style) ? OrderedSet(style) : style,\n      entity: Array.isArray(entity) ? OrderedSet(entity) : entity\n    });\n  };\n\n  return CharacterMetadata;\n}(CharacterMetadataRecord);\n\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\nCharacterMetadata.EMPTY = EMPTY;\nmodule.exports = CharacterMetadata;","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/draft-js/lib/CharacterMetadata.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_require","require","Map","OrderedSet","Record","EMPTY_SET","defaultRecord","style","entity","CharacterMetadataRecord","CharacterMetadata","_CharacterMetadataRec","apply","arguments","_proto","getStyle","get","getEntity","hasStyle","includes","applyStyle","record","withStyle","set","add","removeStyle","withoutStyle","remove","applyEntity","entityKey","withEntity","config","EMPTY","defaultConfig","configMap","merge","existing","pool","newCharacter","fromJS","_ref","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar _require = require(\"immutable\"),\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet,\n    Record = _require.Record; // Immutable.map is typed such that the value for every key in the map\n// must be the same type\n\n\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n  style: EMPTY_SET,\n  entity: null\n};\nvar CharacterMetadataRecord = Record(defaultRecord);\n\nvar CharacterMetadata = /*#__PURE__*/function (_CharacterMetadataRec) {\n  _inheritsLoose(CharacterMetadata, _CharacterMetadataRec);\n\n  function CharacterMetadata() {\n    return _CharacterMetadataRec.apply(this, arguments) || this;\n  }\n\n  var _proto = CharacterMetadata.prototype;\n\n  _proto.getStyle = function getStyle() {\n    return this.get('style');\n  };\n\n  _proto.getEntity = function getEntity() {\n    return this.get('entity');\n  };\n\n  _proto.hasStyle = function hasStyle(style) {\n    return this.getStyle().includes(style);\n  };\n\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\n    var withStyle = record.set('style', record.getStyle().add(style));\n    return CharacterMetadata.create(withStyle);\n  };\n\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\n    return CharacterMetadata.create(withoutStyle);\n  };\n\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\n    return CharacterMetadata.create(withEntity);\n  }\n  /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */\n  ;\n\n  CharacterMetadata.create = function create(config) {\n    if (!config) {\n      return EMPTY;\n    }\n\n    var defaultConfig = {\n      style: EMPTY_SET,\n      entity: null\n    }; // Fill in unspecified properties, if necessary.\n\n    var configMap = Map(defaultConfig).merge(config);\n    var existing = pool.get(configMap);\n\n    if (existing) {\n      return existing;\n    }\n\n    var newCharacter = new CharacterMetadata(configMap);\n    pool = pool.set(configMap, newCharacter);\n    return newCharacter;\n  };\n\n  CharacterMetadata.fromJS = function fromJS(_ref) {\n    var style = _ref.style,\n        entity = _ref.entity;\n    return new CharacterMetadata({\n      style: Array.isArray(style) ? OrderedSet(style) : style,\n      entity: Array.isArray(entity) ? OrderedSet(entity) : entity\n    });\n  };\n\n  return CharacterMetadata;\n}(CharacterMetadataRecord);\n\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\nCharacterMetadata.EMPTY = EMPTY;\nmodule.exports = CharacterMetadata;"]},"metadata":{},"sourceType":"script"}