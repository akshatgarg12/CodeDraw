{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pig\", function (_config, parserConfig) {\n    var keywords = parserConfig.keywords,\n        builtins = parserConfig.builtins,\n        types = parserConfig.types,\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenComment(stream, state) {\n      var isEnd = false;\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && isEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        isEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"error\";\n      };\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next(); // is a start of string?\n\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch)); // is it one of the special chars\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null; // is it a number?\n        else if (/\\d/.test(ch)) {\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n          } // multi line comment or operator\n          else if (ch == \"/\") {\n              if (stream.eat(\"*\")) {\n                return chain(stream, state, tokenComment);\n              } else {\n                stream.eatWhile(isOperatorChar);\n                return \"operator\";\n              }\n            } // single line comment or operator\n            else if (ch == \"-\") {\n                if (stream.eat(\"-\")) {\n                  stream.skipToEnd();\n                  return \"comment\";\n                } else {\n                  stream.eatWhile(isOperatorChar);\n                  return \"operator\";\n                }\n              } // is it an operator\n              else if (isOperatorChar.test(ch)) {\n                  stream.eatWhile(isOperatorChar);\n                  return \"operator\";\n                } else {\n                  // get the while word\n                  stream.eatWhile(/[\\w\\$_]/); // is it one of the listed keywords?\n\n                  if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n                    //keywords can be used as variables like flatten(group), group.$0 etc..\n                    if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n                  } // is it one of the builtin functions?\n\n\n                  if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-2\"; // is it one of the listed types?\n\n                  if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-3\"; // default is a 'variable'\n\n                  return \"variable\";\n                }\n    } // Interface\n\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n\n  (function () {\n    function keywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n      return obj;\n    } // builtin funcs taken from trunk revision 1303237\n\n\n    var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \"; // taken from QueryLexer.g\n\n    var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\"; // data types\n\n    var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n    CodeMirror.defineMIME(\"text/x-pig\", {\n      name: \"pig\",\n      builtins: keywords(pBuiltins),\n      keywords: keywords(pKeywords),\n      types: keywords(pTypes)\n    });\n    CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n  })();\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/pig/pig.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","isEnd","ch","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","style","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"]},"metadata":{},"sourceType":"script"}