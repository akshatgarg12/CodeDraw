{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [// Key to key mapping. This goes first to make it possible to override\n  // existing mappings.\n  {\n    keys: '<Left>',\n    type: 'keyToKey',\n    toKeys: 'h'\n  }, {\n    keys: '<Right>',\n    type: 'keyToKey',\n    toKeys: 'l'\n  }, {\n    keys: '<Up>',\n    type: 'keyToKey',\n    toKeys: 'k'\n  }, {\n    keys: '<Down>',\n    type: 'keyToKey',\n    toKeys: 'j'\n  }, {\n    keys: '<Space>',\n    type: 'keyToKey',\n    toKeys: 'l'\n  }, {\n    keys: '<BS>',\n    type: 'keyToKey',\n    toKeys: 'h',\n    context: 'normal'\n  }, {\n    keys: '<Del>',\n    type: 'keyToKey',\n    toKeys: 'x',\n    context: 'normal'\n  }, {\n    keys: '<C-Space>',\n    type: 'keyToKey',\n    toKeys: 'W'\n  }, {\n    keys: '<C-BS>',\n    type: 'keyToKey',\n    toKeys: 'B',\n    context: 'normal'\n  }, {\n    keys: '<S-Space>',\n    type: 'keyToKey',\n    toKeys: 'w'\n  }, {\n    keys: '<S-BS>',\n    type: 'keyToKey',\n    toKeys: 'b',\n    context: 'normal'\n  }, {\n    keys: '<C-n>',\n    type: 'keyToKey',\n    toKeys: 'j'\n  }, {\n    keys: '<C-p>',\n    type: 'keyToKey',\n    toKeys: 'k'\n  }, {\n    keys: '<C-[>',\n    type: 'keyToKey',\n    toKeys: '<Esc>'\n  }, {\n    keys: '<C-c>',\n    type: 'keyToKey',\n    toKeys: '<Esc>'\n  }, {\n    keys: '<C-[>',\n    type: 'keyToKey',\n    toKeys: '<Esc>',\n    context: 'insert'\n  }, {\n    keys: '<C-c>',\n    type: 'keyToKey',\n    toKeys: '<Esc>',\n    context: 'insert'\n  }, {\n    keys: 's',\n    type: 'keyToKey',\n    toKeys: 'cl',\n    context: 'normal'\n  }, {\n    keys: 's',\n    type: 'keyToKey',\n    toKeys: 'c',\n    context: 'visual'\n  }, {\n    keys: 'S',\n    type: 'keyToKey',\n    toKeys: 'cc',\n    context: 'normal'\n  }, {\n    keys: 'S',\n    type: 'keyToKey',\n    toKeys: 'VdO',\n    context: 'visual'\n  }, {\n    keys: '<Home>',\n    type: 'keyToKey',\n    toKeys: '0'\n  }, {\n    keys: '<End>',\n    type: 'keyToKey',\n    toKeys: '$'\n  }, {\n    keys: '<PageUp>',\n    type: 'keyToKey',\n    toKeys: '<C-b>'\n  }, {\n    keys: '<PageDown>',\n    type: 'keyToKey',\n    toKeys: '<C-f>'\n  }, {\n    keys: '<CR>',\n    type: 'keyToKey',\n    toKeys: 'j^',\n    context: 'normal'\n  }, {\n    keys: '<Ins>',\n    type: 'action',\n    action: 'toggleOverwrite',\n    context: 'insert'\n  }, // Motions\n  {\n    keys: 'H',\n    type: 'motion',\n    motion: 'moveToTopLine',\n    motionArgs: {\n      linewise: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'M',\n    type: 'motion',\n    motion: 'moveToMiddleLine',\n    motionArgs: {\n      linewise: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'L',\n    type: 'motion',\n    motion: 'moveToBottomLine',\n    motionArgs: {\n      linewise: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'h',\n    type: 'motion',\n    motion: 'moveByCharacters',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: 'l',\n    type: 'motion',\n    motion: 'moveByCharacters',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: 'j',\n    type: 'motion',\n    motion: 'moveByLines',\n    motionArgs: {\n      forward: true,\n      linewise: true\n    }\n  }, {\n    keys: 'k',\n    type: 'motion',\n    motion: 'moveByLines',\n    motionArgs: {\n      forward: false,\n      linewise: true\n    }\n  }, {\n    keys: 'gj',\n    type: 'motion',\n    motion: 'moveByDisplayLines',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: 'gk',\n    type: 'motion',\n    motion: 'moveByDisplayLines',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: 'w',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: true,\n      wordEnd: false\n    }\n  }, {\n    keys: 'W',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: true,\n      wordEnd: false,\n      bigWord: true\n    }\n  }, {\n    keys: 'e',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: true,\n      wordEnd: true,\n      inclusive: true\n    }\n  }, {\n    keys: 'E',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: true,\n      wordEnd: true,\n      bigWord: true,\n      inclusive: true\n    }\n  }, {\n    keys: 'b',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: false,\n      wordEnd: false\n    }\n  }, {\n    keys: 'B',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: false,\n      wordEnd: false,\n      bigWord: true\n    }\n  }, {\n    keys: 'ge',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: false,\n      wordEnd: true,\n      inclusive: true\n    }\n  }, {\n    keys: 'gE',\n    type: 'motion',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: false,\n      wordEnd: true,\n      bigWord: true,\n      inclusive: true\n    }\n  }, {\n    keys: '{',\n    type: 'motion',\n    motion: 'moveByParagraph',\n    motionArgs: {\n      forward: false,\n      toJumplist: true\n    }\n  }, {\n    keys: '}',\n    type: 'motion',\n    motion: 'moveByParagraph',\n    motionArgs: {\n      forward: true,\n      toJumplist: true\n    }\n  }, {\n    keys: '(',\n    type: 'motion',\n    motion: 'moveBySentence',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: ')',\n    type: 'motion',\n    motion: 'moveBySentence',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: '<C-f>',\n    type: 'motion',\n    motion: 'moveByPage',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: '<C-b>',\n    type: 'motion',\n    motion: 'moveByPage',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: '<C-d>',\n    type: 'motion',\n    motion: 'moveByScroll',\n    motionArgs: {\n      forward: true,\n      explicitRepeat: true\n    }\n  }, {\n    keys: '<C-u>',\n    type: 'motion',\n    motion: 'moveByScroll',\n    motionArgs: {\n      forward: false,\n      explicitRepeat: true\n    }\n  }, {\n    keys: 'gg',\n    type: 'motion',\n    motion: 'moveToLineOrEdgeOfDocument',\n    motionArgs: {\n      forward: false,\n      explicitRepeat: true,\n      linewise: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'G',\n    type: 'motion',\n    motion: 'moveToLineOrEdgeOfDocument',\n    motionArgs: {\n      forward: true,\n      explicitRepeat: true,\n      linewise: true,\n      toJumplist: true\n    }\n  }, {\n    keys: '0',\n    type: 'motion',\n    motion: 'moveToStartOfLine'\n  }, {\n    keys: '^',\n    type: 'motion',\n    motion: 'moveToFirstNonWhiteSpaceCharacter'\n  }, {\n    keys: '+',\n    type: 'motion',\n    motion: 'moveByLines',\n    motionArgs: {\n      forward: true,\n      toFirstChar: true\n    }\n  }, {\n    keys: '-',\n    type: 'motion',\n    motion: 'moveByLines',\n    motionArgs: {\n      forward: false,\n      toFirstChar: true\n    }\n  }, {\n    keys: '_',\n    type: 'motion',\n    motion: 'moveByLines',\n    motionArgs: {\n      forward: true,\n      toFirstChar: true,\n      repeatOffset: -1\n    }\n  }, {\n    keys: '$',\n    type: 'motion',\n    motion: 'moveToEol',\n    motionArgs: {\n      inclusive: true\n    }\n  }, {\n    keys: '%',\n    type: 'motion',\n    motion: 'moveToMatchedSymbol',\n    motionArgs: {\n      inclusive: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'f<character>',\n    type: 'motion',\n    motion: 'moveToCharacter',\n    motionArgs: {\n      forward: true,\n      inclusive: true\n    }\n  }, {\n    keys: 'F<character>',\n    type: 'motion',\n    motion: 'moveToCharacter',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: 't<character>',\n    type: 'motion',\n    motion: 'moveTillCharacter',\n    motionArgs: {\n      forward: true,\n      inclusive: true\n    }\n  }, {\n    keys: 'T<character>',\n    type: 'motion',\n    motion: 'moveTillCharacter',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: ';',\n    type: 'motion',\n    motion: 'repeatLastCharacterSearch',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: ',',\n    type: 'motion',\n    motion: 'repeatLastCharacterSearch',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: '\\'<character>',\n    type: 'motion',\n    motion: 'goToMark',\n    motionArgs: {\n      toJumplist: true,\n      linewise: true\n    }\n  }, {\n    keys: '`<character>',\n    type: 'motion',\n    motion: 'goToMark',\n    motionArgs: {\n      toJumplist: true\n    }\n  }, {\n    keys: ']`',\n    type: 'motion',\n    motion: 'jumpToMark',\n    motionArgs: {\n      forward: true\n    }\n  }, {\n    keys: '[`',\n    type: 'motion',\n    motion: 'jumpToMark',\n    motionArgs: {\n      forward: false\n    }\n  }, {\n    keys: ']\\'',\n    type: 'motion',\n    motion: 'jumpToMark',\n    motionArgs: {\n      forward: true,\n      linewise: true\n    }\n  }, {\n    keys: '[\\'',\n    type: 'motion',\n    motion: 'jumpToMark',\n    motionArgs: {\n      forward: false,\n      linewise: true\n    }\n  }, // the next two aren't motions but must come before more general motion declarations\n  {\n    keys: ']p',\n    type: 'action',\n    action: 'paste',\n    isEdit: true,\n    actionArgs: {\n      after: true,\n      isEdit: true,\n      matchIndent: true\n    }\n  }, {\n    keys: '[p',\n    type: 'action',\n    action: 'paste',\n    isEdit: true,\n    actionArgs: {\n      after: false,\n      isEdit: true,\n      matchIndent: true\n    }\n  }, {\n    keys: ']<character>',\n    type: 'motion',\n    motion: 'moveToSymbol',\n    motionArgs: {\n      forward: true,\n      toJumplist: true\n    }\n  }, {\n    keys: '[<character>',\n    type: 'motion',\n    motion: 'moveToSymbol',\n    motionArgs: {\n      forward: false,\n      toJumplist: true\n    }\n  }, {\n    keys: '|',\n    type: 'motion',\n    motion: 'moveToColumn'\n  }, {\n    keys: 'o',\n    type: 'motion',\n    motion: 'moveToOtherHighlightedEnd',\n    context: 'visual'\n  }, {\n    keys: 'O',\n    type: 'motion',\n    motion: 'moveToOtherHighlightedEnd',\n    motionArgs: {\n      sameLine: true\n    },\n    context: 'visual'\n  }, // Operators\n  {\n    keys: 'd',\n    type: 'operator',\n    operator: 'delete'\n  }, {\n    keys: 'y',\n    type: 'operator',\n    operator: 'yank'\n  }, {\n    keys: 'c',\n    type: 'operator',\n    operator: 'change'\n  }, {\n    keys: '=',\n    type: 'operator',\n    operator: 'indentAuto'\n  }, {\n    keys: '>',\n    type: 'operator',\n    operator: 'indent',\n    operatorArgs: {\n      indentRight: true\n    }\n  }, {\n    keys: '<',\n    type: 'operator',\n    operator: 'indent',\n    operatorArgs: {\n      indentRight: false\n    }\n  }, {\n    keys: 'g~',\n    type: 'operator',\n    operator: 'changeCase'\n  }, {\n    keys: 'gu',\n    type: 'operator',\n    operator: 'changeCase',\n    operatorArgs: {\n      toLower: true\n    },\n    isEdit: true\n  }, {\n    keys: 'gU',\n    type: 'operator',\n    operator: 'changeCase',\n    operatorArgs: {\n      toLower: false\n    },\n    isEdit: true\n  }, {\n    keys: 'n',\n    type: 'motion',\n    motion: 'findNext',\n    motionArgs: {\n      forward: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'N',\n    type: 'motion',\n    motion: 'findNext',\n    motionArgs: {\n      forward: false,\n      toJumplist: true\n    }\n  }, // Operator-Motion dual commands\n  {\n    keys: 'x',\n    type: 'operatorMotion',\n    operator: 'delete',\n    motion: 'moveByCharacters',\n    motionArgs: {\n      forward: true\n    },\n    operatorMotionArgs: {\n      visualLine: false\n    }\n  }, {\n    keys: 'X',\n    type: 'operatorMotion',\n    operator: 'delete',\n    motion: 'moveByCharacters',\n    motionArgs: {\n      forward: false\n    },\n    operatorMotionArgs: {\n      visualLine: true\n    }\n  }, {\n    keys: 'D',\n    type: 'operatorMotion',\n    operator: 'delete',\n    motion: 'moveToEol',\n    motionArgs: {\n      inclusive: true\n    },\n    context: 'normal'\n  }, {\n    keys: 'D',\n    type: 'operator',\n    operator: 'delete',\n    operatorArgs: {\n      linewise: true\n    },\n    context: 'visual'\n  }, {\n    keys: 'Y',\n    type: 'operatorMotion',\n    operator: 'yank',\n    motion: 'expandToLine',\n    motionArgs: {\n      linewise: true\n    },\n    context: 'normal'\n  }, {\n    keys: 'Y',\n    type: 'operator',\n    operator: 'yank',\n    operatorArgs: {\n      linewise: true\n    },\n    context: 'visual'\n  }, {\n    keys: 'C',\n    type: 'operatorMotion',\n    operator: 'change',\n    motion: 'moveToEol',\n    motionArgs: {\n      inclusive: true\n    },\n    context: 'normal'\n  }, {\n    keys: 'C',\n    type: 'operator',\n    operator: 'change',\n    operatorArgs: {\n      linewise: true\n    },\n    context: 'visual'\n  }, {\n    keys: '~',\n    type: 'operatorMotion',\n    operator: 'changeCase',\n    motion: 'moveByCharacters',\n    motionArgs: {\n      forward: true\n    },\n    operatorArgs: {\n      shouldMoveCursor: true\n    },\n    context: 'normal'\n  }, {\n    keys: '~',\n    type: 'operator',\n    operator: 'changeCase',\n    context: 'visual'\n  }, {\n    keys: '<C-w>',\n    type: 'operatorMotion',\n    operator: 'delete',\n    motion: 'moveByWords',\n    motionArgs: {\n      forward: false,\n      wordEnd: false\n    },\n    context: 'insert'\n  }, //ignore C-w in normal mode\n  {\n    keys: '<C-w>',\n    type: 'idle',\n    context: 'normal'\n  }, // Actions\n  {\n    keys: '<C-i>',\n    type: 'action',\n    action: 'jumpListWalk',\n    actionArgs: {\n      forward: true\n    }\n  }, {\n    keys: '<C-o>',\n    type: 'action',\n    action: 'jumpListWalk',\n    actionArgs: {\n      forward: false\n    }\n  }, {\n    keys: '<C-e>',\n    type: 'action',\n    action: 'scroll',\n    actionArgs: {\n      forward: true,\n      linewise: true\n    }\n  }, {\n    keys: '<C-y>',\n    type: 'action',\n    action: 'scroll',\n    actionArgs: {\n      forward: false,\n      linewise: true\n    }\n  }, {\n    keys: 'a',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'charAfter'\n    },\n    context: 'normal'\n  }, {\n    keys: 'A',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'eol'\n    },\n    context: 'normal'\n  }, {\n    keys: 'A',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'endOfSelectedArea'\n    },\n    context: 'visual'\n  }, {\n    keys: 'i',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'inplace'\n    },\n    context: 'normal'\n  }, {\n    keys: 'gi',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'lastEdit'\n    },\n    context: 'normal'\n  }, {\n    keys: 'I',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'firstNonBlank'\n    },\n    context: 'normal'\n  }, {\n    keys: 'gI',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'bol'\n    },\n    context: 'normal'\n  }, {\n    keys: 'I',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      insertAt: 'startOfSelectedArea'\n    },\n    context: 'visual'\n  }, {\n    keys: 'o',\n    type: 'action',\n    action: 'newLineAndEnterInsertMode',\n    isEdit: true,\n    interlaceInsertRepeat: true,\n    actionArgs: {\n      after: true\n    },\n    context: 'normal'\n  }, {\n    keys: 'O',\n    type: 'action',\n    action: 'newLineAndEnterInsertMode',\n    isEdit: true,\n    interlaceInsertRepeat: true,\n    actionArgs: {\n      after: false\n    },\n    context: 'normal'\n  }, {\n    keys: 'v',\n    type: 'action',\n    action: 'toggleVisualMode'\n  }, {\n    keys: 'V',\n    type: 'action',\n    action: 'toggleVisualMode',\n    actionArgs: {\n      linewise: true\n    }\n  }, {\n    keys: '<C-v>',\n    type: 'action',\n    action: 'toggleVisualMode',\n    actionArgs: {\n      blockwise: true\n    }\n  }, {\n    keys: '<C-q>',\n    type: 'action',\n    action: 'toggleVisualMode',\n    actionArgs: {\n      blockwise: true\n    }\n  }, {\n    keys: 'gv',\n    type: 'action',\n    action: 'reselectLastSelection'\n  }, {\n    keys: 'J',\n    type: 'action',\n    action: 'joinLines',\n    isEdit: true\n  }, {\n    keys: 'gJ',\n    type: 'action',\n    action: 'joinLines',\n    actionArgs: {\n      keepSpaces: true\n    },\n    isEdit: true\n  }, {\n    keys: 'p',\n    type: 'action',\n    action: 'paste',\n    isEdit: true,\n    actionArgs: {\n      after: true,\n      isEdit: true\n    }\n  }, {\n    keys: 'P',\n    type: 'action',\n    action: 'paste',\n    isEdit: true,\n    actionArgs: {\n      after: false,\n      isEdit: true\n    }\n  }, {\n    keys: 'r<character>',\n    type: 'action',\n    action: 'replace',\n    isEdit: true\n  }, {\n    keys: '@<character>',\n    type: 'action',\n    action: 'replayMacro'\n  }, {\n    keys: 'q<character>',\n    type: 'action',\n    action: 'enterMacroRecordMode'\n  }, // Handle Replace-mode as a special case of insert mode.\n  {\n    keys: 'R',\n    type: 'action',\n    action: 'enterInsertMode',\n    isEdit: true,\n    actionArgs: {\n      replace: true\n    },\n    context: 'normal'\n  }, {\n    keys: 'R',\n    type: 'operator',\n    operator: 'change',\n    operatorArgs: {\n      linewise: true,\n      fullLine: true\n    },\n    context: 'visual',\n    exitVisualBlock: true\n  }, {\n    keys: 'u',\n    type: 'action',\n    action: 'undo',\n    context: 'normal'\n  }, {\n    keys: 'u',\n    type: 'operator',\n    operator: 'changeCase',\n    operatorArgs: {\n      toLower: true\n    },\n    context: 'visual',\n    isEdit: true\n  }, {\n    keys: 'U',\n    type: 'operator',\n    operator: 'changeCase',\n    operatorArgs: {\n      toLower: false\n    },\n    context: 'visual',\n    isEdit: true\n  }, {\n    keys: '<C-r>',\n    type: 'action',\n    action: 'redo'\n  }, {\n    keys: 'm<character>',\n    type: 'action',\n    action: 'setMark'\n  }, {\n    keys: '\"<character>',\n    type: 'action',\n    action: 'setRegister'\n  }, {\n    keys: 'zz',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'center'\n    }\n  }, {\n    keys: 'z.',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'center'\n    },\n    motion: 'moveToFirstNonWhiteSpaceCharacter'\n  }, {\n    keys: 'zt',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'top'\n    }\n  }, {\n    keys: 'z<CR>',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'top'\n    },\n    motion: 'moveToFirstNonWhiteSpaceCharacter'\n  }, {\n    keys: 'z-',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'bottom'\n    }\n  }, {\n    keys: 'zb',\n    type: 'action',\n    action: 'scrollToCursor',\n    actionArgs: {\n      position: 'bottom'\n    },\n    motion: 'moveToFirstNonWhiteSpaceCharacter'\n  }, {\n    keys: '.',\n    type: 'action',\n    action: 'repeatLastEdit'\n  }, {\n    keys: '<C-a>',\n    type: 'action',\n    action: 'incrementNumberToken',\n    isEdit: true,\n    actionArgs: {\n      increase: true,\n      backtrack: false\n    }\n  }, {\n    keys: '<C-x>',\n    type: 'action',\n    action: 'incrementNumberToken',\n    isEdit: true,\n    actionArgs: {\n      increase: false,\n      backtrack: false\n    }\n  }, {\n    keys: '<C-t>',\n    type: 'action',\n    action: 'indent',\n    actionArgs: {\n      indentRight: true\n    },\n    context: 'insert'\n  }, {\n    keys: '<C-d>',\n    type: 'action',\n    action: 'indent',\n    actionArgs: {\n      indentRight: false\n    },\n    context: 'insert'\n  }, // Text object motions\n  {\n    keys: 'a<character>',\n    type: 'motion',\n    motion: 'textObjectManipulation'\n  }, {\n    keys: 'i<character>',\n    type: 'motion',\n    motion: 'textObjectManipulation',\n    motionArgs: {\n      textObjectInner: true\n    }\n  }, // Search\n  {\n    keys: '/',\n    type: 'search',\n    searchArgs: {\n      forward: true,\n      querySrc: 'prompt',\n      toJumplist: true\n    }\n  }, {\n    keys: '?',\n    type: 'search',\n    searchArgs: {\n      forward: false,\n      querySrc: 'prompt',\n      toJumplist: true\n    }\n  }, {\n    keys: '*',\n    type: 'search',\n    searchArgs: {\n      forward: true,\n      querySrc: 'wordUnderCursor',\n      wholeWordOnly: true,\n      toJumplist: true\n    }\n  }, {\n    keys: '#',\n    type: 'search',\n    searchArgs: {\n      forward: false,\n      querySrc: 'wordUnderCursor',\n      wholeWordOnly: true,\n      toJumplist: true\n    }\n  }, {\n    keys: 'g*',\n    type: 'search',\n    searchArgs: {\n      forward: true,\n      querySrc: 'wordUnderCursor',\n      toJumplist: true\n    }\n  }, {\n    keys: 'g#',\n    type: 'search',\n    searchArgs: {\n      forward: false,\n      querySrc: 'wordUnderCursor',\n      toJumplist: true\n    }\n  }, // Ex command\n  {\n    keys: ':',\n    type: 'ex'\n  }];\n  var defaultKeymapLength = defaultKeymap.length;\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n\n  var defaultExCommandMap = [{\n    name: 'colorscheme',\n    shortName: 'colo'\n  }, {\n    name: 'map'\n  }, {\n    name: 'imap',\n    shortName: 'im'\n  }, {\n    name: 'nmap',\n    shortName: 'nm'\n  }, {\n    name: 'vmap',\n    shortName: 'vm'\n  }, {\n    name: 'unmap'\n  }, {\n    name: 'write',\n    shortName: 'w'\n  }, {\n    name: 'undo',\n    shortName: 'u'\n  }, {\n    name: 'redo',\n    shortName: 'red'\n  }, {\n    name: 'set',\n    shortName: 'se'\n  }, {\n    name: 'setlocal',\n    shortName: 'setl'\n  }, {\n    name: 'setglobal',\n    shortName: 'setg'\n  }, {\n    name: 'sort',\n    shortName: 'sor'\n  }, {\n    name: 'substitute',\n    shortName: 's',\n    possiblyAsync: true\n  }, {\n    name: 'nohlsearch',\n    shortName: 'noh'\n  }, {\n    name: 'yank',\n    shortName: 'y'\n  }, {\n    name: 'delmarks',\n    shortName: 'delm'\n  }, {\n    name: 'registers',\n    shortName: 'reg',\n    excludeFromCommandHistory: true\n  }, {\n    name: 'global',\n    shortName: 'g'\n  }];\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function () {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {\n        mode: \"normal\"\n      });\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          disableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"\";\n        }\n      }\n\n      if (!next || next.attach != attachVimMap) leaveVimMode(cm);\n    }\n\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          enableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"transparent\";\n        }\n      }\n\n      if (!prev || prev.attach != attachVimMap) enterVimMode(cm);\n    }\n\n    function updateFatCursorMark(cm) {\n      if (!cm.state.fatCursorMarks) return;\n      clearFatCursorMark(cm);\n      var ranges = cm.listSelections(),\n          result = [];\n\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n\n        if (range.empty()) {\n          var lineLength = cm.getLine(range.anchor.line).length;\n\n          if (range.anchor.ch < lineLength) {\n            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1), {\n              className: \"cm-fat-cursor-mark\"\n            }));\n          } else {\n            result.push(cm.markText(Pos(range.anchor.line, lineLength - 1), Pos(range.anchor.line, lineLength), {\n              className: \"cm-fat-cursor-mark\"\n            }));\n          }\n        }\n      }\n\n      cm.state.fatCursorMarks = result;\n    }\n\n    function clearFatCursorMark(cm) {\n      var marks = cm.state.fatCursorMarks;\n      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n\n    function enableFatCursorMark(cm) {\n      cm.state.fatCursorMarks = [];\n      updateFatCursorMark(cm);\n      cm.on(\"cursorActivity\", updateFatCursorMark);\n    }\n\n    function disableFatCursorMark(cm) {\n      clearFatCursorMark(cm);\n      cm.off(\"cursorActivity\", updateFatCursorMark); // explicitly set fatCursorMarks to null because event listener above\n      // can be invoke after removing it, if off is called from operation\n\n      cm.state.fatCursorMarks = null;\n    } // Deprecated, simply setting the keymap works again.\n\n\n    CodeMirror.defineOption('vimMode', false, function (cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\") cm.setOption(\"keyMap\", \"vim\");else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\"))) cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) {\n        return undefined;\n      }\n\n      if (this[key]) {\n        return this[key];\n      }\n\n      var vimKey = cmKeyToVimKey(key);\n\n      if (!vimKey) {\n        return false;\n      }\n\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n\n      return cmd;\n    }\n\n    var modifiers = {\n      'Shift': 'S',\n      'Ctrl': 'C',\n      'Alt': 'A',\n      'Cmd': 'D',\n      'Mod': 'A'\n    };\n    var specialKeys = {\n      Enter: 'CR',\n      Backspace: 'BS',\n      Delete: 'Del',\n      Insert: 'Ins'\n    };\n\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n\n      var hasCharacter = false;\n\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n\n        if (piece in modifiers) {\n          pieces[i] = modifiers[piece];\n        } else {\n          hasCharacter = true;\n        }\n\n        if (piece in specialKeys) {\n          pieces[i] = specialKeys[piece];\n        }\n      }\n\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      } // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n\n\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function () {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function (ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }],\n        bigWordCharTest = [function (ch) {\n      return /\\S/.test(ch);\n    }];\n\n    function makeKeyRange(start, size) {\n      var keys = [];\n\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n\n      return keys;\n    }\n\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n\n    function isLowerCase(k) {\n      return /^[a-z]$/.test(k);\n    }\n\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n\n    function isUpperCase(k) {\n      return /^[A-Z]$/.test(k);\n    }\n\n    function isWhiteSpaceString(k) {\n      return /^\\s*$/.test(k);\n    }\n\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    var options = {};\n\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n\n      if (!type) {\n        type = 'string';\n      }\n\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {\n            value: value\n          };\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n\n        if (scope !== 'local') {\n          return option.callback();\n        }\n\n        return;\n      } else {\n        var local = scope !== 'global' && cm && cm.state.vim.options[name];\n        return (local || scope !== 'local' && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function (name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      } // The 'filetype' option proxies to the CodeMirror 'mode' option.\n\n\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function () {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n\n          if (trashMark) {\n            trashMark.clear();\n          }\n\n          buffer[next] = cm.setBookmark(cursor);\n        }\n\n        if (curMark) {\n          var markPos = curMark.find(); // avoid recording redundant cursor position\n\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n\n      function move(cm, offset) {\n        pointer += offset;\n\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n\n        var mark = buffer[(size + pointer) % size]; // skip marks that are temporarily removed from text buffer\n\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size]; // skip marks that are the same as current position\n\n            if (mark && (newCur = mark.find()) && !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n\n        return mark;\n      }\n\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n\n      return {\n        cachedCursor: undefined,\n        //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    }; // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n\n\n    var createInsertModeChanges = function (c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function () {\n        var macroModeState = vimGlobalState.macroModeState;\n\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function (cm, registerName) {\n        var register = vimGlobalState.registerController.getRegister(registerName);\n\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog('(recording)[' + registerName + ']', null, {\n              bottom: true\n            });\n          }\n\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n\n      return cm.state.vim;\n    }\n\n    var vimGlobalState;\n\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState(),\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {\n          increment: 0,\n          forward: true,\n          selectedCharacter: ''\n        },\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController: new HistoryController()\n      };\n\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi = {\n      buildKeyMap: function () {// TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function () {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n      // Testing hook.\n      getVimGlobalState_: function () {\n        return vimGlobalState;\n      },\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n      suppressErrorLogging: false,\n      InsertModeKey: InsertModeKey,\n      map: function (lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function (lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function (lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n\n        var ctxsToMap = toCtxArray(ctx); // Look through all actual defaults to find a map candidate.\n\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n\n        for (var i = actualLength - origLength; i < actualLength && ctxsToMap.length; i++) {\n          var mapping = defaultKeymap[i]; // Omit mappings that operate in the wrong context(s) and those of invalid type.\n\n          if (mapping.keys == rhs && (!ctx || !mapping.context || mapping.context === ctx) && mapping.type.substr(0, 2) !== 'ex' && mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            } // Modify it point to the new mapping with the proper context.\n\n\n            newMapping.keys = lhs;\n\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            } // Add it to the keymap with a higher priority than the original.\n\n\n            this._mapCommand(newMapping); // Record the mapped contexts as complete.\n\n\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function (el) {\n              return mappedCtxs.indexOf(el) === -1;\n            });\n          }\n        } // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function (ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n\n                    newMapping.context = contexts[j];\n\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function (name, prefix, func) {\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"' + prefix + '\" is not a prefix of \"' + name + '\", command not registered');\n        }\n\n        exCommands[name] = func;\n        exCommandDispatcher.commandMap_[prefix] = {\n          name: name,\n          shortName: prefix,\n          type: 'api'\n        };\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function (cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n\n            return true;\n          }\n        }\n\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = /<\\w+-.+?>|<\\w+>|./.exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) {\n            return true;\n          }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert'); // Need to check all key substrings in insert mode.\n\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n\n            if (thisMatch.type != 'none') {\n              match = thisMatch;\n            }\n          }\n\n          if (match.type == 'none') {\n            clearInputState(cm);\n            return false;\n          } else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) {\n              window.clearTimeout(lastInsertModeKeyTimer);\n            }\n\n            lastInsertModeKeyTimer = window.setTimeout(function () {\n              if (vim.insertMode && vim.inputState.keyBuffer) {\n                clearInputState(cm);\n              }\n            }, getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) {\n            window.clearTimeout(lastInsertModeKeyTimer);\n          }\n\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) {\n            return true;\n          }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n\n          if (/^[1-9]\\d*$/.test(keys)) {\n            return true;\n          }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n\n          if (!keysMatcher) {\n            clearInputState(cm);\n            return false;\n          }\n\n          var context = vim.visualMode ? 'visual' : 'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n\n          if (match.type == 'none') {\n            clearInputState(cm);\n            return false;\n          } else if (match.type == 'partial') {\n            return true;\n          }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n\n          return match.command;\n        }\n\n        var command;\n\n        if (vim.insertMode) {\n          command = handleKeyInsertMode();\n        } else {\n          command = handleKeyNonInsertMode();\n        }\n\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function () {\n            return true;\n          } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function () {\n            return true;\n          };\n        } else {\n          return function () {\n            return cm.operation(function () {\n              cm.curOp.isVimOp = true;\n\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n\n                throw e;\n              }\n\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function (cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n      defineRegister: defineRegister,\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    }; // Represents the current input state.\n\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n\n    InputState.prototype.pushRepeatDigit = function (n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n\n    InputState.prototype.getRepeat = function () {\n      var repeat = 0;\n\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n\n\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n\n    Register.prototype = {\n      setText: function (text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function (text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n\n          this.linewise = true;\n        }\n\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function (changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function (query) {\n        this.searchQueries.push(query);\n      },\n      clear: function () {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function () {\n        return this.keyBuffer.join('');\n      }\n    };\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n\n\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n\n    RegisterController.prototype = {\n      pushText: function (registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n') {\n          text += '\\n';\n        } // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n\n\n        var register = this.isValidRegister(registerName) ? this.getRegister(registerName) : null; // if no register/an invalid register was specified, things go to the\n        // default registers\n\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n\n              break;\n          } // Make sure the unnamed register is set to what just happened\n\n\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        } // If we've gotten to this point, we've actually specified a register\n\n\n        var append = isUpperCase(registerName);\n\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        } // The unnamed register always has the same value as the last used\n        // register.\n\n\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function (name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n\n        name = name.toLowerCase();\n\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n\n        return this.registers[name];\n      },\n      isValidRegister: function (name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function () {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n\n    function HistoryController() {\n      this.historyBuffer = [];\n      this.iterator = 0;\n      this.initialPrefix = null;\n    }\n\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i += dir) {\n          var element = historyBuffer[i];\n\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        } // should return the user input in case we reach the end of buffer.\n\n\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        } // return the last autocompleted query or exCommand as it is.\n\n\n        if (i < 0) return input;\n      },\n      pushInput: function (input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function () {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function (keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n\n        if (!matches.full && !matches.partial) {\n          return {\n            type: 'none'\n          };\n        } else if (!matches.full && matches.partial) {\n          return {\n            type: 'partial'\n          };\n        }\n\n        var bestMatch;\n\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {\n            type: 'none'\n          };\n          inputState.selectedCharacter = character;\n        }\n\n        return {\n          type: 'full',\n          command: bestMatch\n        };\n      },\n      processCommand: function (cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n\n          default:\n            break;\n        }\n      },\n      processMotion: function (cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function (cm, vim, command) {\n        var inputState = vim.inputState;\n\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = {\n              linewise: true\n            };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n\n        if (command.exitVisualBlock) {\n          vim.visualBlock = false;\n          updateCmSelection(cm);\n        }\n\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function (cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n\n        this.processOperator(cm, vim, command);\n\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function (cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        } // Actions may or may not have motions and operators. Do these first.\n\n\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function (cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = forward ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: {\n              forward: true,\n              toJumplist: command.searchArgs.toJumplist\n            }\n          });\n        }\n\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true\n          /** ignoreCase */\n          , true\n          /** smartCase */\n          );\n          var macroModeState = vimGlobalState.macroModeState;\n\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e),\n              up,\n              offset;\n\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if (keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift') vimGlobalState.searchHistoryController.reset();\n          }\n\n          var parsedQuery;\n\n          try {\n            parsedQuery = updateSearchQuery(cm, query, true\n            /** ignoreCase */\n            , true\n            /** smartCase */\n            );\n          } catch (e) {// Swallow bad regexes for incremental search.\n          }\n\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' || keyName == 'Backspace' && query == '') {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true\n              /** ignoreCase */\n              , false\n              /** smartCase */\n              );\n            } else {\n              showPrompt(cm, {\n                onClose: onPromptClose,\n                prefix: promptPrefix,\n                desc: searchPromptDesc,\n                onKeyUp: onPromptKeyUp,\n                onKeyDown: onPromptKeyDown\n              });\n            }\n\n            break;\n\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false\n            /** inclusive */\n            , true\n            /** forward */\n            , false\n            /** bigWord */\n            , true\n            /** noSymbol */\n            );\n            var isKeyword = true;\n\n            if (!word) {\n              word = expandWordUnderCursor(cm, false\n              /** inclusive */\n              , true\n              /** forward */\n              , false\n              /** bigWord */\n              , false\n              /** noSymbol */\n              );\n              isKeyword = false;\n            }\n\n            if (!word) {\n              return;\n            }\n\n            var query = cm.getLine(word.start.line).substring(word.start.ch, word.end.ch);\n\n            if (isKeyword && wholeWordOnly) {\n              query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            } // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n\n\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n            handleQuery(query, true\n            /** ignoreCase */\n            , false\n            /** smartCase */\n            );\n            break;\n        }\n      },\n      processEx: function (cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e),\n              up,\n              offset;\n\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' || keyName == 'Backspace' && input == '') {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if (keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift') vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              value: '\\'<,\\'>',\n              onKeyDown: onPromptKeyDown,\n              selectValueOnOpen: false\n            });\n          } else {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              onKeyDown: onPromptKeyDown\n            });\n          }\n        }\n      },\n      evalInput: function (cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel; // TODO: Make sure cm and vim selections are identical outside visual mode.\n\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head) : cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat || !motionArgs.explicitRepeat && repeat === 0) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n\n          if (!motionResult) {\n            return;\n          }\n\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList; // if the current motion is # or *, use cachedCursor\n\n            var cachedCursor = jumpList.cachedCursor;\n\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          } // TODO: Handle null returns from motion commands better.\n\n\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<', cursorIsBefore(newAnchor, newHead) ? newAnchor : newHead);\n            updateMark(cm, vim, '>', cursorIsBefore(newAnchor, newHead) ? newHead : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' : linewise ? 'line' : 'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n\n            if (linewise) {\n              var ranges = cmSel.ranges;\n\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n\n          operatorArgs.registerName = registerName; // Keep track of linewise as it affects how paste and change behave.\n\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function (vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n\n        if (macroModeState.isPlaying) {\n          return;\n        }\n\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n\n    var motions = {\n      moveToTopLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat - 1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function (cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat + 1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function (_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function (cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward; // If search is initiated with ? instead of /, negate direction.\n\n        prev = state.isReversed() ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev\n        /** prev */\n        , query, motionArgs.repeat);\n      },\n      goToMark: function (cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n\n        if (pos) {\n          return motionArgs.linewise ? {\n            line: pos.line,\n            ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line))\n          } : pos;\n        }\n\n        return null;\n      },\n      moveToOtherHighlightedEnd: function (cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)), clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))];\n        } else {\n          return [vim.sel.head, vim.sel.anchor];\n        }\n      },\n      jumpToMark: function (cm, head, motionArgs, vim) {\n        var best = head;\n\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n\n            var mark = vim.marks[key].find();\n            var isWrongDirection = motionArgs.forward ? cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n\n            if (motionArgs.linewise && mark.line == cursor.line) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = motionArgs.forward ? cursorIsBetween(cursor, mark, best) : cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n\n        return best;\n      },\n      moveByCharacters: function (_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function (cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch; // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n\n          default:\n            vim.lastHPos = endCh;\n        }\n\n        var repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, motionArgs.forward ? repeat : -repeat, 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        } // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n\n\n        if (line < first && cur.line == first) {\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last) {\n          return this.moveToEol(cm, head, motionArgs, vim, true);\n        }\n\n        if (motionArgs.toFirstChar) {\n          endCh = findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh), 'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function (cm, head, motionArgs, vim) {\n        var cur = head;\n\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n\n          default:\n            vim.lastHSPos = cm.charCoords(cur, 'div').left;\n        }\n\n        var repeat = motionArgs.repeat;\n        var res = cm.findPosV(cur, motionArgs.forward ? repeat : -repeat, 'line', vim.lastHSPos);\n\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = {\n              top: lastCharCoords.top + 8,\n              left: vim.lastHSPos\n            };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function (cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, motionArgs.forward ? repeat : -repeat, 'page');\n      },\n      moveByParagraph: function (cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function (cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function (cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n\n        if (!curEnd) {\n          return null;\n        }\n\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function (cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward, !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function (cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward, motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward, motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward, motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function (cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat; // repeat is equivalent to which column we want to move to!\n\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head, 'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function (cm, head, motionArgs, vim, keepHPos) {\n        var cur = head;\n        var retval = Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end = cm.clipPos(retval);\n        end.ch--;\n\n        if (!keepHPos) {\n          vim.lastHPos = Infinity;\n          vim.lastHSPos = cm.charCoords(end, 'div').left;\n        }\n\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function (cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line, findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function (cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = ch === '<' || ch === '>' ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(Pos(line, ch), {\n            bracketRegex: re\n          });\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function (_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function (cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n\n        return Pos(lineNum, findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function (cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {\n          '(': ')',\n          ')': '(',\n          '{': '}',\n          '}': '{',\n          '[': ']',\n          ']': '[',\n          '<': '>',\n          '>': '<'\n        };\n        var selfPaired = {\n          '\\'': true,\n          '\"': true,\n          '`': true\n        };\n        var character = motionArgs.selectedCharacter; // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        } // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n\n\n        var inclusive = !motionArgs.textObjectInner;\n        var tmp;\n\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true\n          /** forward */\n          , true\n          /** bigWord */\n          );\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true\n          /** forward */\n          , false\n          /** bigWord */\n          );\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n\n          if (vim.visualMode) {\n            if (!vim.visualLine) {\n              vim.visualLine = true;\n            }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n\n            if (operatorArgs) {\n              operatorArgs.linewise = true;\n            }\n\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n      repeatLastCharacterSearch: function (cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n\n\n    var operators = {\n      change: function (cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = /\\s+$/.exec(text);\n\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, -match[0].length);\n              text = text.slice(0, -match[0].length);\n            }\n          }\n\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            } // make sure cursor ends up at the end of the line.\n\n\n            anchor.ch = Number.MAX_VALUE;\n          }\n\n          finalHead = anchor;\n        } else if (args.fullLine) {\n          head.ch = Number.MAX_VALUE;\n          head.line--;\n          cm.setSelection(anchor, head);\n          text = cm.getSelection();\n          cm.replaceSelection(\"\");\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n\n        vimGlobalState.registerController.pushText(args.registerName, 'change', text, args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {\n          head: finalHead\n        }, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function (cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n\n          if (args.linewise && head.line != cm.firstLine() && anchor.line == cm.lastLine() && anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n\n        vimGlobalState.registerController.pushText(args.registerName, 'delete', text, args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function (cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ? ranges[ranges.length - 1].anchor.line : ranges[0].head.line; // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n\n        var repeat = vim.visualMode ? args.repeat : 1;\n\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function (cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function (cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() : character.toUpperCase();\n            }\n          }\n\n          swapped.push(text);\n        }\n\n        cm.replaceSelections(swapped);\n\n        if (args.shouldMoveCursor) {\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise) {\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function (cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor) : oldAnchor;\n        vimGlobalState.registerController.pushText(args.registerName, 'yank', text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n            cursor.line += (newPos - cursorCoords.top) / lineHeight;\n            cursor.line = Math.ceil(cursor.line);\n            cm.setCursor(cursor);\n            cursorCoords = cm.charCoords(cursor, 'local');\n            cm.scrollTo(null, cursorCoords.top);\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n\n          if (newBottom < cursorCoords.bottom) {\n            cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n            cursor.line = Math.floor(cursor.line);\n            cm.setCursor(cursor);\n            cursorCoords = cm.charCoords(cursor, 'local');\n            cm.scrollTo(null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function (cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n\n        switch (actionArgs.position) {\n          case 'center':\n            y = y - height / 2 + lineHeight;\n            break;\n\n          case 'bottom':\n            y = y - height + lineHeight;\n            break;\n        }\n\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function (cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n\n        while (repeat--) {\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function (cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function (cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"replace\"\n          });\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"insert\"\n          });\n        }\n      },\n      enterInsertMode: function (cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) {\n          return;\n        }\n\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = actionArgs ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode) return;\n\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(Math.min(sel.head.line, sel.anchor.line), Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualMode) return;\n\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(Math.min(sel.head.line, sel.anchor.line), Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode) {\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n\n        cm.setOption('disableInput', false);\n\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"replace\"\n          });\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"insert\"\n          });\n        }\n\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function (cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head; // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(cm, Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"visual\",\n            subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"\n          });\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise || vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {\n            mode: \"visual\",\n            subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"\n          });\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function (cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' : vim.visualBlock ? 'blockwise' : ''\n          });\n        }\n      },\n      joinLines: function (cm, actionArgs, vim) {\n        var curStart, curEnd;\n\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1, Infinity));\n        }\n\n        var finalCh = 0;\n\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1, lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces ? text.replace(/\\n\\r?/g, '') : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n\n        var curFinalPos = Pos(curStart.line, finalCh);\n\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function (cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = actionArgs.after ? insertAt.line : insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n\n        this.enterInsertMode(cm, {\n          repeat: actionArgs.repeat\n        }, vim);\n      },\n      paste: function (cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(actionArgs.registerName);\n        var text = register.toString();\n\n        if (!text) {\n          return;\n        }\n\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\"); // length that considers tabs and tabSize\n\n          var whitespaceLength = function (str) {\n            var tabs = str.split(\"\\t\").length - 1;\n            var spaces = str.split(\" \").length - 1;\n            return tabs * tabSize + spaces * 1;\n          };\n\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]); // chomp last newline b/c don't want it to match /^\\s*/gm\n\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function (wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n\n            if (newIndent < 0) {\n              return \"\";\n            } else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            } else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n\n        if (blockwise) {\n          text = text.split('\\n');\n\n          if (linewise) {\n            text.pop();\n          }\n\n          for (var i = 0; i < text.length; i++) {\n            text[i] = text[i] == '' ? ' ' : text[i];\n          }\n\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if (vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n\n        var curPosFinal;\n        var idx;\n\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1'); // save the curEnd marker before it get cleared due to cm.replaceRange.\n\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          } // push the previously selected text to unnamed register\n\n\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings); // Set new selections as per the block length of the yanked text\n\n            selectionEnd = Pos(selectionStart.line + text.length - 1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          } // restore the the curEnd marker\n\n\n          if (lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n\n          if (linewise) {\n            curPosFinal.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line + i;\n\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n', Pos(line, 0));\n              }\n\n              var lastCh = lineLength(cm, line);\n\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length - 1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur); // Now fine tune the cursor to where we want it.\n\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(cur.line + 1, findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(cur.line, findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n\n        cm.setCursor(curPosFinal);\n      },\n      undo: function (cm, actionArgs) {\n        cm.operation(function () {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function (cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function (_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function (cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function (cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n\n          if (replaceTo > line.length) {\n            replaceTo = line.length;\n          }\n\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n\n        if (replaceWith == '\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd); // special case, where vim help says to replace by just one line-break\n\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd); //replace all characters in range by selected, but keep linebreaks\n\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\") + 1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ? selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function (cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end) break;\n        }\n\n        if (!actionArgs.backtrack && end <= cur.ch) return;\n\n        if (match) {\n          var baseStr = match[2] || match[4];\n          var digits = match[3] || match[5];\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {\n            '0b': 2,\n            '0': 8,\n            '': 10,\n            '0x': 16\n          }[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + increment * actionArgs.repeat;\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : '';\n\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function (cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n\n        if (!lastEditInputState) {\n          return;\n        }\n\n        var repeat = actionArgs.repeat;\n\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n\n        repeatLastEdit(cm, vim, repeat, false\n        /** repeatForInsert */\n        );\n      },\n      indent: function (cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n\n\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine());\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n\n    function copyArgs(args) {\n      var ret = {};\n\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n\n      return ret;\n    }\n\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match,\n          partial = [],\n          full = [];\n\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n\n        if (context == 'insert' && command.context != 'insert' || command.context && command.context != context || inputState.operator && command.type == 'action' || !(match = commandMatch(keys, command.keys))) {\n          continue;\n        }\n\n        if (match == 'partial') {\n          partial.push(command);\n        }\n\n        if (match == 'full') {\n          full.push(command);\n        }\n      }\n\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' : mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' : mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n\n      if (selectedCharacter.length > 1) {\n        switch (selectedCharacter) {\n          case '<CR>':\n            selectedCharacter = '\\n';\n            break;\n\n          case '<Space>':\n            selectedCharacter = ' ';\n            break;\n\n          default:\n            selectedCharacter = '';\n            break;\n        }\n      }\n\n      return selectedCharacter;\n    }\n\n    function repeatFn(cm, fn, repeat) {\n      return function () {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column - endCh + 1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    } // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n\n\n    function selectBlock(cm, selectionEnd) {\n      var selections = [],\n          ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch,\n          headCh = head.ch;\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n\n        if (!isClipped) {\n          headCh--;\n        }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n\n        if (!wasClipped) {\n          headCh++;\n        }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {\n          anchor: new Pos(line, baseCh),\n          head: new Pos(line, headCh)\n        };\n        selections.push(range);\n      }\n\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({\n          anchor: lineHead,\n          head: lineHead\n        });\n      }\n\n      cm.setSelections(sel, 0);\n    } // getIndex returns the index of the cursor in the selections.\n\n\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n\n      var getCurrentSelectedAreaRange = function () {\n        var selections = cm.listSelections();\n        var start = selections[0];\n        var end = selections[selections.length - 1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n\n      var getLastSelectedAreaRange = function () {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = []; // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {\n              anchor: anchor,\n              head: head\n            };\n            selections.push(range);\n          }\n\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {\n            line: selectionEnd.line + line,\n            ch: line ? selectionEnd.ch : ch + selectionEnd.ch\n          };\n\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n\n        return [selectionStart, selectionEnd];\n      };\n\n      if (!vim.visualMode) {\n        // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    } // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n\n\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head; // To accommodate the effect of lastPastedText in the last selection\n\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n\n      vim.lastSelection = {\n        'anchorMark': cm.setBookmark(anchor),\n        'headMark': cm.setBookmark(head),\n        'anchor': copyCursor(anchor),\n        'head': copyCursor(head),\n        'visualMode': vim.visualMode,\n        'visualLine': vim.visualLine,\n        'visualBlock': vim.visualBlock\n      };\n    }\n\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n\n\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode || vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{\n            anchor: anchor,\n            head: head\n          }],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n          var lastLine = cm.lastLine();\n\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n\n        return {\n          ranges: [{\n            anchor: anchor,\n            head: head\n          }],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n\n      return cur;\n    }\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n\n\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {\n        mode: \"normal\"\n      });\n      clearFakeCursor(vim);\n    } // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n\n\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd); // Only clip if the selection ends with trailing newline + whitespace\n\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n'); // We know this is all whitespace.\n\n        lines.pop(); // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n\n        var line; // Find the line containing the last word, and clip all whitespace up\n        // to it.\n\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        } // If the last word is not an empty line, clip an additional newline\n\n\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    } // Expand the selection to line ends.\n\n\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch; // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest[0];\n\n      while (!test(line.charAt(idx))) {\n        idx++;\n\n        if (idx >= line.length) {\n          return null;\n        }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx,\n          start = idx;\n\n      while (test(line.charAt(end)) && end < line.length) {\n        end++;\n      }\n\n      while (test(line.charAt(start)) && start >= 0) {\n        start--;\n      }\n\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n\n        while (/\\s/.test(line.charAt(end)) && end < line.length) {\n          end++;\n        }\n\n        if (wordEnd == end) {\n          var wordStart = start;\n\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) {\n            start--;\n          }\n\n          if (!start) {\n            start = wordStart;\n          }\n        }\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n\n\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return {\n          start: cur,\n          end: cur\n        };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n\n      if (!tags || !tags.open || !tags.close) {\n        return {\n          start: cur,\n          end: cur\n        };\n      }\n\n      if (inclusive) {\n        return {\n          start: tags.open.from,\n          end: tags.close.to\n        };\n      }\n\n      return {\n        start: tags.open.to,\n        end: tags.close.from\n      };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n      vimGlobalState.lastCharacterSearch.increment = increment;\n      vimGlobalState.lastCharacterSearch.forward = args.forward;\n      vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n      '(': 'bracket',\n      ')': 'bracket',\n      '{': 'bracket',\n      '}': 'bracket',\n      '[': 'section',\n      ']': 'section',\n      '*': 'comment',\n      '/': 'comment',\n      'm': 'method',\n      'M': 'method',\n      '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1) return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n\n          return false;\n        }\n      },\n      section: {\n        init: function (state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function (state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function (state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function (state) {\n          state.symb = state.symb === 'm' ? '{' : '}';\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function (state) {\n          state.index = 0;\n        },\n        isComplete: function (state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n\n              state.depth--;\n            }\n\n            if (token === 'else' && state.depth === 0) return true;\n          }\n\n          return false;\n        }\n      }\n    };\n\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ? {\n          ')': '(',\n          '}': '{'\n        } : {\n          '(': ')',\n          '{': '}'\n        })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode) return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n\n      if (init) {\n        init(state);\n      }\n\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = lineLen > 0 ? lineLen - 1 : 0;\n          }\n\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n\n      return cur;\n    }\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n\n\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest : wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n\n        pos = forward ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return {\n            from: 0,\n            to: 0,\n            line: lineNum\n          };\n        }\n\n        var stop = dir > 0 ? line.length : -1;\n        var wordStart = stop,\n            wordEnd = stop; // Find bounds of next word.\n\n        while (pos != stop) {\n          var foundWord = false;\n\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos; // Advance to end of word.\n\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n\n              if (wordStart == cur.ch && lineNum == cur.line && wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum\n                };\n              }\n            }\n          }\n\n          if (!foundWord) {\n            pos += dir;\n          }\n        } // Advance to next/prev line.\n\n\n        lineNum += dir;\n\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n\n        line = cm.getLine(lineNum);\n        pos = dir > 0 ? 0 : line.length;\n      }\n    }\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n\n\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      } // For 'e', empty lines are not considered words, go figure.\n\n\n      var emptyLineIsWord = !(forward && wordEnd);\n\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward ? {\n            line: cm.lastLine(),\n            from: eodCh,\n            to: eodCh\n          } : {\n            line: 0,\n            from: 0,\n            to: 0\n          });\n          break;\n        }\n\n        words.push(word);\n        cur = Pos(word.line, forward ? word.to - 1 : word.from);\n      }\n\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n\n      for (var i = 0; i < repeat; i++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n\n        if (idx == -1) {\n          return null;\n        }\n\n        start = idx;\n      }\n\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start,\n          end,\n          i = line;\n\n      function isEmpty(i) {\n        return !cm.getLine(i);\n      }\n\n      function isBoundary(i, dir, any) {\n        if (any) {\n          return isEmpty(i) != isEmpty(i + dir);\n        }\n\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) {\n            repeat--;\n          }\n\n          i += dir;\n        }\n\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n\n      var startState = isEmpty(line);\n\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n\n      end = new Pos(i, 0); // select boundary before paragraph for the last one\n\n      if (i > max && !startState) {\n        startState = true;\n      } else {\n        inclusive = false;\n      }\n\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) {\n            break;\n          }\n        }\n      }\n\n      start = new Pos(i, 0);\n      return {\n        start: start,\n        end: end\n      };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = idx.dir > 0 ? 0 : idx.line.length - 1;\n        } else {\n          idx.pos += idx.dir;\n        }\n      }\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n\n\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = line === \"\";\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir\n        };\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos\n        };\n        var skip_empty_lines = curr.line === \"\"; // Move one step to skip character we start on\n\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return {\n              ln: curr.ln,\n              pos: curr.pos\n            };\n          } else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return {\n              ln: curr.ln,\n              pos: curr.pos\n            };\n          } else if (isEndOfSentenceSymbol(curr.line[curr.pos]) && !stop && (curr.pos === curr.line.length - 1 || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n\n\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n\n        for (var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n      }\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n\n\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir\n        };\n        var last_valid = {\n          ln: curr.ln,\n          pos: null\n        };\n        var skip_empty_lines = curr.line === \"\"; // Move one step to skip character we start on\n\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            } else {\n              return {\n                ln: curr.ln,\n                pos: curr.pos\n              };\n            }\n          } else if (isEndOfSentenceSymbol(curr.line[curr.pos]) && last_valid.pos !== null && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          } else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = {\n              ln: curr.ln,\n              pos: curr.pos\n            };\n          }\n\n          nextChar(cm, curr);\n        }\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n\n\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n\n        for (var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        } else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n\n        repeat--;\n      }\n\n      return Pos(curr_index.ln, curr_index.pos);\n    } // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n\n\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head,\n          start,\n          end;\n      var bracketRegexp = {\n        '(': /[()]/,\n        ')': /[()]/,\n        '[': /[[\\]]/,\n        ']': /[[\\]]/,\n        '{': /[{}]/,\n        '}': /[{}]/,\n        '<': /[<>]/,\n        '>': /[<>]/\n      }[symb];\n      var openSym = {\n        '(': '(',\n        ')': '(',\n        '[': '[',\n        ']': '[',\n        '{': '{',\n        '}': '{',\n        '<': '<',\n        '>': '<'\n      }[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch); // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n\n      var offset = curChar === openSym ? 1 : 0;\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {\n        'bracketRegex': bracketRegexp\n      });\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {\n        'bracketRegex': bracketRegexp\n      });\n\n      if (!start || !end) {\n        return {\n          start: cur,\n          end: cur\n        };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if (start.line == end.line && start.ch > end.ch || start.line > end.line) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    } // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n\n\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb); // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex; // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      } // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n          end = cur.ch; // assign end to the current cursor\n\n          --cur.ch; // make sure to look backwards\n        } // if we're currently on the symbol, we've got a start\n\n\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      } // look forwards for the end symbol\n\n\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      } // nothing found\n\n\n      if (!start || !end) {\n        return {\n          start: cur,\n          end: cur\n        };\n      } // include the symbols\n\n\n      if (inclusive) {\n        --start;\n        ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    } // Search functions\n\n\n    defineOption('pcre', true, 'boolean');\n\n    function SearchState() {}\n\n    SearchState.prototype = {\n      getQuery: function () {\n        return vimGlobalState.query;\n      },\n      setQuery: function (query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function () {\n        return this.searchOverlay;\n      },\n      setOverlay: function (overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function () {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function (reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function () {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function (annotate) {\n        this.annotate = annotate;\n      }\n    };\n\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, {\n          bottom: true,\n          value: options.value,\n          onKeyDown: options.onKeyDown,\n          onKeyUp: options.onKeyUp,\n          selectValueOnOpen: false\n        });\n      } else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = []; // in case of strings like foo/bar\n\n      if (slashes[0] !== 0) return;\n\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number') tokens.push(argString.substring(slashes[i] + 1, slashes[i + 1]));\n      }\n\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator) separator = '/';\n      var escapeNextChar = false;\n      var slashes = [];\n\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n\n        escapeNextChar = !escapeNextChar && c == '\\\\';\n      }\n\n      return slashes;\n    } // Translates a search string from ex (vim) syntax into javascript form.\n\n\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){'; // Remove, but never add, a '\\' for these.\n\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i + 1) || '';\n        var specialComesNext = n && specials.indexOf(n) != -1;\n\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true; // Treat the unescape list as special for removing, but not adding '\\'.\n\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            } // Not passing this test means removing a '\\'.\n\n\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n\n      return out.join('');\n    } // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n\n\n    var charUnescapes = {\n      '\\\\n': '\\n',\n      '\\\\r': '\\r',\n      '\\\\t': '\\t'\n    };\n\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i + 1) || '';\n\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c + n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n\n            if (isNumber(n) || n === '$') {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n\n            out.push(c);\n\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n\n      return out.join('');\n    } // Unescape \\ and / in the replace part, for PCRE mode.\n\n\n    var unescapes = {\n      '\\\\/': '/',\n      '\\\\\\\\': '\\\\',\n      '\\\\n': '\\n',\n      '\\\\r': '\\r',\n      '\\\\t': '\\t',\n      '\\\\&': '&'\n    };\n\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n\n        var matched = false;\n\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n\n      return output.join('');\n    }\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n\n\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query); // Check if the query is already a regex.\n\n      if (query instanceof RegExp) {\n        return query;\n      } // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n\n\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = flagsPart.indexOf('i') != -1;\n      }\n\n      if (!regexPart) {\n        return null;\n      }\n\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n\n      if (smartCase) {\n        ignoreCase = /^[^A-Z]*$/.test(regexPart);\n      }\n\n      var regexp = new RegExp(regexPart, ignoreCase || forceIgnoreCase ? 'i' : undefined);\n      return regexp;\n    }\n\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>', {\n          bottom: true,\n          duration: 5000\n        });\n      } else {\n        alert(text);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' + (prefix || \"\") + '<input type=\"text\" autocorrect=\"off\" ' + 'autocapitalize=\"off\" spellcheck=\"false\"></span>';\n      if (desc) raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n\n    var searchPromptDesc = '(Javascript regexp)';\n\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n        var props = ['global', 'multiline', 'ignoreCase', 'source'];\n\n        for (var i = 0; i < props.length; i++) {\n          var prop = props[i];\n\n          if (r1[prop] !== r2[prop]) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    } // Returns true if the query is valid.\n\n\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n\n      if (!query) {\n        return;\n      }\n\n      highlightSearchMatches(cm, query);\n\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n\n      state.setQuery(query);\n      return query;\n    }\n\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n\n      return {\n        token: function (stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n\n          var match = stream.match(query, false);\n\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n\n            stream.match(query);\n            return 'searching';\n          }\n\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n\n    var highlightTimeout = 0;\n\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function () {\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) {\n        repeat = 1;\n      }\n\n      return cm.operation(function () {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            found = cursor.find(prev);\n          }\n\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query, prev ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0));\n\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n\n        return cursor.from();\n      });\n    }\n\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n\n\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return pos >= start && pos <= end;\n        } else {\n          return pos == start;\n        }\n      }\n    }\n\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({\n        left: 0,\n        top: occludeToleranceTop + scrollInfo.top\n      }, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({\n        left: 0,\n        top: bottomY\n      }, 'local');\n      return {\n        top: from.line,\n        bottom: to.line\n      };\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function () {\n      this.buildCommandMap_();\n    };\n\n    ExCommandDispatcher.prototype = {\n      processCommand: function (cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function (cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n\n        var inputStream = new CodeMirror.StringStream(input); // update \": with the latest command whether valid or invalid\n\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch (e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n\n        var command;\n        var commandName;\n\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n\n          if (command) {\n            commandName = command.name;\n\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n\n            this.parseCommandArgs_(inputStream, params, command);\n\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n\n        try {\n          exCommands[commandName](cm, params); // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch (e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function (cm, inputStream, result) {\n        inputStream.eatWhile(':'); // Parse range.\n\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        } // Parse command name.\n\n\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function (cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n\n          case '-':\n          case '+':\n            inputStream.backUp(1); // Offset is relative to current line if not otherwise specified.\n\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function (inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n\n        return line;\n      },\n      parseCommandArgs_: function (inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n\n        params.argString = inputStream.match(/.*/)[0]; // Parse command-line arguments\n\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function (commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n\n        return null;\n      },\n      buildCommandMap_: function () {\n        this.commandMap_ = {};\n\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function (lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings');\n          }\n\n          var commandName = lhs.substring(1);\n\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: {\n                input: rhs.substring(1)\n              }\n            };\n\n            if (ctx) {\n              mapping.context = ctx;\n            }\n\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n\n            if (ctx) {\n              mapping.context = ctx;\n            }\n\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function (lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings');\n          }\n\n          var commandName = lhs.substring(1);\n\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n\n        throw Error('No such mapping.');\n      }\n    };\n    var exCommands = {\n      colorscheme: function (cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function (cm, params, ctx) {\n        var mapArgs = params.args;\n\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n\n          return;\n        }\n\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function (cm, params) {\n        this.map(cm, params, 'insert');\n      },\n      nmap: function (cm, params) {\n        this.map(cm, params, 'normal');\n      },\n      vmap: function (cm, params) {\n        this.map(cm, params, 'visual');\n      },\n      unmap: function (cm, params, ctx) {\n        var mapArgs = params.args;\n\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n\n          return;\n        }\n\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function (cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n          type: 'motion',\n          motion: 'moveToLineOrEdgeOfDocument',\n          motionArgs: {\n            forward: false,\n            explicitRepeat: true,\n            linewise: true\n          },\n          repeatOverride: params.line + 1\n        });\n      },\n      set: function (cm, params) {\n        var setArgs = params.args; // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n\n        var setCfg = params.setCfg || {};\n\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n\n          return;\n        }\n\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) {\n            throw Error('Trailing characters: ' + params.argString);\n          }\n\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        } // If no value is provided, then we assume this is a get.\n\n\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {\n          scope: 'local'\n        };\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {\n          scope: 'global'\n        };\n        this.set(cm, params);\n      },\n      registers: function (cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n\n        showConfirm(cm, regInfo);\n      },\n      sort: function (cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n\n            if (args.eat('!')) {\n              reverse = true;\n            }\n\n            if (args.eol()) {\n              return;\n            }\n\n            if (!args.eatSpace()) {\n              return 'Invalid arguments';\n            }\n\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n\n            if (!opts && !args.eol()) {\n              return 'Invalid arguments';\n            }\n\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n\n              if (decimal + hex + octal > 1) {\n                return 'Invalid arguments';\n              }\n\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n\n        var err = parseArgs();\n\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n\n        if (lineStart == lineEnd) {\n          return;\n        }\n\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern : number == 'decimal' ? /(-?)([\\d]+)/ : number == 'hex' ? /(-?)(?:0x)?([0-9a-f]+)/i : number == 'octal' ? /([0-7]+)/ : null;\n        var radix = number == 'decimal' ? 10 : number == 'hex' ? 16 : number == 'octal' ? 8 : null;\n        var numPart = [],\n            textPart = [];\n\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n\n        function compareFn(a, b) {\n          if (reverse) {\n            var tmp;\n            tmp = a;\n            a = b;\n            b = tmp;\n          }\n\n          if (ignoreCase) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n          }\n\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n\n          if (!anum) {\n            return a < b ? -1 : 1;\n          }\n\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n\n        function comparePatternFn(a, b) {\n          if (reverse) {\n            var tmp;\n            tmp = a;\n            a = b;\n            b = tmp;\n          }\n\n          if (ignoreCase) {\n            a[0] = a[0].toLowerCase();\n            b[0] = b[0].toLowerCase();\n          }\n\n          return a[0] < b[0] ? -1 : 1;\n        }\n\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) {\n          textPart.sort(compareFn);\n        }\n\n        text = !reverse ? textPart.concat(numPart) : numPart.concat(textPart);\n\n        if (unique) {\n          // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n\n            lastLine = textOld[i];\n          }\n        }\n\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function (cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        } // range is specified here\n\n\n        var lineStart = params.line !== undefined ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine(); // get the tokens from argString\n\n        var tokens = splitBySlash(argString);\n        var regexPart = argString,\n            cmd;\n\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true\n            /** ignoreCase */\n            , true\n            /** smartCase */\n            );\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        } // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n\n\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [],\n            content = '';\n\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n\n          if (matched) {\n            matchedLines.push(i + 1);\n            content += cm.getLine(i) + '<br>';\n          }\n        } // if there is no [cmd], just display the list of matched lines\n\n\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n\n        var index = 0;\n\n        var nextCommand = function () {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n\n          index++;\n        };\n\n        nextCommand();\n      },\n      substitute: function (cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' + 'any other getSearchCursor implementation.');\n        }\n\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart,\n            replacePart = '',\n            trailing,\n            flagsPart,\n            count;\n        var confirm = false; // Whether to confirm each replace.\n\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n\n        if (tokens.length) {\n          regexPart = tokens[0];\n\n          if (getOption('pcre') && regexPart !== '') {\n            regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n\n          replacePart = tokens[1];\n\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g, \"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' + ':s/pattern/replace/');\n            return;\n          }\n        } // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n\n\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n\n            if (getOption('pcre')) {\n              regexPart = regexPart + '/' + flagsPart;\n            } else {\n              regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true\n            /** ignoreCase */\n            , true\n            /** smartCase */\n            );\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = params.line !== undefined ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function (cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function (cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText('0', 'yank', lineText, true, true);\n      },\n      delmarks: function (cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n\n        while (!stream.eol()) {\n          stream.eatSpace(); // Record the streams position at the beginning of the loop for use\n          // in error messages.\n\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next(); // Check if this symbol is part of a range\n\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next(); // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n\n            if (isLowerCase(startMark) && isLowerCase(finishMark) || isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              } // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n\n\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n    var exCommandDispatcher = new ExCommandDispatcher();\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query, replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n\n      function replaceAll() {\n        cm.operation(function () {\n          while (!done) {\n            replace();\n            next();\n          }\n\n          stop();\n        });\n      }\n\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while (searchCursor.findNext() && isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n\n        done = true;\n      }\n\n      function stop(close) {\n        if (close) {\n          close();\n        }\n\n        cm.focus();\n\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n\n        if (callback) {\n          callback();\n        }\n      }\n\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n\n        switch (keyName) {\n          case 'Y':\n            replace();\n            next();\n            break;\n\n          case 'N':\n            next();\n            break;\n\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n\n          case 'L':\n            replace();\n          // fall through and exit.\n\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n\n        if (done) {\n          stop(close);\n        }\n\n        return true;\n      } // Actually do replace.\n\n\n      next();\n\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n\n      if (!confirm) {\n        replaceAll();\n\n        if (callback) {\n          callback();\n        }\n\n        return;\n      }\n\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1, true\n        /** repeatForInsert */\n        );\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch - 1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {\n        mode: \"normal\"\n      });\n\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {\n        keys: keys,\n        type: type\n      };\n      command[type] = name;\n      command[type + \"Args\"] = args;\n\n      for (var key in extra) command[key] = extra[key];\n\n      _mapCommand(command);\n    } // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n\n\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n\n        macroModeState.isPlaying = false;\n        return;\n      }\n\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = /<\\w+-.+?>|<\\w+>|./.exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes = changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) {\n        return;\n      }\n\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) {\n        return;\n      }\n\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) {\n        return;\n      }\n\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n\n\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n\n      if (!macroModeState.isPlaying) {\n        while (changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste' || changeObj.origin === undefined\n          /* only in testing */\n          ) {\n              var selectionCount = cm.listSelections().length;\n              if (selectionCount > 1) lastChange.ignoreCount = selectionCount;\n              var text = changeObj.text.join('\\n');\n\n              if (lastChange.maybeReset) {\n                lastChange.changes = [];\n                lastChange.maybeReset = false;\n              }\n\n              if (text) {\n                if (cm.state.overwrite && !/\\n/.test(text)) {\n                  lastChange.changes.push([text]);\n                } else {\n                  lastChange.changes.push(text);\n                }\n              }\n            } // Change objects may be chained with next.\n\n\n          changeObj = changeObj.next;\n        }\n      }\n    }\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n\n\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n\n        if (macroModeState.isPlaying) {\n          return;\n        }\n\n        var lastChange = macroModeState.lastInsertModeChanges;\n\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    /**\n     * Keeps track of a fake cursor to support visual mode cursor behavior.\n     */\n\n\n    function updateFakeCursor(cm) {\n      var className = 'cm-animate-fat-cursor';\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      clearFakeCursor(vim); // In visual mode, the cursor may be positioned over EOL.\n\n      if (from.ch == cm.getLine(from.line).length) {\n        var widget = document.createElement(\"span\");\n        widget.textContent = \"\\u00a0\";\n        widget.className = className;\n        vim.fakeCursorBookmark = cm.setBookmark(from, {\n          widget: widget\n        });\n      } else {\n        vim.fakeCursor = cm.markText(from, to, {\n          className: className\n        });\n      }\n    }\n\n    function clearFakeCursor(vim) {\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n        vim.fakeCursor = null;\n      }\n\n      if (vim.fakeCursorBookmark) {\n        vim.fakeCursorBookmark.clear();\n        vim.fakeCursorBookmark = null;\n      }\n    }\n\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head'); // Enter or exit visual mode to match mouse selection.\n\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {\n          mode: \"visual\"\n        });\n      }\n\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n    /** Wrapper for special keys pressed in insert mode */\n\n\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n\n\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n\n      if (!keyName) {\n        return;\n      }\n\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n\n\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n\n      vim.inputState = vim.lastEditInputState;\n\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n\n        repeatInsert(repeat);\n      }\n\n      vim.inputState = cachedInputState;\n\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n\n        return true;\n      }\n\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  }; // Initialize Vim and make it available as an API.\n\n\n  CodeMirror.Vim = Vim();\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/codemirror/keymap/vim.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","keepSpaces","replace","fullLine","exitVisualBlock","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultKeymapLength","length","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","enterVimMode","cm","setOption","signal","mode","on","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","off","state","vim","detachVimMap","next","keyMap","rmClass","getWrapperElement","getOption","document","body","style","caretColor","disableFatCursorMark","attach","attachVimMap","prev","addClass","enableFatCursorMark","updateFatCursorMark","fatCursorMarks","clearFatCursorMark","ranges","listSelections","result","i","range","empty","lineLength","getLine","anchor","line","ch","push","markText","className","marks","clear","defineOption","val","Init","test","cmKey","key","undefined","vimKey","cmKeyToVimKey","cmd","findKey","modifiers","specialKeys","Enter","Backspace","Delete","Insert","charAt","pieces","split","lastPiece","hasCharacter","piece","isUpperCase","toLowerCase","join","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","bigWordCharTest","makeKeyRange","start","size","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","firstLine","lastLine","isLowerCase","k","isMatchableSymbol","indexOf","isNumber","isWhiteSpaceString","isEndOfSentenceSymbol","inArray","arr","options","defaultValue","aliases","callback","Error","value","cfg","option","scope","local","createCircularJumpList","pointer","head","tail","buffer","Array","add","oldCur","newCur","current","curMark","useNextSlot","cursor","trashMark","setBookmark","markPos","find","cursorEqual","move","offset","mark","inc","oldPointer","cachedCursor","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","prototype","exitMacroRecordMode","macroModeState","vimGlobalState","enterMacroRecordMode","registerName","register","registerController","getRegister","openDialog","bottom","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","lastCharacterSearch","increment","selectedCharacter","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","noremap","toCtxArray","ctxsToMap","actualLength","origLength","mapping","substr","newMapping","_mapCommand","mappedCtxs","filter","el","mapclear","userKeymap","slice","contexts","j","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","logKey","handleEsc","exitVisualMode","exitInsertMode","doKeyToKey","match","exec","substring","index","handleKeyInsertMode","keyBuffer","keysAreChars","commandDispatcher","matchCommand","thisMatch","window","clearTimeout","setTimeout","selections","here","replaceRange","pop","handleKeyNonInsertMode","keysMatcher","pushRepeatDigit","operation","curOp","isVimOp","processCommand","e","console","handleEx","input","defineMotion","defineAction","defineOperator","mapCommand","defineRegister","prefixRepeat","motionRepeat","n","getRepeat","repeat","parseInt","reason","Register","text","insertModeChanges","searchQueries","setText","pushText","pushInsertModeChanges","pushSearchQuery","query","toString","registers","unnamedRegister","isValidRegister","shiftNumericRegisters_","append","historyBuffer","iterator","initialPrefix","nextMatch","up","dir","element","pushInput","splice","reset","matches","commandMatches","full","partial","bestMatch","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","updateCmSelection","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","ignoreCase","smartCase","updateSearchQuery","showConfirm","onPromptClose","scrollTo","left","top","logSearchQuery","onPromptKeyUp","close","keyName","target","selectionEnd","selectionStart","Math","min","parsedQuery","scrollIntoView","findNext","clearSearchHighlight","onPromptKeyDown","e_stop","focus","shift","showPrompt","onClose","desc","searchPromptDesc","onKeyUp","onKeyDown","word","expandWordUnderCursor","isKeyword","end","escapeRegex","exArgs","selectValueOnOpen","origHead","copyCursor","clipCursorToContent","origAnchor","oldHead","oldAnchor","newHead","newAnchor","noRepeat","motionResult","motions","recordJumpPosition","Infinity","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","tmp","expandSelectionToLine","clipToLine","exclusive","setSelections","primary","operatorMoveTo","operators","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","floor","moveToBottomLine","expandToLine","_cm","cur","isReversed","highlightSearchMatches","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","cursorIsBetween","moveByCharacters","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","posV","findPosV","hasMarkedText","moveToStartOfLine","charCoords","res","hitSide","lastCharCoords","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","moveBySentence","findSentence","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","findSymbol","keepHPos","retval","clipPos","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","lineText","symbol","getTokenTypeAt","re","matched","findMatchingBracket","bracketRegex","to","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","mirroredPairs","selfPaired","selectCompanionObject","findBeginningAndEnd","expandTagUnderCursor","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fn","fillArray","times","change","args","finalHead","getRange","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","commands","newlineAndIndent","setSelection","getSelection","replaceSelection","replacement","replaceSelections","indent","startLine","endLine","indentLine","indentAuto","_args","execCommand","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","max","getLastEditPos","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineFn","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","idx","lastSelectionCurEnd","selectedArea","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","lastCh","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","markName","replaceWith","replaceTo","replaceWithStr","incrementNumberToken","lineStr","numberStr","baseStr","digits","base","number","zeroPadding","from","repeatLastEdit","includeLineBreak","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","isClipped","curHead","primIndex","getIndex","wasClipped","baseCh","headCh","newDir","lineHead","atAnchor","atHead","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","updateFakeCursor","headOffset","anchorOffset","right","getHead","moveHead","clearFakeCursor","selection","lines","firstNonWS","search","_forward","noSymbol","wordStart","findMatchingTag","findEnclosingTag","tags","open","symbolToMode","findSymbolModes","bracket","isComplete","nextCh","symb","depth","reverseSymb","section","init","curMoveThrough","comment","found","method","preprocess","token","lineCount","curCh","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","words","eodCh","shortCircuit","firstWord","lastWord","charIdxInLine","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","nextChar","ln","curr","last_valid","skip_empty_lines","reverse","curr_index","bracketRegexp","openSym","curChar","scanForBracket","chars","len","firstIndex","SearchState","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","searchState_","dialog","template","shortText","prompt","splitBySlash","argString","splitBySeparator","findUnescapedSlashes","findUnescapedSeparators","separator","slashes","tokens","escapeNextChar","translateRegex","specials","unescape","out","specialComesNext","charUnescapes","translateRegexReplace","unescapes","unescapeRegexReplace","stream","StringStream","output","eol","peek","matcher","parseQuery","lastSearchRegister","RegExp","regexPart","forceIgnoreCase","flagsPart","regexp","openNotification","duration","alert","makePrompt","raw","regexEqual","r1","r2","props","rawQuery","source","matchSol","sol","skipToEnd","backUp","highlightTimeout","searchState","removeOverlay","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","occludeToleranceTop","occludeToleranceBottom","bottomY","done","doc","history","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","unique","pattern","parseArgs","eatSpace","opts","decimal","hex","octal","err","lineStart","radix","numPart","textPart","matchPart","compareFn","a","b","anum","bnum","comparePatternFn","textOld","global","matchedLines","content","nextCommand","substitute","replacePart","trailing","count","confirm","startPos","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","searchCursor","exMode","lastPos","replaceAll","newText","_value","savedCallback","detach","insertModeChangeRegister","lastChange","logInsertModeChange","extra","fallthrough","imc","repeatInsertModeChanges","changeObj","ignoreCount","selectionCount","maybeReset","handleExternalSelection","widget","createElement","textContent","fakeCursorBookmark","somethingSelected","onKeyFound","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          disableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"\";\n        }\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          enableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"transparent\";\n        }\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    function updateFatCursorMark(cm) {\n      if (!cm.state.fatCursorMarks) return;\n      clearFatCursorMark(cm);\n      var ranges = cm.listSelections(), result = []\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) {\n          var lineLength = cm.getLine(range.anchor.line).length;\n          if (range.anchor.ch < lineLength) {\n            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          } else {\n            result.push(cm.markText(Pos(range.anchor.line, lineLength - 1),\n                                    Pos(range.anchor.line, lineLength),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          }\n        }\n      }\n      cm.state.fatCursorMarks = result;\n    }\n\n    function clearFatCursorMark(cm) {\n      var marks = cm.state.fatCursorMarks;\n      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n\n    function enableFatCursorMark(cm) {\n      cm.state.fatCursorMarks = [];\n      updateFatCursorMark(cm)\n      cm.on(\"cursorActivity\", updateFatCursorMark)\n    }\n\n    function disableFatCursorMark(cm) {\n      clearFatCursorMark(cm);\n      cm.off(\"cursorActivity\", updateFatCursorMark);\n      // explicitly set fatCursorMarks to null because event listener above\n      // can be invoke after removing it, if off is called from operation\n      cm.state.fatCursorMarks = null;\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim, keepHPos) {\n        var cur = head;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        if (!keepHPos) {\n          vim.lastHPos = Infinity;\n          vim.lastHSPos = cm.charCoords(end,'div').left;\n        }\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      clearFakeCursor(vim);\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\" autocorrect=\"off\" ' +\n          'autocapitalize=\"off\" spellcheck=\"false\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    /**\n     * Keeps track of a fake cursor to support visual mode cursor behavior.\n     */\n    function updateFakeCursor(cm) {\n      var className = 'cm-animate-fat-cursor';\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      clearFakeCursor(vim);\n      // In visual mode, the cursor may be positioned over EOL.\n      if (from.ch == cm.getLine(from.line).length) {\n        var widget = document.createElement(\"span\");\n        widget.textContent = \"\\u00a0\";\n        widget.className = className;\n        vim.fakeCursorBookmark = cm.setBookmark(from, {widget: widget});\n      } else {\n        vim.fakeCursor = cm.markText(from, to, {className: className});\n      }\n    }\n    function clearFakeCursor(vim) {\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n        vim.fakeCursor = null;\n      }\n      if (vim.fakeCursorBookmark) {\n        vim.fakeCursorBookmark.clear();\n        vim.fakeCursorBookmark = null;\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"]},"metadata":{},"sourceType":"script"}