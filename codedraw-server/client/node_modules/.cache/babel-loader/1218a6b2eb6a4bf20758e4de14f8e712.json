{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fcl\", function (config) {\n    var indentUnit = config.indentUnit;\n    var keywords = {\n      \"term\": true,\n      \"method\": true,\n      \"accu\": true,\n      \"rule\": true,\n      \"then\": true,\n      \"is\": true,\n      \"and\": true,\n      \"or\": true,\n      \"if\": true,\n      \"default\": true\n    };\n    var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n    };\n    var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n    };\n    var atoms = {\n      \"true\": true,\n      \"false\": true,\n      \"nan\": true,\n      \"real\": true,\n      \"min\": true,\n      \"max\": true,\n      \"cog\": true,\n      \"cogs\": true\n    };\n    var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") {\n          stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        } else if (ch == \"0\") {\n          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        } else {\n          stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        }\n\n        return \"number\";\n      }\n\n      if (ch == \"/\" || ch == \"(\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current().toLowerCase();\n\n      if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      if (!state.context.prev) return;\n      var t = state.context.type;\n      if (t == \"end_block\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        var cur = stream.current().toLowerCase();\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");else if (end_blocks.propertyIsEnumerable(cur)) popContext(state);\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var ctx = state.context;\n        var closing = end_blocks.propertyIsEnumerable(textAfter);\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"ryk\",\n      fold: \"brace\",\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/fcl/fcl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","keywords","start_blocks","end_blocks","atoms","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fcl\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n      \"term\": true,\n      \"method\": true, \"accu\": true,\n      \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n      \"if\": true, \"default\": true\n  };\n\n  var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n  };\n\n  var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n  };\n\n  var atoms = {\n      \"true\": true, \"false\": true, \"nan\": true,\n      \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n\n    if (ch == \"/\" || ch == \"(\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current().toLowerCase();\n    if (keywords.propertyIsEnumerable(cur) ||\n        start_blocks.propertyIsEnumerable(cur) ||\n        end_blocks.propertyIsEnumerable(cur)) {\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        var cur = stream.current().toLowerCase();\n\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n        else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n        state.startOfLine = false;\n        return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context;\n\n      var closing = end_blocks.propertyIsEnumerable(textAfter);\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"ryk\",\n    fold: \"brace\",\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});\n"]},"metadata":{},"sourceType":"script"}