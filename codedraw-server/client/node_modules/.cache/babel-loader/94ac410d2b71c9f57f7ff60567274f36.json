{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|https://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tiddlywiki\", function () {\n    // Tokenizer\n    var textwords = {};\n    var keywords = {\n      \"allTags\": true,\n      \"closeAll\": true,\n      \"list\": true,\n      \"newJournal\": true,\n      \"newTiddler\": true,\n      \"permaview\": true,\n      \"saveChanges\": true,\n      \"search\": true,\n      \"slider\": true,\n      \"tabs\": true,\n      \"tag\": true,\n      \"tagging\": true,\n      \"tags\": true,\n      \"tiddler\": true,\n      \"timeline\": true,\n      \"today\": true,\n      \"version\": true,\n      \"option\": true,\n      \"with\": true,\n      \"filter\": true\n    };\n    var isSpaceName = /[\\w_\\-]/i,\n        reHR = /^\\-\\-\\-\\-+$/,\n        // <hr>\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,\n        // /***\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,\n        // ***/\n    reBlockQuote = /^<<<$/,\n        reJsCodeStart = /^\\/\\/\\{\\{\\{$/,\n        // //{{{ js block start\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,\n        // //}}} js stop\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,\n        // xml block start\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,\n        // xml stop\n    reCodeBlockStart = /^\\{\\{\\{$/,\n        // {{{ TW text div block start\n    reCodeBlockStop = /^\\}\\}\\}$/,\n        // }}} TW text stop\n    reUntilCodeStop = /.*?\\}\\}\\}/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol(),\n          ch = stream.peek();\n      state.block = false; // indicates the start of a code block.\n      // check start of  blocks\n\n      if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n        if (stream.match(reCodeBlockStart)) {\n          state.block = true;\n          return chain(stream, state, twTokenCode);\n        }\n\n        if (stream.match(reBlockQuote)) return 'quote';\n        if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) return 'comment';\n        if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) return 'comment';\n        if (stream.match(reHR)) return 'hr';\n      }\n\n      stream.next();\n\n      if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n        if (ch == \"!\") {\n          // tw header\n          stream.skipToEnd();\n          return \"header\";\n        }\n\n        if (ch == \"*\") {\n          // tw list\n          stream.eatWhile('*');\n          return \"comment\";\n        }\n\n        if (ch == \"#\") {\n          // tw numbered list\n          stream.eatWhile('#');\n          return \"comment\";\n        }\n\n        if (ch == \";\") {\n          // definition list, term\n          stream.eatWhile(';');\n          return \"comment\";\n        }\n\n        if (ch == \":\") {\n          // definition list, description\n          stream.eatWhile(':');\n          return \"comment\";\n        }\n\n        if (ch == \">\") {\n          // single line quote\n          stream.eatWhile(\">\");\n          return \"quote\";\n        }\n\n        if (ch == '|') return 'header';\n      }\n\n      if (ch == '{' && stream.match(/\\{\\{/)) return chain(stream, state, twTokenCode); // rudimentary html:// file:// link matching. TW knows much more ...\n\n      if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\"; // just a little string indicator, don't want to have the whole string covered\n\n      if (ch == '\"') return 'string';\n      if (ch == '~') // _no_ CamelCase indicator should be bold\n        return 'brace';\n      if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n        return 'brace';\n\n      if (ch == \"@\") {\n        // check for space link. TODO fix @@...@@ highlighting\n        stream.eatWhile(isSpaceName);\n        return \"link\";\n      }\n\n      if (/\\d/.test(ch)) {\n        // numbers\n        stream.eatWhile(/\\d/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        // tw invisible comment\n        if (stream.eat(\"%\")) {\n          return chain(stream, state, twTokenComment);\n        } else if (stream.eat(\"/\")) {\n          //\n          return chain(stream, state, twTokenEm);\n        }\n      }\n\n      if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline); // strikethrough and mdash handling\n\n      if (ch == \"-\" && stream.eat(\"-\")) {\n        // if strikethrough looks ugly, change CSS.\n        if (stream.peek() != ' ') return chain(stream, state, twTokenStrike); // mdash\n\n        if (stream.peek() == ' ') return 'brace';\n      }\n\n      if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n        return chain(stream, state, twTokenStrong);\n      if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n        return chain(stream, state, twTokenMacro); // core macro handling\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // tw invisible comment\n\n\n    function twTokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"%\";\n      }\n\n      return \"comment\";\n    } // tw strong / bold\n\n\n    function twTokenStrong(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"'\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"'\";\n      }\n\n      return \"strong\";\n    } // tw code\n\n\n    function twTokenCode(stream, state) {\n      var sb = state.block;\n\n      if (sb && stream.current()) {\n        return \"comment\";\n      }\n\n      if (!sb && stream.match(reUntilCodeStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      stream.next();\n      return \"comment\";\n    } // tw em / italic\n\n\n    function twTokenEm(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"/\";\n      }\n\n      return \"em\";\n    } // tw underlined text\n\n\n    function twTokenUnderline(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"_\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"_\";\n      }\n\n      return \"underlined\";\n    } // tw strike through text looks ugly\n    // change CSS if needed\n\n\n    function twTokenStrike(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"-\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"-\";\n      }\n\n      return \"strikethrough\";\n    } // macro\n\n\n    function twTokenMacro(stream, state) {\n      if (stream.current() == '<<') {\n        return 'macro';\n      }\n\n      var ch = stream.next();\n\n      if (!ch) {\n        state.tokenize = tokenBase;\n        return null;\n      }\n\n      if (ch == \">\") {\n        if (stream.peek() == '>') {\n          stream.next();\n          state.tokenize = tokenBase;\n          return \"macro\";\n        }\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // Interface\n\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/tiddlywiki/tiddlywiki.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","textwords","keywords","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","startState","token","eatSpace","style","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|https://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tiddlywiki\", function () {\n  // Tokenizer\n  var textwords = {};\n\n  var keywords = {\n    \"allTags\": true, \"closeAll\": true, \"list\": true,\n    \"newJournal\": true, \"newTiddler\": true,\n    \"permaview\": true, \"saveChanges\": true,\n    \"search\": true, \"slider\": true, \"tabs\": true,\n    \"tag\": true, \"tagging\": true, \"tags\": true,\n    \"tiddler\": true, \"timeline\": true,\n    \"today\": true, \"version\": true, \"option\": true,\n    \"with\": true, \"filter\": true\n  };\n\n  var isSpaceName = /[\\w_\\-]/i,\n      reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n      reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n      reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n      reBlockQuote = /^<<<$/,\n\n      reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n      reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n      reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n      reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n\n      reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n      reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n\n      reUntilCodeStop = /.*?\\}\\}\\}/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    var sol = stream.sol(), ch = stream.peek();\n\n    state.block = false;        // indicates the start of a code block.\n\n    // check start of  blocks\n    if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n      if (stream.match(reCodeBlockStart)) {\n        state.block = true;\n        return chain(stream, state, twTokenCode);\n      }\n      if (stream.match(reBlockQuote))\n        return 'quote';\n      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\n        return 'comment';\n      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\n        return 'comment';\n      if (stream.match(reHR))\n        return 'hr';\n    }\n\n    stream.next();\n    if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n      if (ch == \"!\") { // tw header\n        stream.skipToEnd();\n        return \"header\";\n      }\n      if (ch == \"*\") { // tw list\n        stream.eatWhile('*');\n        return \"comment\";\n      }\n      if (ch == \"#\") { // tw numbered list\n        stream.eatWhile('#');\n        return \"comment\";\n      }\n      if (ch == \";\") { // definition list, term\n        stream.eatWhile(';');\n        return \"comment\";\n      }\n      if (ch == \":\") { // definition list, description\n        stream.eatWhile(':');\n        return \"comment\";\n      }\n      if (ch == \">\") { // single line quote\n        stream.eatWhile(\">\");\n        return \"quote\";\n      }\n      if (ch == '|')\n        return 'header';\n    }\n\n    if (ch == '{' && stream.match(/\\{\\{/))\n      return chain(stream, state, twTokenCode);\n\n    // rudimentary html:// file:// link matching. TW knows much more ...\n    if (/[hf]/i.test(ch) &&\n        /[ti]/i.test(stream.peek()) &&\n        stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\n      return \"link\";\n\n    // just a little string indicator, don't want to have the whole string covered\n    if (ch == '\"')\n      return 'string';\n\n    if (ch == '~')    // _no_ CamelCase indicator should be bold\n      return 'brace';\n\n    if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n      return 'brace';\n\n    if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\n      stream.eatWhile(isSpaceName);\n      return \"link\";\n    }\n\n    if (/\\d/.test(ch)) {        // numbers\n      stream.eatWhile(/\\d/);\n      return \"number\";\n    }\n\n    if (ch == \"/\") { // tw invisible comment\n      if (stream.eat(\"%\")) {\n        return chain(stream, state, twTokenComment);\n      } else if (stream.eat(\"/\")) { //\n        return chain(stream, state, twTokenEm);\n      }\n    }\n\n    if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline);\n\n    // strikethrough and mdash handling\n    if (ch == \"-\" && stream.eat(\"-\")) {\n      // if strikethrough looks ugly, change CSS.\n      if (stream.peek() != ' ')\n        return chain(stream, state, twTokenStrike);\n      // mdash\n      if (stream.peek() == ' ')\n        return 'brace';\n    }\n\n    if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n      return chain(stream, state, twTokenStrong);\n\n    if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n      return chain(stream, state, twTokenMacro);\n\n    // core macro handling\n    stream.eatWhile(/[\\w\\$_]/);\n    return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // tw invisible comment\n  function twTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"%\");\n    }\n    return \"comment\";\n  }\n\n  // tw strong / bold\n  function twTokenStrong(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"'\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"'\");\n    }\n    return \"strong\";\n  }\n\n  // tw code\n  function twTokenCode(stream, state) {\n    var sb = state.block;\n\n    if (sb && stream.current()) {\n      return \"comment\";\n    }\n\n    if (!sb && stream.match(reUntilCodeStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    stream.next();\n    return \"comment\";\n  }\n\n  // tw em / italic\n  function twTokenEm(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"/\");\n    }\n    return \"em\";\n  }\n\n  // tw underlined text\n  function twTokenUnderline(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"_\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"_\");\n    }\n    return \"underlined\";\n  }\n\n  // tw strike through text looks ugly\n  // change CSS if needed\n  function twTokenStrike(stream, state) {\n    var maybeEnd = false, ch;\n\n    while (ch = stream.next()) {\n      if (ch == \"-\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"-\");\n    }\n    return \"strikethrough\";\n  }\n\n  // macro\n  function twTokenMacro(stream, state) {\n    if (stream.current() == '<<') {\n      return 'macro';\n    }\n\n    var ch = stream.next();\n    if (!ch) {\n      state.tokenize = tokenBase;\n      return null;\n    }\n    if (ch == \">\") {\n      if (stream.peek() == '>') {\n        stream.next();\n        state.tokenize = tokenBase;\n        return \"macro\";\n      }\n    }\n\n    stream.eatWhile(/[\\w\\$_]/);\n    return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // Interface\n  return {\n    startState: function () {\n      return {tokenize: tokenBase};\n    },\n\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});\n"]},"metadata":{},"sourceType":"script"}