{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar _knownListItemDepthCl;\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DefaultDraftBlockRenderMap = require(\"./DefaultDraftBlockRenderMap\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar URI = require(\"fbjs/lib/URI\");\n\nvar cx = require(\"fbjs/lib/cx\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar getSafeBodyFromHTML = require(\"./getSafeBodyFromHTML\");\n\nvar gkx = require(\"./gkx\");\n\nvar _require = require(\"immutable\"),\n    List = _require.List,\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet;\n\nvar isHTMLAnchorElement = require(\"./isHTMLAnchorElement\");\n\nvar isHTMLBRElement = require(\"./isHTMLBRElement\");\n\nvar isHTMLElement = require(\"./isHTMLElement\");\n\nvar isHTMLImageElement = require(\"./isHTMLImageElement\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // used for replacing characters in HTML\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_LEADING_LF = new RegExp('^\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g'); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', 'normal', '100', '200', '300', '400'];\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\nvar HTMLTagToRawInlineStyleMap = Map({\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE',\n  mark: 'HIGHLIGHT'\n});\n/**\n * Build a mapping from HTML tags to draftjs block types\n * out of a BlockRenderMap.\n *\n * The BlockTypeMap for the default BlockRenderMap looks like this:\n *   Map({\n *     h1: 'header-one',\n *     h2: 'header-two',\n *     h3: 'header-three',\n *     h4: 'header-four',\n *     h5: 'header-five',\n *     h6: 'header-six',\n *     blockquote: 'blockquote',\n *     figure: 'atomic',\n *     pre: ['code-block'],\n *     div: 'unstyled',\n *     p: 'unstyled',\n *     li: ['ordered-list-item', 'unordered-list-item'],\n *   })\n */\n\nvar buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\n  var blockTypeMap = {};\n  blockRenderMap.mapKeys(function (blockType, desc) {\n    var elements = [desc.element];\n\n    if (desc.aliasedElements !== undefined) {\n      elements.push.apply(elements, desc.aliasedElements);\n    }\n\n    elements.forEach(function (element) {\n      if (blockTypeMap[element] === undefined) {\n        blockTypeMap[element] = blockType;\n      } else if (typeof blockTypeMap[element] === 'string') {\n        blockTypeMap[element] = [blockTypeMap[element], blockType];\n      } else {\n        blockTypeMap[element].push(blockType);\n      }\n    });\n  });\n  return Map(blockTypeMap);\n};\n\nvar detectInlineStyle = function detectInlineStyle(node) {\n  if (isHTMLElement(node)) {\n    var element = node; // Currently only used to detect preformatted inline code\n\n    if (element.style.fontFamily.includes('monospace')) {\n      return 'CODE';\n    }\n  }\n\n  return null;\n};\n/**\n * If we're pasting from one DraftEditor to another we can check to see if\n * existing list item depth classes are being used and preserve this style\n */\n\n\nvar getListItemDepth = function getListItemDepth(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\n    if (node.classList.contains(depthClass)) {\n      depth = knownListItemDepthClasses[depthClass];\n    }\n  });\n  return depth;\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible link.\n */\n\n\nvar isValidAnchor = function isValidAnchor(node) {\n  if (!isHTMLAnchorElement(node)) {\n    return false;\n  }\n\n  var anchorNode = node;\n\n  if (!anchorNode.href || anchorNode.protocol !== 'http:' && anchorNode.protocol !== 'https:' && anchorNode.protocol !== 'mailto:' && anchorNode.protocol !== 'tel:') {\n    return false;\n  }\n\n  try {\n    // Just checking whether we can actually create a URI\n    var _ = new URI(anchorNode.href);\n\n    return true; // We need our catch statements to have arguments, else\n    // UglifyJS (which we use for our OSS builds) will crash.\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\n  } catch (_) {\n    return false;\n  }\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible image.\n */\n\n\nvar isValidImage = function isValidImage(node) {\n  if (!isHTMLImageElement(node)) {\n    return false;\n  }\n\n  var imageNode = node;\n  return !!(imageNode.attributes.getNamedItem('src') && imageNode.attributes.getNamedItem('src').value);\n};\n/**\n * Try to guess the inline style of an HTML element based on its css\n * styles (font-weight, font-style and text-decoration).\n */\n\n\nvar styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\n  if (!isHTMLElement(node)) {\n    return style;\n  }\n\n  var htmlElement = node;\n  var fontWeight = htmlElement.style.fontWeight;\n  var fontStyle = htmlElement.style.fontStyle;\n  var textDecoration = htmlElement.style.textDecoration;\n  return style.withMutations(function (style) {\n    if (boldValues.indexOf(fontWeight) >= 0) {\n      style.add('BOLD');\n    } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n      style.remove('BOLD');\n    }\n\n    if (fontStyle === 'italic') {\n      style.add('ITALIC');\n    } else if (fontStyle === 'normal') {\n      style.remove('ITALIC');\n    }\n\n    if (textDecoration === 'underline') {\n      style.add('UNDERLINE');\n    }\n\n    if (textDecoration === 'line-through') {\n      style.add('STRIKETHROUGH');\n    }\n\n    if (textDecoration === 'none') {\n      style.remove('UNDERLINE');\n      style.remove('STRIKETHROUGH');\n    }\n  });\n};\n/**\n * Determine if a nodeName is a list type, 'ul' or 'ol'\n */\n\n\nvar isListNode = function isListNode(nodeName) {\n  return nodeName === 'ul' || nodeName === 'ol';\n};\n/**\n *  ContentBlockConfig is a mutable data structure that holds all\n *  the information required to build a ContentBlock and an array of\n *  all the child nodes (childConfigs).\n *  It is being used a temporary data structure by the\n *  ContentBlocksBuilder class.\n */\n\n/**\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\n * out of one (or several) HTMLElement(s).\n *\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\n * by walking through the HTML nodes and their children, then it walks the\n * ContentBlockConfigs tree to compute parents/siblings and create\n * the actual ContentBlocks.\n *\n * Typical usage is:\n *     new ContentBlocksBuilder()\n *        .addDOMNode(someHTMLNode)\n *        .addDOMNode(someOtherHTMLNode)\n *       .getContentBlocks();\n *\n */\n\n\nvar ContentBlocksBuilder = /*#__PURE__*/function () {\n  // Most of the method in the class depend on the state of the content builder\n  // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\n  // be confusing at first, it made the code simpler than the alternative which\n  // is to pass those values around in every call.\n  // The following attributes are used to accumulate text and styles\n  // as we are walking the HTML node tree.\n  // Describes the future ContentState as a tree of content blocks\n  // The content blocks generated from the blockConfigs\n  // Entity map use to store links and images found in the HTML nodes\n  // Map HTML tags to draftjs block types and disambiguation function\n  function ContentBlocksBuilder(blockTypeMap, disambiguate) {\n    _defineProperty(this, \"characterList\", List());\n\n    _defineProperty(this, \"currentBlockType\", 'unstyled');\n\n    _defineProperty(this, \"currentDepth\", 0);\n\n    _defineProperty(this, \"currentEntity\", null);\n\n    _defineProperty(this, \"currentText\", '');\n\n    _defineProperty(this, \"wrapper\", null);\n\n    _defineProperty(this, \"blockConfigs\", []);\n\n    _defineProperty(this, \"contentBlocks\", []);\n\n    _defineProperty(this, \"entityMap\", DraftEntity);\n\n    _defineProperty(this, \"blockTypeMap\", void 0);\n\n    _defineProperty(this, \"disambiguate\", void 0);\n\n    this.clear();\n    this.blockTypeMap = blockTypeMap;\n    this.disambiguate = disambiguate;\n  }\n  /**\n   * Clear the internal state of the ContentBlocksBuilder\n   */\n\n\n  var _proto = ContentBlocksBuilder.prototype;\n\n  _proto.clear = function clear() {\n    this.characterList = List();\n    this.blockConfigs = [];\n    this.currentBlockType = 'unstyled';\n    this.currentDepth = 0;\n    this.currentEntity = null;\n    this.currentText = '';\n    this.entityMap = DraftEntity;\n    this.wrapper = null;\n    this.contentBlocks = [];\n  }\n  /**\n   * Add an HTMLElement to the ContentBlocksBuilder\n   */\n  ;\n\n  _proto.addDOMNode = function addDOMNode(node) {\n    var _this$blockConfigs;\n\n    this.contentBlocks = [];\n    this.currentDepth = 0; // Converts the HTML node to block config\n\n    (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([node], OrderedSet())); // There might be some left over text in the builder's\n    // internal state, if so make a ContentBlock out of it.\n\n\n    this._trimCurrentText();\n\n    if (this.currentText !== '') {\n      this.blockConfigs.push(this._makeBlockConfig());\n    } // for chaining\n\n\n    return this;\n  }\n  /**\n   * Return the ContentBlocks and the EntityMap that corresponds\n   * to the previously added HTML nodes.\n   */\n  ;\n\n  _proto.getContentBlocks = function getContentBlocks() {\n    if (this.contentBlocks.length === 0) {\n      if (experimentalTreeDataSupport) {\n        this._toContentBlocks(this.blockConfigs);\n      } else {\n        this._toFlatContentBlocks(this.blockConfigs);\n      }\n    }\n\n    return {\n      contentBlocks: this.contentBlocks,\n      entityMap: this.entityMap\n    };\n  } // ***********************************WARNING******************************\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Generate a new ContentBlockConfig out of the current internal state\n   * of the builder, then clears the internal state.\n   */\n  ;\n\n  _proto._makeBlockConfig = function _makeBlockConfig() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var key = config.key || generateRandomKey();\n\n    var block = _objectSpread({\n      key: key,\n      type: this.currentBlockType,\n      text: this.currentText,\n      characterList: this.characterList,\n      depth: this.currentDepth,\n      parent: null,\n      children: List(),\n      prevSibling: null,\n      nextSibling: null,\n      childConfigs: []\n    }, config);\n\n    this.characterList = List();\n    this.currentBlockType = 'unstyled';\n    this.currentText = '';\n    return block;\n  }\n  /**\n   * Converts an array of HTML elements to a multi-root tree of content\n   * block configs. Some text content may be left in the builders internal\n   * state to enable chaining sucessive calls.\n   */\n  ;\n\n  _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\n    var blockConfigs = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var nodeName = node.nodeName.toLowerCase();\n\n      if (nodeName === 'body' || isListNode(nodeName)) {\n        // body, ol and ul are 'block' type nodes so create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        } // body, ol and ul nodes are ignored, but their children are inlined in\n        // the parent block config.\n\n\n        var wasCurrentDepth = this.currentDepth;\n        var wasWrapper = this.wrapper;\n\n        if (isListNode(nodeName)) {\n          this.wrapper = nodeName;\n\n          if (isListNode(wasWrapper)) {\n            this.currentDepth++;\n          }\n        }\n\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n        this.currentDepth = wasCurrentDepth;\n        this.wrapper = wasWrapper;\n        continue;\n      }\n\n      var blockType = this.blockTypeMap.get(nodeName);\n\n      if (blockType !== undefined) {\n        // 'block' type node means we need to create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        }\n\n        var _wasCurrentDepth = this.currentDepth;\n        var _wasWrapper = this.wrapper;\n        this.wrapper = nodeName === 'pre' ? 'pre' : this.wrapper;\n\n        if (typeof blockType !== 'string') {\n          blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || 'unstyled';\n        }\n\n        if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === 'unordered-list-item' || blockType === 'ordered-list-item')) {\n          var htmlElement = node;\n          this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\n        }\n\n        var key = generateRandomKey();\n\n        var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\n\n        this._trimCurrentText();\n\n        blockConfigs.push(this._makeBlockConfig({\n          key: key,\n          childConfigs: childConfigs,\n          type: blockType\n        }));\n        this.currentDepth = _wasCurrentDepth;\n        this.wrapper = _wasWrapper;\n        continue;\n      }\n\n      if (nodeName === '#text') {\n        this._addTextNode(node, style);\n\n        continue;\n      }\n\n      if (nodeName === 'br') {\n        this._addBreakNode(node, style);\n\n        continue;\n      }\n\n      if (isValidImage(node)) {\n        this._addImgNode(node, style);\n\n        continue;\n      }\n\n      if (isValidAnchor(node)) {\n        this._addAnchorNode(node, blockConfigs, style);\n\n        continue;\n      }\n\n      var newStyle = style;\n\n      if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\n        newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\n      }\n\n      newStyle = styleFromNodeAttributes(node, newStyle);\n      var inlineStyle = detectInlineStyle(node);\n\n      if (inlineStyle != null) {\n        newStyle = newStyle.add(inlineStyle);\n      }\n\n      blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\n    }\n\n    return blockConfigs;\n  }\n  /**\n   * Append a string of text to the internal buffer.\n   */\n  ;\n\n  _proto._appendText = function _appendText(text, style) {\n    var _this$characterList;\n\n    this.currentText += text;\n    var characterMetadata = CharacterMetadata.create({\n      style: style,\n      entity: this.currentEntity\n    });\n    this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\n  }\n  /**\n   * Trim the text in the internal buffer.\n   */\n  ;\n\n  _proto._trimCurrentText = function _trimCurrentText() {\n    var l = this.currentText.length;\n    var begin = l - this.currentText.trimLeft().length;\n    var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\n\n    var entity = this.characterList.findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\n    entity = this.characterList.reverse().findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\n\n    if (begin > end) {\n      this.currentText = '';\n      this.characterList = List();\n    } else {\n      this.currentText = this.currentText.slice(begin, end);\n      this.characterList = this.characterList.slice(begin, end);\n    }\n  }\n  /**\n   * Add the content of an HTML text node to the internal state\n   */\n  ;\n\n  _proto._addTextNode = function _addTextNode(node, style) {\n    var text = node.textContent;\n    var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\n    // normalize to a single space.\n\n    if (trimmedText === '' && this.wrapper !== 'pre') {\n      text = ' ';\n    }\n\n    if (this.wrapper !== 'pre') {\n      // Trim leading line feed, which is invisible in HTML\n      text = text.replace(REGEX_LEADING_LF, ''); // Can't use empty string because MSWord\n\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    this._appendText(text, style);\n  };\n\n  _proto._addBreakNode = function _addBreakNode(node, style) {\n    if (!isHTMLBRElement(node)) {\n      return;\n    }\n\n    this._appendText('\\n', style);\n  }\n  /**\n   * Add the content of an HTML img node to the internal state\n   */\n  ;\n\n  _proto._addImgNode = function _addImgNode(node, style) {\n    if (!isHTMLImageElement(node)) {\n      return;\n    }\n\n    var image = node;\n    var entityConfig = {};\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    }); // TODO: T15530363 update this when we remove DraftEntity entirely\n\n    this.currentEntity = this.entityMap.__create('IMAGE', 'IMMUTABLE', entityConfig); // The child text node cannot just have a space or return as content (since\n    // we strip those out), unless the image is for presentation only.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n\n    if (gkx('draftjs_fix_paste_for_img')) {\n      if (image.getAttribute('role') !== 'presentation') {\n        this._appendText(\"\\uD83D\\uDCF7\", style);\n      }\n    } else {\n      this._appendText(\"\\uD83D\\uDCF7\", style);\n    }\n\n    this.currentEntity = null;\n  }\n  /**\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\n   * (if any) are converted to Block Configs and appended to the provided\n   * blockConfig array.\n   */\n  ;\n\n  _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\n    // The check has already been made by isValidAnchor but\n    // we have to do it again to keep flow happy.\n    if (!isHTMLAnchorElement(node)) {\n      return;\n    }\n\n    var anchor = node;\n    var entityConfig = {};\n    anchorAttr.forEach(function (attr) {\n      var anchorAttribute = anchor.getAttribute(attr);\n\n      if (anchorAttribute) {\n        entityConfig[attr] = anchorAttribute;\n      }\n    });\n    entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\n\n    this.currentEntity = this.entityMap.__create('LINK', 'MUTABLE', entityConfig || {});\n    blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n    this.currentEntity = null;\n  }\n  /**\n   * Walk the BlockConfig tree, compute parent/children/siblings,\n   * and generate the corresponding ContentBlockNode\n   */\n  ;\n\n  _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var l = blockConfigs.length - 1;\n\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      config.parent = parent;\n      config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\n      config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\n      config.children = List(config.childConfigs.map(function (child) {\n        return child.key;\n      }));\n      this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\n\n      this._toContentBlocks(config.childConfigs, config.key);\n    }\n  }\n  /**\n   * Remove 'useless' container nodes from the block config hierarchy, by\n   * replacing them with their children.\n   */\n  ;\n\n  _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\n    var _this = this;\n\n    var hoisted = List(blockConfigs).flatMap(function (blockConfig) {\n      // Don't mess with useful blocks\n      if (blockConfig.type !== 'unstyled' || blockConfig.text !== '') {\n        return [blockConfig];\n      }\n\n      return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\n    });\n    return hoisted;\n  } // ***********************************************************************\n  // The two methods below are used for backward compatibility when\n  // experimentalTreeDataSupport is disabled.\n\n  /**\n   * Same as _toContentBlocks but replaces nested blocks by their\n   * text content.\n   */\n  ;\n\n  _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\n    var _this2 = this;\n\n    var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\n\n    cleanConfigs.forEach(function (config) {\n      var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs),\n          text = _this2$_extractTextFr.text,\n          characterList = _this2$_extractTextFr.characterList;\n\n      _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\n        text: config.text + text,\n        characterList: config.characterList.concat(characterList)\n      })));\n    });\n  }\n  /**\n   * Extract the text and the associated inline styles form an\n   * array of content block configs.\n   */\n  ;\n\n  _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\n    var l = blockConfigs.length - 1;\n    var text = '';\n    var characterList = List();\n\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      text += config.text;\n      characterList = characterList.concat(config.characterList);\n\n      if (text !== '' && config.type !== 'unstyled') {\n        text += '\\n';\n        characterList = characterList.push(characterList.last());\n      }\n\n      var children = this._extractTextFromBlockConfigs(config.childConfigs);\n\n      text += children.text;\n      characterList = characterList.concat(children.characterList);\n    }\n\n    return {\n      text: text,\n      characterList: characterList\n    };\n  };\n\n  return ContentBlocksBuilder;\n}();\n/**\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\n * suitable to initialize the internal state of a Draftjs component.\n */\n\n\nvar convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap; // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  // Remove funky characters from the HTML string\n\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, ''); // Build a DOM tree out of the HTML string\n\n  var safeBody = DOMBuilder(html);\n\n  if (!safeBody) {\n    return null;\n  } // Build a BlockTypeMap out of the BlockRenderMap\n\n\n  var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\n  // uses multiple block types for the same html tag.\n\n  var disambiguate = function disambiguate(tag, wrapper) {\n    if (tag === 'li') {\n      return wrapper === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n    }\n\n    return null;\n  };\n\n  return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\n};\n\nmodule.exports = convertFromHTMLToContentBlocks;","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js"],"names":["_knownListItemDepthCl","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","CharacterMetadata","require","ContentBlock","ContentBlockNode","DefaultDraftBlockRenderMap","DraftEntity","URI","cx","generateRandomKey","getSafeBodyFromHTML","gkx","_require","List","Map","OrderedSet","isHTMLAnchorElement","isHTMLBRElement","isHTMLElement","isHTMLImageElement","experimentalTreeDataSupport","NBSP","SPACE","REGEX_CR","RegExp","REGEX_LF","REGEX_LEADING_LF","REGEX_NBSP","REGEX_CARRIAGE","REGEX_ZWS","boldValues","notBoldValues","anchorAttr","imgAttr","knownListItemDepthClasses","HTMLTagToRawInlineStyleMap","b","code","del","em","s","strike","strong","u","mark","buildBlockTypeMap","blockRenderMap","blockTypeMap","mapKeys","blockType","desc","elements","element","aliasedElements","undefined","push","apply","detectInlineStyle","node","style","fontFamily","includes","getListItemDepth","depth","some","depthClass","classList","contains","isValidAnchor","anchorNode","href","protocol","_","isValidImage","imageNode","attributes","getNamedItem","styleFromNodeAttributes","htmlElement","fontWeight","fontStyle","textDecoration","withMutations","indexOf","add","remove","isListNode","nodeName","ContentBlocksBuilder","disambiguate","clear","_proto","prototype","characterList","blockConfigs","currentBlockType","currentDepth","currentEntity","currentText","entityMap","wrapper","contentBlocks","addDOMNode","_this$blockConfigs","_toBlockConfigs","_trimCurrentText","_makeBlockConfig","getContentBlocks","_toContentBlocks","_toFlatContentBlocks","config","block","type","text","parent","children","prevSibling","nextSibling","childConfigs","nodes","toLowerCase","wasCurrentDepth","wasWrapper","Array","from","childNodes","get","_wasCurrentDepth","_wasWrapper","_addTextNode","_addBreakNode","_addImgNode","_addAnchorNode","newStyle","has","inlineStyle","_appendText","_this$characterList","characterMetadata","create","entity","fill","l","begin","trimLeft","end","trimRight","findEntry","getEntity","Math","min","reverse","max","slice","textContent","trimmedText","trim","replace","image","entityConfig","attr","imageAttribute","getAttribute","__create","anchor","anchorAttribute","url","toString","map","child","_hoistContainersInBlockConfigs","_this","hoisted","flatMap","blockConfig","_this2","cleanConfigs","_this2$_extractTextFr","_extractTextFromBlockConfigs","last","convertFromHTMLToContentBlocks","html","DOMBuilder","safeBody","tag","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar _knownListItemDepthCl;\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DefaultDraftBlockRenderMap = require(\"./DefaultDraftBlockRenderMap\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar URI = require(\"fbjs/lib/URI\");\n\nvar cx = require(\"fbjs/lib/cx\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar getSafeBodyFromHTML = require(\"./getSafeBodyFromHTML\");\n\nvar gkx = require(\"./gkx\");\n\nvar _require = require(\"immutable\"),\n    List = _require.List,\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet;\n\nvar isHTMLAnchorElement = require(\"./isHTMLAnchorElement\");\n\nvar isHTMLBRElement = require(\"./isHTMLBRElement\");\n\nvar isHTMLElement = require(\"./isHTMLElement\");\n\nvar isHTMLImageElement = require(\"./isHTMLImageElement\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // used for replacing characters in HTML\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_LEADING_LF = new RegExp('^\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g'); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', 'normal', '100', '200', '300', '400'];\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\nvar HTMLTagToRawInlineStyleMap = Map({\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE',\n  mark: 'HIGHLIGHT'\n});\n\n/**\n * Build a mapping from HTML tags to draftjs block types\n * out of a BlockRenderMap.\n *\n * The BlockTypeMap for the default BlockRenderMap looks like this:\n *   Map({\n *     h1: 'header-one',\n *     h2: 'header-two',\n *     h3: 'header-three',\n *     h4: 'header-four',\n *     h5: 'header-five',\n *     h6: 'header-six',\n *     blockquote: 'blockquote',\n *     figure: 'atomic',\n *     pre: ['code-block'],\n *     div: 'unstyled',\n *     p: 'unstyled',\n *     li: ['ordered-list-item', 'unordered-list-item'],\n *   })\n */\nvar buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\n  var blockTypeMap = {};\n  blockRenderMap.mapKeys(function (blockType, desc) {\n    var elements = [desc.element];\n\n    if (desc.aliasedElements !== undefined) {\n      elements.push.apply(elements, desc.aliasedElements);\n    }\n\n    elements.forEach(function (element) {\n      if (blockTypeMap[element] === undefined) {\n        blockTypeMap[element] = blockType;\n      } else if (typeof blockTypeMap[element] === 'string') {\n        blockTypeMap[element] = [blockTypeMap[element], blockType];\n      } else {\n        blockTypeMap[element].push(blockType);\n      }\n    });\n  });\n  return Map(blockTypeMap);\n};\n\nvar detectInlineStyle = function detectInlineStyle(node) {\n  if (isHTMLElement(node)) {\n    var element = node; // Currently only used to detect preformatted inline code\n\n    if (element.style.fontFamily.includes('monospace')) {\n      return 'CODE';\n    }\n  }\n\n  return null;\n};\n/**\n * If we're pasting from one DraftEditor to another we can check to see if\n * existing list item depth classes are being used and preserve this style\n */\n\n\nvar getListItemDepth = function getListItemDepth(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\n    if (node.classList.contains(depthClass)) {\n      depth = knownListItemDepthClasses[depthClass];\n    }\n  });\n  return depth;\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible link.\n */\n\n\nvar isValidAnchor = function isValidAnchor(node) {\n  if (!isHTMLAnchorElement(node)) {\n    return false;\n  }\n\n  var anchorNode = node;\n\n  if (!anchorNode.href || anchorNode.protocol !== 'http:' && anchorNode.protocol !== 'https:' && anchorNode.protocol !== 'mailto:' && anchorNode.protocol !== 'tel:') {\n    return false;\n  }\n\n  try {\n    // Just checking whether we can actually create a URI\n    var _ = new URI(anchorNode.href);\n\n    return true; // We need our catch statements to have arguments, else\n    // UglifyJS (which we use for our OSS builds) will crash.\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\n  } catch (_) {\n    return false;\n  }\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible image.\n */\n\n\nvar isValidImage = function isValidImage(node) {\n  if (!isHTMLImageElement(node)) {\n    return false;\n  }\n\n  var imageNode = node;\n  return !!(imageNode.attributes.getNamedItem('src') && imageNode.attributes.getNamedItem('src').value);\n};\n/**\n * Try to guess the inline style of an HTML element based on its css\n * styles (font-weight, font-style and text-decoration).\n */\n\n\nvar styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\n  if (!isHTMLElement(node)) {\n    return style;\n  }\n\n  var htmlElement = node;\n  var fontWeight = htmlElement.style.fontWeight;\n  var fontStyle = htmlElement.style.fontStyle;\n  var textDecoration = htmlElement.style.textDecoration;\n  return style.withMutations(function (style) {\n    if (boldValues.indexOf(fontWeight) >= 0) {\n      style.add('BOLD');\n    } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n      style.remove('BOLD');\n    }\n\n    if (fontStyle === 'italic') {\n      style.add('ITALIC');\n    } else if (fontStyle === 'normal') {\n      style.remove('ITALIC');\n    }\n\n    if (textDecoration === 'underline') {\n      style.add('UNDERLINE');\n    }\n\n    if (textDecoration === 'line-through') {\n      style.add('STRIKETHROUGH');\n    }\n\n    if (textDecoration === 'none') {\n      style.remove('UNDERLINE');\n      style.remove('STRIKETHROUGH');\n    }\n  });\n};\n/**\n * Determine if a nodeName is a list type, 'ul' or 'ol'\n */\n\n\nvar isListNode = function isListNode(nodeName) {\n  return nodeName === 'ul' || nodeName === 'ol';\n};\n/**\n *  ContentBlockConfig is a mutable data structure that holds all\n *  the information required to build a ContentBlock and an array of\n *  all the child nodes (childConfigs).\n *  It is being used a temporary data structure by the\n *  ContentBlocksBuilder class.\n */\n\n\n/**\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\n * out of one (or several) HTMLElement(s).\n *\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\n * by walking through the HTML nodes and their children, then it walks the\n * ContentBlockConfigs tree to compute parents/siblings and create\n * the actual ContentBlocks.\n *\n * Typical usage is:\n *     new ContentBlocksBuilder()\n *        .addDOMNode(someHTMLNode)\n *        .addDOMNode(someOtherHTMLNode)\n *       .getContentBlocks();\n *\n */\nvar ContentBlocksBuilder = /*#__PURE__*/function () {\n  // Most of the method in the class depend on the state of the content builder\n  // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\n  // be confusing at first, it made the code simpler than the alternative which\n  // is to pass those values around in every call.\n  // The following attributes are used to accumulate text and styles\n  // as we are walking the HTML node tree.\n  // Describes the future ContentState as a tree of content blocks\n  // The content blocks generated from the blockConfigs\n  // Entity map use to store links and images found in the HTML nodes\n  // Map HTML tags to draftjs block types and disambiguation function\n  function ContentBlocksBuilder(blockTypeMap, disambiguate) {\n    _defineProperty(this, \"characterList\", List());\n\n    _defineProperty(this, \"currentBlockType\", 'unstyled');\n\n    _defineProperty(this, \"currentDepth\", 0);\n\n    _defineProperty(this, \"currentEntity\", null);\n\n    _defineProperty(this, \"currentText\", '');\n\n    _defineProperty(this, \"wrapper\", null);\n\n    _defineProperty(this, \"blockConfigs\", []);\n\n    _defineProperty(this, \"contentBlocks\", []);\n\n    _defineProperty(this, \"entityMap\", DraftEntity);\n\n    _defineProperty(this, \"blockTypeMap\", void 0);\n\n    _defineProperty(this, \"disambiguate\", void 0);\n\n    this.clear();\n    this.blockTypeMap = blockTypeMap;\n    this.disambiguate = disambiguate;\n  }\n  /**\n   * Clear the internal state of the ContentBlocksBuilder\n   */\n\n\n  var _proto = ContentBlocksBuilder.prototype;\n\n  _proto.clear = function clear() {\n    this.characterList = List();\n    this.blockConfigs = [];\n    this.currentBlockType = 'unstyled';\n    this.currentDepth = 0;\n    this.currentEntity = null;\n    this.currentText = '';\n    this.entityMap = DraftEntity;\n    this.wrapper = null;\n    this.contentBlocks = [];\n  }\n  /**\n   * Add an HTMLElement to the ContentBlocksBuilder\n   */\n  ;\n\n  _proto.addDOMNode = function addDOMNode(node) {\n    var _this$blockConfigs;\n\n    this.contentBlocks = [];\n    this.currentDepth = 0; // Converts the HTML node to block config\n\n    (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([node], OrderedSet())); // There might be some left over text in the builder's\n    // internal state, if so make a ContentBlock out of it.\n\n\n    this._trimCurrentText();\n\n    if (this.currentText !== '') {\n      this.blockConfigs.push(this._makeBlockConfig());\n    } // for chaining\n\n\n    return this;\n  }\n  /**\n   * Return the ContentBlocks and the EntityMap that corresponds\n   * to the previously added HTML nodes.\n   */\n  ;\n\n  _proto.getContentBlocks = function getContentBlocks() {\n    if (this.contentBlocks.length === 0) {\n      if (experimentalTreeDataSupport) {\n        this._toContentBlocks(this.blockConfigs);\n      } else {\n        this._toFlatContentBlocks(this.blockConfigs);\n      }\n    }\n\n    return {\n      contentBlocks: this.contentBlocks,\n      entityMap: this.entityMap\n    };\n  } // ***********************************WARNING******************************\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Generate a new ContentBlockConfig out of the current internal state\n   * of the builder, then clears the internal state.\n   */\n  ;\n\n  _proto._makeBlockConfig = function _makeBlockConfig() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var key = config.key || generateRandomKey();\n\n    var block = _objectSpread({\n      key: key,\n      type: this.currentBlockType,\n      text: this.currentText,\n      characterList: this.characterList,\n      depth: this.currentDepth,\n      parent: null,\n      children: List(),\n      prevSibling: null,\n      nextSibling: null,\n      childConfigs: []\n    }, config);\n\n    this.characterList = List();\n    this.currentBlockType = 'unstyled';\n    this.currentText = '';\n    return block;\n  }\n  /**\n   * Converts an array of HTML elements to a multi-root tree of content\n   * block configs. Some text content may be left in the builders internal\n   * state to enable chaining sucessive calls.\n   */\n  ;\n\n  _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\n    var blockConfigs = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var nodeName = node.nodeName.toLowerCase();\n\n      if (nodeName === 'body' || isListNode(nodeName)) {\n        // body, ol and ul are 'block' type nodes so create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        } // body, ol and ul nodes are ignored, but their children are inlined in\n        // the parent block config.\n\n\n        var wasCurrentDepth = this.currentDepth;\n        var wasWrapper = this.wrapper;\n\n        if (isListNode(nodeName)) {\n          this.wrapper = nodeName;\n\n          if (isListNode(wasWrapper)) {\n            this.currentDepth++;\n          }\n        }\n\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n        this.currentDepth = wasCurrentDepth;\n        this.wrapper = wasWrapper;\n        continue;\n      }\n\n      var blockType = this.blockTypeMap.get(nodeName);\n\n      if (blockType !== undefined) {\n        // 'block' type node means we need to create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        }\n\n        var _wasCurrentDepth = this.currentDepth;\n        var _wasWrapper = this.wrapper;\n        this.wrapper = nodeName === 'pre' ? 'pre' : this.wrapper;\n\n        if (typeof blockType !== 'string') {\n          blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || 'unstyled';\n        }\n\n        if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === 'unordered-list-item' || blockType === 'ordered-list-item')) {\n          var htmlElement = node;\n          this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\n        }\n\n        var key = generateRandomKey();\n\n        var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\n\n        this._trimCurrentText();\n\n        blockConfigs.push(this._makeBlockConfig({\n          key: key,\n          childConfigs: childConfigs,\n          type: blockType\n        }));\n        this.currentDepth = _wasCurrentDepth;\n        this.wrapper = _wasWrapper;\n        continue;\n      }\n\n      if (nodeName === '#text') {\n        this._addTextNode(node, style);\n\n        continue;\n      }\n\n      if (nodeName === 'br') {\n        this._addBreakNode(node, style);\n\n        continue;\n      }\n\n      if (isValidImage(node)) {\n        this._addImgNode(node, style);\n\n        continue;\n      }\n\n      if (isValidAnchor(node)) {\n        this._addAnchorNode(node, blockConfigs, style);\n\n        continue;\n      }\n\n      var newStyle = style;\n\n      if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\n        newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\n      }\n\n      newStyle = styleFromNodeAttributes(node, newStyle);\n      var inlineStyle = detectInlineStyle(node);\n\n      if (inlineStyle != null) {\n        newStyle = newStyle.add(inlineStyle);\n      }\n\n      blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\n    }\n\n    return blockConfigs;\n  }\n  /**\n   * Append a string of text to the internal buffer.\n   */\n  ;\n\n  _proto._appendText = function _appendText(text, style) {\n    var _this$characterList;\n\n    this.currentText += text;\n    var characterMetadata = CharacterMetadata.create({\n      style: style,\n      entity: this.currentEntity\n    });\n    this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\n  }\n  /**\n   * Trim the text in the internal buffer.\n   */\n  ;\n\n  _proto._trimCurrentText = function _trimCurrentText() {\n    var l = this.currentText.length;\n    var begin = l - this.currentText.trimLeft().length;\n    var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\n\n    var entity = this.characterList.findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\n    entity = this.characterList.reverse().findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\n\n    if (begin > end) {\n      this.currentText = '';\n      this.characterList = List();\n    } else {\n      this.currentText = this.currentText.slice(begin, end);\n      this.characterList = this.characterList.slice(begin, end);\n    }\n  }\n  /**\n   * Add the content of an HTML text node to the internal state\n   */\n  ;\n\n  _proto._addTextNode = function _addTextNode(node, style) {\n    var text = node.textContent;\n    var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\n    // normalize to a single space.\n\n    if (trimmedText === '' && this.wrapper !== 'pre') {\n      text = ' ';\n    }\n\n    if (this.wrapper !== 'pre') {\n      // Trim leading line feed, which is invisible in HTML\n      text = text.replace(REGEX_LEADING_LF, ''); // Can't use empty string because MSWord\n\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    this._appendText(text, style);\n  };\n\n  _proto._addBreakNode = function _addBreakNode(node, style) {\n    if (!isHTMLBRElement(node)) {\n      return;\n    }\n\n    this._appendText('\\n', style);\n  }\n  /**\n   * Add the content of an HTML img node to the internal state\n   */\n  ;\n\n  _proto._addImgNode = function _addImgNode(node, style) {\n    if (!isHTMLImageElement(node)) {\n      return;\n    }\n\n    var image = node;\n    var entityConfig = {};\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    }); // TODO: T15530363 update this when we remove DraftEntity entirely\n\n    this.currentEntity = this.entityMap.__create('IMAGE', 'IMMUTABLE', entityConfig); // The child text node cannot just have a space or return as content (since\n    // we strip those out), unless the image is for presentation only.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n\n    if (gkx('draftjs_fix_paste_for_img')) {\n      if (image.getAttribute('role') !== 'presentation') {\n        this._appendText(\"\\uD83D\\uDCF7\", style);\n      }\n    } else {\n      this._appendText(\"\\uD83D\\uDCF7\", style);\n    }\n\n    this.currentEntity = null;\n  }\n  /**\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\n   * (if any) are converted to Block Configs and appended to the provided\n   * blockConfig array.\n   */\n  ;\n\n  _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\n    // The check has already been made by isValidAnchor but\n    // we have to do it again to keep flow happy.\n    if (!isHTMLAnchorElement(node)) {\n      return;\n    }\n\n    var anchor = node;\n    var entityConfig = {};\n    anchorAttr.forEach(function (attr) {\n      var anchorAttribute = anchor.getAttribute(attr);\n\n      if (anchorAttribute) {\n        entityConfig[attr] = anchorAttribute;\n      }\n    });\n    entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\n\n    this.currentEntity = this.entityMap.__create('LINK', 'MUTABLE', entityConfig || {});\n    blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n    this.currentEntity = null;\n  }\n  /**\n   * Walk the BlockConfig tree, compute parent/children/siblings,\n   * and generate the corresponding ContentBlockNode\n   */\n  ;\n\n  _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var l = blockConfigs.length - 1;\n\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      config.parent = parent;\n      config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\n      config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\n      config.children = List(config.childConfigs.map(function (child) {\n        return child.key;\n      }));\n      this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\n\n      this._toContentBlocks(config.childConfigs, config.key);\n    }\n  }\n  /**\n   * Remove 'useless' container nodes from the block config hierarchy, by\n   * replacing them with their children.\n   */\n  ;\n\n  _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\n    var _this = this;\n\n    var hoisted = List(blockConfigs).flatMap(function (blockConfig) {\n      // Don't mess with useful blocks\n      if (blockConfig.type !== 'unstyled' || blockConfig.text !== '') {\n        return [blockConfig];\n      }\n\n      return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\n    });\n    return hoisted;\n  } // ***********************************************************************\n  // The two methods below are used for backward compatibility when\n  // experimentalTreeDataSupport is disabled.\n\n  /**\n   * Same as _toContentBlocks but replaces nested blocks by their\n   * text content.\n   */\n  ;\n\n  _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\n    var _this2 = this;\n\n    var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\n\n    cleanConfigs.forEach(function (config) {\n      var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs),\n          text = _this2$_extractTextFr.text,\n          characterList = _this2$_extractTextFr.characterList;\n\n      _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\n        text: config.text + text,\n        characterList: config.characterList.concat(characterList)\n      })));\n    });\n  }\n  /**\n   * Extract the text and the associated inline styles form an\n   * array of content block configs.\n   */\n  ;\n\n  _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\n    var l = blockConfigs.length - 1;\n    var text = '';\n    var characterList = List();\n\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      text += config.text;\n      characterList = characterList.concat(config.characterList);\n\n      if (text !== '' && config.type !== 'unstyled') {\n        text += '\\n';\n        characterList = characterList.push(characterList.last());\n      }\n\n      var children = this._extractTextFromBlockConfigs(config.childConfigs);\n\n      text += children.text;\n      characterList = characterList.concat(children.characterList);\n    }\n\n    return {\n      text: text,\n      characterList: characterList\n    };\n  };\n\n  return ContentBlocksBuilder;\n}();\n/**\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\n * suitable to initialize the internal state of a Draftjs component.\n */\n\n\nvar convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  // Remove funky characters from the HTML string\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, ''); // Build a DOM tree out of the HTML string\n\n  var safeBody = DOMBuilder(html);\n\n  if (!safeBody) {\n    return null;\n  } // Build a BlockTypeMap out of the BlockRenderMap\n\n\n  var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\n  // uses multiple block types for the same html tag.\n\n  var disambiguate = function disambiguate(tag, wrapper) {\n    if (tag === 'li') {\n      return wrapper === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n    }\n\n    return null;\n  };\n\n  return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\n};\n\nmodule.exports = convertFromHTMLToContentBlocks;"]},"metadata":{},"sourceType":"script"}