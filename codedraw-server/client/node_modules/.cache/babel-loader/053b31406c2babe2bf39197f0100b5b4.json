{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\n\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar createCharacterList = require(\"./createCharacterList\");\n\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\n\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityMap)\n  };\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread({}, range, {\n      key: entityMap[range.key]\n    });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread({}, block, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread({}, block, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n\n      var _index = siblings.indexOf(node.key);\n\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n  }\n\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n\n  return blockMap;\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n\n    entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n  });\n  return entityMap;\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n\n  var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: entityMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/draft-js/lib/convertFromRawToDraftState.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","ContentBlock","require","ContentBlockNode","ContentState","DraftEntity","DraftTreeAdapter","DraftTreeInvariants","SelectionState","createCharacterList","decodeEntityRanges","decodeInlineStyleRanges","generateRandomKey","gkx","Immutable","invariant","experimentalTreeDataSupport","List","Map","OrderedMap","decodeBlockNodeConfig","block","entityMap","type","data","text","depth","blockNodeConfig","characterList","decodeCharacterList","rawEntityRanges","entityRanges","rawInlineStyleRanges","inlineStyleRanges","range","hasOwnProperty","map","addKeyIfMissing","updateNodeStack","stack","nodes","parentRef","nodesWithParentRef","reverse","decodeContentBlockNodes","blocks","reduce","blockMap","index","Array","isArray","children","process","env","NODE_ENV","contentBlockNode","prevSibling","nextSibling","child","set","getKey","node","pop","siblings","getChildKeys","_index","indexOf","isValidBlock","_children","_contentBlockNode","parent","get","size","decodeContentBlocks","contentBlock","decodeRawBlocks","rawState","isTreeRawBlock","find","rawBlocks","fromRawStateToRawTreeState","fromRawTreeStateToRawState","isValidTree","decodeRawEntityMap","rawEntityMap","rawEntityKey","_rawEntityMap$rawEnti","mutability","__create","convertFromRawToDraftState","selectionState","isEmpty","createEmpty","first","selectionBefore","selectionAfter","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\n\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar createCharacterList = require(\"./createCharacterList\");\n\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\n\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityMap)\n  };\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread({}, range, {\n      key: entityMap[range.key]\n    });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread({}, block, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread({}, block, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n\n      var _index = siblings.indexOf(node.key);\n\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n  }\n\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n\n  return blockMap;\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n\n    entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n  });\n  return entityMap;\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n\n  var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: entityMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;"]},"metadata":{},"sourceType":"script"}