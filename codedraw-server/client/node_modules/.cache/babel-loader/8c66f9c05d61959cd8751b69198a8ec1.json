{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"octave\", function () {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n    var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n    var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n    var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n    var builtins = wordRegexp(['error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos', 'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones', 'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov', 'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot', 'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str', 'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember']);\n    var keywords = wordRegexp(['return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction', 'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events', 'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until', 'continue', 'pkg']); // tokenizers\n\n    function tokenTranspose(stream, state) {\n      if (!stream.sol() && stream.peek() === '\\'') {\n        stream.next();\n        state.tokenize = tokenBase;\n        return 'operator';\n      }\n\n      state.tokenize = tokenBase;\n      return tokenBase(stream, state);\n    }\n\n    function tokenComment(stream, state) {\n      if (stream.match(/^.*%}/)) {\n        state.tokenize = tokenBase;\n        return 'comment';\n      }\n\n      ;\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    function tokenBase(stream, state) {\n      // whitespaces\n      if (stream.eatSpace()) return null; // Handle one line Comments\n\n      if (stream.match('%{')) {\n        state.tokenize = tokenComment;\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (stream.match(/^[%#]/)) {\n        stream.skipToEnd();\n        return 'comment';\n      } // Handle Number Literals\n\n\n      if (stream.match(/^[0-9\\.+-]/, false)) {\n        if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n          stream.tokenize = tokenBase;\n          return 'number';\n        }\n\n        ;\n\n        if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n          return 'number';\n        }\n\n        ;\n\n        if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n          return 'number';\n        }\n\n        ;\n      }\n\n      if (stream.match(wordRegexp(['nan', 'NaN', 'inf', 'Inf']))) {\n        return 'number';\n      }\n\n      ; // Handle Strings\n\n      var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);\n\n      if (m) {\n        return m[1] ? 'string' : \"string error\";\n      } // Handle words\n\n\n      if (stream.match(keywords)) {\n        return 'keyword';\n      }\n\n      ;\n\n      if (stream.match(builtins)) {\n        return 'builtin';\n      }\n\n      ;\n\n      if (stream.match(identifiers)) {\n        return 'variable';\n      }\n\n      ;\n\n      if (stream.match(singleOperators) || stream.match(doubleOperators)) {\n        return 'operator';\n      }\n\n      ;\n\n      if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {\n        return null;\n      }\n\n      ;\n\n      if (stream.match(expressionEnd)) {\n        state.tokenize = tokenTranspose;\n        return null;\n      }\n\n      ; // Handle non-detected items\n\n      stream.next();\n      return 'error';\n    }\n\n    ;\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        var style = state.tokenize(stream, state);\n\n        if (style === 'number' || style === 'variable') {\n          state.tokenize = tokenTranspose;\n        }\n\n        return style;\n      },\n      lineComment: '%',\n      fold: 'indent'\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/octave/octave.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","next","tokenize","tokenBase","tokenComment","match","skipToEnd","eatSpace","m","startState","token","style","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"octave\", function() {\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n  var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n  var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n  var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n  var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n  var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  var builtins = wordRegexp([\n    'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n    'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n    'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n    'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n    'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n    'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n    'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n  ]);\n\n  var keywords = wordRegexp([\n    'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n    'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n    'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n    'continue', 'pkg'\n  ]);\n\n\n  // tokenizers\n  function tokenTranspose(stream, state) {\n    if (!stream.sol() && stream.peek() === '\\'') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return 'operator';\n    }\n    state.tokenize = tokenBase;\n    return tokenBase(stream, state);\n  }\n\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^.*%}/)) {\n      state.tokenize = tokenBase;\n      return 'comment';\n    };\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  function tokenBase(stream, state) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match('%{')){\n      state.tokenize = tokenComment;\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (stream.match(/^[%#]/)){\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n        stream.tokenize = tokenBase;\n        return 'number'; };\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    }\n    if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n    // Handle Strings\n    var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n    if (m) { return m[1] ? 'string' : \"string error\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return 'keyword'; } ;\n    if (stream.match(builtins)) { return 'builtin'; } ;\n    if (stream.match(identifiers)) { return 'variable'; } ;\n\n    if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n    if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n    if (stream.match(expressionEnd)) {\n      state.tokenize = tokenTranspose;\n      return null;\n    };\n\n\n    // Handle non-detected items\n    stream.next();\n    return 'error';\n  };\n\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      if (style === 'number' || style === 'variable'){\n        state.tokenize = tokenTranspose;\n      }\n      return style;\n    },\n\n    lineComment: '%',\n\n    fold: 'indent'\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n\n});\n"]},"metadata":{},"sourceType":"script"}