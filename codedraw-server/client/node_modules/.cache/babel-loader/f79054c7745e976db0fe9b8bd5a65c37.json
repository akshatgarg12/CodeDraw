{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../../addon/mode/overlay\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function () {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\", \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\", \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\", \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\", \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\", \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n        filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\", \"default\", \"default_if_none\", \"dictsort\", \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\", \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\", \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\", \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\", \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\", \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\", \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\", \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\", \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\", \"unordered_list\", \"upper\", \"urlencode\", \"urlize\", \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n        operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n        wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\"); // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n\n    function tokenBase(stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      } // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n\n\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n\n      return null;\n    } // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n\n\n    function inString(delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n\n          var ch = stream.next(); // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n\n        return \"string\";\n      };\n    } // Apply Django template variable syntax highlighting\n\n\n    function inVariable(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        } // Dot followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      } // Attempt to match a pipe that precedes a filter\n\n\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        } // Pipe followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      } // Highlight properties\n\n\n      if (state.waitProperty) {\n        state.waitProperty = false;\n\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n\n          state.waitPipe = true; // A property can be followed by a filter\n\n          return \"property\";\n        }\n      } // Highlight filters\n\n\n      if (state.waitFilter) {\n        state.waitFilter = false;\n\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      } // Ignore all white spaces\n\n\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      } // Identify numbers\n\n\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      } // Identify strings\n\n\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      } // Attempt to find the variable\n\n\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n\n        return \"variable\";\n      } // If found closing tag reset\n\n\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      } // If nothing was found, advance to the next character\n\n\n      stream.next();\n      return \"null\";\n    }\n\n    function inTag(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        } // Dot followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      } // Attempt to match a pipe that precedes a filter\n\n\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        } // Pipe followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      } // Highlight properties\n\n\n      if (state.waitProperty) {\n        state.waitProperty = false;\n\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n\n          state.waitPipe = true; // A property can be followed by a filter\n\n          return \"property\";\n        }\n      } // Highlight filters\n\n\n      if (state.waitFilter) {\n        state.waitFilter = false;\n\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      } // Ignore all white spaces\n\n\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      } // Identify numbers\n\n\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      } // Identify strings\n\n\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      } // Attempt to match an operator\n\n\n      if (stream.match(operators)) {\n        return \"operator\";\n      } // Attempt to match a word operator\n\n\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      } // Attempt to match a keyword\n\n\n      var keywordMatch = stream.match(keywords);\n\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n\n        return \"keyword\";\n      } // Attempt to match a variable\n\n\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n\n        return \"variable\";\n      } // If found closing tag reset\n\n\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null; // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false; // Release the \"lock\"\n\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n\n        return \"tag\";\n      } // If nothing was found, advance to the next character\n\n\n      stream.next();\n      return \"null\";\n    } // Mark everything as comment inside the tag and the tag itself.\n\n\n    function inComment(stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase;else stream.skipToEnd();\n      return \"comment\";\n    } // Mark everything as a comment until the `blockcomment` tag closes.\n\n\n    function inBlockComment(stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n  CodeMirror.defineMode(\"django\", function (config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/django/django.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","filters","operators","wordOperators","RegExp","join","tokenBase","stream","state","match","tokenize","inVariable","inTag","inComment","next","inString","delimiter","previousTokenizer","escapeNext","eat","ch","waitDot","peek","waitProperty","Error","waitPipe","waitFilter","eatSpace","foundVariable","keywordMatch","blockCommentTag","inBlockComment","skipToEnd","startState","token","blockCommentStart","blockCommentEnd","config","htmlBase","getMode","djangoInner","overlayMode","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,EAAkCA,OAAO,CAAC,wBAAD,CAAzC,EACCA,OAAO,CAAC,0BAAD,CADR,CAAH,CADF,KAGK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,EAAyB,wBAAzB,EACC,0BADD,CAAD,EAC+BJ,GAD/B,CAAN,CADG,KAGA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CATD,EASG,UAASA,UAAT,EAAqB;AACtB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,cAAtB,EAAsC,YAAW;AAC/C,QAAIC,QAAQ,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,KAAtB,EAA6B,QAA7B,EAAuC,MAAvC,EAA+C,OAA/C,EAAwD,QAAxD,EAAkE,WAAlE,EACC,MADD,EACS,MADT,EACiB,MADjB,EACyB,OADzB,EACkC,IADlC,EACwC,MADxC,EACgD,OADhD,EACyD,IADzD,EAC+D,MAD/D,EACuE,QADvE,EAEC,MAFD,EAES,SAFT,EAEoB,SAFpB,EAE+B,SAF/B,EAE0C,SAF1C,EAEqD,YAFrD,EAEmE,YAFnE,EAGC,eAHD,EAGkB,SAHlB,EAG6B,SAH7B,EAGwC,MAHxC,EAGgD,SAHhD,EAG2D,YAH3D,EAIC,OAJD,EAIU,KAJV,EAIiB,QAJjB,EAI2B,OAJ3B,EAIoC,YAJpC,EAIkD,eAJlD,EAImE,KAJnE,EAKC,SALD,EAKY,OALZ,EAKqB,WALrB,EAKkC,cALlC,EAKkD,SALlD,EAK6D,OAL7D,EAKsE,OALtE,EAMC,YAND,EAMe,YANf,EAM6B,eAN7B,EAM8C,WAN9C,EAM2D,cAN3D,EAOC,KAPD,EAOQ,aAPR,EAOuB,UAPvB,EAOmC,aAPnC,EAOkD,YAPlD,CAAf;AAAA,QAQIC,OAAO,GAAG,CAAC,KAAD,EAAQ,YAAR,EAAsB,UAAtB,EAAkC,QAAlC,EAA4C,KAA5C,EAAmD,MAAnD,EACC,SADD,EACY,iBADZ,EAC+B,UAD/B,EAEC,kBAFD,EAEqB,aAFrB,EAEoC,QAFpC,EAE8C,UAF9C,EAGC,gBAHD,EAGmB,OAHnB,EAG4B,aAH5B,EAG2C,cAH3C,EAIC,WAJD,EAIc,WAJd,EAI2B,MAJ3B,EAImC,MAJnC,EAI2C,QAJ3C,EAKC,WALD,EAKc,YALd,EAK4B,cAL5B,EAK4C,aAL5C,EAMC,OAND,EAMU,OANV,EAMmB,WANnB,EAMgC,eANhC,EAMiD,WANjD,EAOC,QAPD,EAOW,QAPX,EAOqB,YAPrB,EAOmC,OAPnC,EAO4C,MAP5C,EAQC,SARD,EAQY,OARZ,EAQqB,SARrB,EAQgC,cARhC,EAQgD,WARhD,EASC,MATD,EASS,WATT,EASsB,WATtB,EASmC,OATnC,EAS4C,eAT5C,EAUC,oBAVD,EAUuB,eAVvB,EAUwC,oBAVxC,EAWC,gBAXD,EAWmB,OAXnB,EAW4B,WAX5B,EAWyC,QAXzC,EAYC,aAZD,EAYgB,WAZhB,EAY6B,UAZ7B,EAYyC,OAZzC,CARd;AAAA,QAqBIC,SAAS,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,EAAkB,GAAlB,EAAuB,IAAvB,EAA6B,IAA7B,CArBhB;AAAA,QAsBIC,aAAa,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,CAtBpB;AAwBAH,IAAAA,QAAQ,GAAG,IAAII,MAAJ,CAAW,UAAUJ,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAV,GAA+B,MAA1C,CAAX;AACAJ,IAAAA,OAAO,GAAG,IAAIG,MAAJ,CAAW,UAAUH,OAAO,CAACI,IAAR,CAAa,GAAb,CAAV,GAA8B,MAAzC,CAAV;AACAH,IAAAA,SAAS,GAAG,IAAIE,MAAJ,CAAW,UAAUF,SAAS,CAACG,IAAV,CAAe,GAAf,CAAV,GAAgC,MAA3C,CAAZ;AACAF,IAAAA,aAAa,GAAG,IAAIC,MAAJ,CAAW,UAAUD,aAAa,CAACE,IAAd,CAAmB,GAAnB,CAAV,GAAoC,MAA/C,CAAhB,CA5B+C,CA8B/C;AACA;AACA;;AACA,aAASC,SAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmC;AACjC;AACA,UAAID,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtBD,QAAAA,KAAK,CAACE,QAAN,GAAiBC,UAAjB;AACA,eAAO,KAAP;AACD,OAHD,MAGO,IAAIJ,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;AAC7BD,QAAAA,KAAK,CAACE,QAAN,GAAiBE,KAAjB;AACA,eAAO,KAAP;AACD,OAHM,MAGA,IAAIL,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;AAC7BD,QAAAA,KAAK,CAACE,QAAN,GAAiBG,SAAjB;AACA,eAAO,SAAP;AACD,OAXgC,CAajC;AACA;;;AACA,aAAON,MAAM,CAACO,IAAP,MAAiB,IAAjB,IAAyB,CAACP,MAAM,CAACE,KAAP,CAAa,SAAb,EAAwB,KAAxB,CAAjC,EAAiE,CAAE;;AACnE,aAAO,IAAP;AACD,KAlD8C,CAoD/C;AACA;AACA;;;AACA,aAASM,QAAT,CAAmBC,SAAnB,EAA8BC,iBAA9B,EAAiD;AAC/C,aAAO,UAAUV,MAAV,EAAkBC,KAAlB,EAAyB;AAC9B,YAAI,CAACA,KAAK,CAACU,UAAP,IAAqBX,MAAM,CAACY,GAAP,CAAWH,SAAX,CAAzB,EAAgD;AAC9CR,UAAAA,KAAK,CAACE,QAAN,GAAiBO,iBAAjB;AACD,SAFD,MAEO;AACL,cAAIT,KAAK,CAACU,UAAV,EAAsB;AACpBV,YAAAA,KAAK,CAACU,UAAN,GAAmB,KAAnB;AACD;;AAED,cAAIE,EAAE,GAAGb,MAAM,CAACO,IAAP,EAAT,CALK,CAOL;AACA;;AACA,cAAIM,EAAE,IAAI,IAAV,EAAgB;AACdZ,YAAAA,KAAK,CAACU,UAAN,GAAmB,IAAnB;AACD;AACF;;AAED,eAAO,QAAP;AACD,OAlBD;AAmBD,KA3E8C,CA6E/C;;;AACA,aAASP,UAAT,CAAqBJ,MAArB,EAA6BC,KAA7B,EAAoC;AAClC;AACA,UAAIA,KAAK,CAACa,OAAV,EAAmB;AACjBb,QAAAA,KAAK,CAACa,OAAN,GAAgB,KAAhB;;AAEA,YAAId,MAAM,CAACe,IAAP,MAAiB,GAArB,EAA0B;AACxB,iBAAO,MAAP;AACD,SALgB,CAOjB;;;AACA,YAAIf,MAAM,CAACE,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,iBAAO,OAAP;AACD,SAFD,MAEO,IAAIF,MAAM,CAACY,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BX,UAAAA,KAAK,CAACe,YAAN,GAAqB,IAArB;AACA,iBAAO,MAAP;AACD,SAHM,MAGA;AACL,gBAAMC,KAAK,CAAE,8CAAF,CAAX;AACD;AACF,OAlBiC,CAoBlC;;;AACA,UAAIhB,KAAK,CAACiB,QAAV,EAAoB;AAClBjB,QAAAA,KAAK,CAACiB,QAAN,GAAiB,KAAjB;;AAEA,YAAIlB,MAAM,CAACe,IAAP,MAAiB,GAArB,EAA0B;AACxB,iBAAO,MAAP;AACD,SALiB,CAOlB;;;AACA,YAAIf,MAAM,CAACE,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,iBAAO,OAAP;AACD,SAFD,MAEO,IAAIF,MAAM,CAACY,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BX,UAAAA,KAAK,CAACkB,UAAN,GAAmB,IAAnB;AACA,iBAAO,MAAP;AACD,SAHM,MAGA;AACL,gBAAMF,KAAK,CAAE,4CAAF,CAAX;AACD;AACF,OArCiC,CAuClC;;;AACA,UAAIhB,KAAK,CAACe,YAAV,EAAwB;AACtBf,QAAAA,KAAK,CAACe,YAAN,GAAqB,KAArB;;AACA,YAAIhB,MAAM,CAACE,KAAP,CAAa,WAAb,CAAJ,EAA+B;AAC7BD,UAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB,CAD6B,CACN;;AACvBb,UAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB,CAF6B,CAEL;;AACxB,iBAAO,UAAP;AACD;AACF,OA/CiC,CAiDlC;;;AACA,UAAIjB,KAAK,CAACkB,UAAV,EAAsB;AAClBlB,QAAAA,KAAK,CAACkB,UAAN,GAAmB,KAAnB;;AACF,YAAInB,MAAM,CAACE,KAAP,CAAaR,OAAb,CAAJ,EAA2B;AACzB,iBAAO,YAAP;AACD;AACF,OAvDiC,CAyDlC;;;AACA,UAAIM,MAAM,CAACoB,QAAP,EAAJ,EAAuB;AACrBnB,QAAAA,KAAK,CAACe,YAAN,GAAqB,KAArB;AACA,eAAO,MAAP;AACD,OA7DiC,CA+DlC;;;AACA,UAAIhB,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;AACnC,eAAO,QAAP;AACD,OAlEiC,CAoElC;;;AACA,UAAIF,MAAM,CAACE,KAAP,CAAa,GAAb,CAAJ,EAAuB;AACrBD,QAAAA,KAAK,CAACE,QAAN,GAAiBK,QAAQ,CAAC,GAAD,EAAMP,KAAK,CAACE,QAAZ,CAAzB;AACA,eAAO,QAAP;AACD,OAHD,MAGO,IAAIH,MAAM,CAACE,KAAP,CAAa,GAAb,CAAJ,EAAuB;AAC5BD,QAAAA,KAAK,CAACE,QAAN,GAAiBK,QAAQ,CAAC,GAAD,EAAMP,KAAK,CAACE,QAAZ,CAAzB;AACA,eAAO,QAAP;AACD,OA3EiC,CA6ElC;;;AACA,UAAIH,MAAM,CAACE,KAAP,CAAa,WAAb,KAA6B,CAACD,KAAK,CAACoB,aAAxC,EAAuD;AACrDpB,QAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB;AACAb,QAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB,CAFqD,CAE7B;;AACxB,eAAO,UAAP;AACD,OAlFiC,CAoFlC;;;AACA,UAAIlB,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtBD,QAAAA,KAAK,CAACe,YAAN,GAAqB,IAArB;AACAf,QAAAA,KAAK,CAACkB,UAAN,GAAmB,IAAnB;AACAlB,QAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB;AACAb,QAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB;AACAjB,QAAAA,KAAK,CAACE,QAAN,GAAiBJ,SAAjB;AACA,eAAO,KAAP;AACD,OA5FiC,CA8FlC;;;AACAC,MAAAA,MAAM,CAACO,IAAP;AACA,aAAO,MAAP;AACD;;AAED,aAASF,KAAT,CAAgBL,MAAhB,EAAwBC,KAAxB,EAA+B;AAC7B;AACA,UAAIA,KAAK,CAACa,OAAV,EAAmB;AACjBb,QAAAA,KAAK,CAACa,OAAN,GAAgB,KAAhB;;AAEA,YAAId,MAAM,CAACe,IAAP,MAAiB,GAArB,EAA0B;AACxB,iBAAO,MAAP;AACD,SALgB,CAOjB;;;AACA,YAAIf,MAAM,CAACE,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,iBAAO,OAAP;AACD,SAFD,MAEO,IAAIF,MAAM,CAACY,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BX,UAAAA,KAAK,CAACe,YAAN,GAAqB,IAArB;AACA,iBAAO,MAAP;AACD,SAHM,MAGA;AACL,gBAAMC,KAAK,CAAE,8CAAF,CAAX;AACD;AACF,OAlB4B,CAoB7B;;;AACA,UAAIhB,KAAK,CAACiB,QAAV,EAAoB;AAClBjB,QAAAA,KAAK,CAACiB,QAAN,GAAiB,KAAjB;;AAEA,YAAIlB,MAAM,CAACe,IAAP,MAAiB,GAArB,EAA0B;AACxB,iBAAO,MAAP;AACD,SALiB,CAOlB;;;AACA,YAAIf,MAAM,CAACE,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,iBAAO,OAAP;AACD,SAFD,MAEO,IAAIF,MAAM,CAACY,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BX,UAAAA,KAAK,CAACkB,UAAN,GAAmB,IAAnB;AACA,iBAAO,MAAP;AACD,SAHM,MAGA;AACL,gBAAMF,KAAK,CAAE,4CAAF,CAAX;AACD;AACF,OArC4B,CAuC7B;;;AACA,UAAIhB,KAAK,CAACe,YAAV,EAAwB;AACtBf,QAAAA,KAAK,CAACe,YAAN,GAAqB,KAArB;;AACA,YAAIhB,MAAM,CAACE,KAAP,CAAa,WAAb,CAAJ,EAA+B;AAC7BD,UAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB,CAD6B,CACN;;AACvBb,UAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB,CAF6B,CAEL;;AACxB,iBAAO,UAAP;AACD;AACF,OA/C4B,CAiD7B;;;AACA,UAAIjB,KAAK,CAACkB,UAAV,EAAsB;AAClBlB,QAAAA,KAAK,CAACkB,UAAN,GAAmB,KAAnB;;AACF,YAAInB,MAAM,CAACE,KAAP,CAAaR,OAAb,CAAJ,EAA2B;AACzB,iBAAO,YAAP;AACD;AACF,OAvD4B,CAyD7B;;;AACA,UAAIM,MAAM,CAACoB,QAAP,EAAJ,EAAuB;AACrBnB,QAAAA,KAAK,CAACe,YAAN,GAAqB,KAArB;AACA,eAAO,MAAP;AACD,OA7D4B,CA+D7B;;;AACA,UAAIhB,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;AACnC,eAAO,QAAP;AACD,OAlE4B,CAoE7B;;;AACA,UAAIF,MAAM,CAACE,KAAP,CAAa,GAAb,CAAJ,EAAuB;AACrBD,QAAAA,KAAK,CAACE,QAAN,GAAiBK,QAAQ,CAAC,GAAD,EAAMP,KAAK,CAACE,QAAZ,CAAzB;AACA,eAAO,QAAP;AACD,OAHD,MAGO,IAAIH,MAAM,CAACE,KAAP,CAAa,GAAb,CAAJ,EAAuB;AAC5BD,QAAAA,KAAK,CAACE,QAAN,GAAiBK,QAAQ,CAAC,GAAD,EAAMP,KAAK,CAACE,QAAZ,CAAzB;AACA,eAAO,QAAP;AACD,OA3E4B,CA6E7B;;;AACA,UAAIH,MAAM,CAACE,KAAP,CAAaP,SAAb,CAAJ,EAA6B;AAC3B,eAAO,UAAP;AACD,OAhF4B,CAkF7B;;;AACA,UAAIK,MAAM,CAACE,KAAP,CAAaN,aAAb,CAAJ,EAAiC;AAC/B,eAAO,SAAP;AACD,OArF4B,CAuF7B;;;AACA,UAAI0B,YAAY,GAAGtB,MAAM,CAACE,KAAP,CAAaT,QAAb,CAAnB;;AACA,UAAI6B,YAAJ,EAAkB;AAChB,YAAIA,YAAY,CAAC,CAAD,CAAZ,IAAmB,SAAvB,EAAkC;AAChCrB,UAAAA,KAAK,CAACsB,eAAN,GAAwB,IAAxB;AACD;;AACD,eAAO,SAAP;AACD,OA9F4B,CAgG7B;;;AACA,UAAIvB,MAAM,CAACE,KAAP,CAAa,WAAb,CAAJ,EAA+B;AAC7BD,QAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB;AACAb,QAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB,CAF6B,CAEL;;AACxB,eAAO,UAAP;AACD,OArG4B,CAuG7B;;;AACA,UAAIlB,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtBD,QAAAA,KAAK,CAACe,YAAN,GAAqB,IAArB;AACAf,QAAAA,KAAK,CAACkB,UAAN,GAAmB,IAAnB;AACAlB,QAAAA,KAAK,CAACa,OAAN,GAAgB,IAAhB;AACAb,QAAAA,KAAK,CAACiB,QAAN,GAAiB,IAAjB,CAJsB,CAKtB;AACA;;AACA,YAAIjB,KAAK,CAACsB,eAAV,EAA2B;AACzBtB,UAAAA,KAAK,CAACsB,eAAN,GAAwB,KAAxB,CADyB,CACO;;AAChCtB,UAAAA,KAAK,CAACE,QAAN,GAAiBqB,cAAjB;AACD,SAHD,MAGO;AACLvB,UAAAA,KAAK,CAACE,QAAN,GAAiBJ,SAAjB;AACD;;AACD,eAAO,KAAP;AACD,OAtH4B,CAwH7B;;;AACAC,MAAAA,MAAM,CAACO,IAAP;AACA,aAAO,MAAP;AACD,KA5S8C,CA8S/C;;;AACA,aAASD,SAAT,CAAoBN,MAApB,EAA4BC,KAA5B,EAAmC;AACjC,UAAID,MAAM,CAACE,KAAP,CAAa,SAAb,CAAJ,EAA6BD,KAAK,CAACE,QAAN,GAAiBJ,SAAjB,CAA7B,KACKC,MAAM,CAACyB,SAAP;AACL,aAAO,SAAP;AACD,KAnT8C,CAqT/C;;;AACA,aAASD,cAAT,CAAyBxB,MAAzB,EAAiCC,KAAjC,EAAwC;AACtC,UAAID,MAAM,CAACE,KAAP,CAAa,wBAAb,EAAuC,KAAvC,CAAJ,EAAmD;AACjDD,QAAAA,KAAK,CAACE,QAAN,GAAiBE,KAAjB;AACAL,QAAAA,MAAM,CAACE,KAAP,CAAa,IAAb;AACA,eAAO,KAAP;AACD,OAJD,MAIO;AACLF,QAAAA,MAAM,CAACO,IAAP;AACA,eAAO,SAAP;AACD;AACF;;AAED,WAAO;AACLmB,MAAAA,UAAU,EAAE,YAAY;AACtB,eAAO;AAACvB,UAAAA,QAAQ,EAAEJ;AAAX,SAAP;AACD,OAHI;AAIL4B,MAAAA,KAAK,EAAE,UAAU3B,MAAV,EAAkBC,KAAlB,EAAyB;AAC9B,eAAOA,KAAK,CAACE,QAAN,CAAeH,MAAf,EAAuBC,KAAvB,CAAP;AACD,OANI;AAOL2B,MAAAA,iBAAiB,EAAE,eAPd;AAQLC,MAAAA,eAAe,EAAE;AARZ,KAAP;AAUD,GA3UD;AA6UAtC,EAAAA,UAAU,CAACC,UAAX,CAAsB,QAAtB,EAAgC,UAASsC,MAAT,EAAiB;AAC/C,QAAIC,QAAQ,GAAGxC,UAAU,CAACyC,OAAX,CAAmBF,MAAnB,EAA2B,WAA3B,CAAf;AACA,QAAIG,WAAW,GAAG1C,UAAU,CAACyC,OAAX,CAAmBF,MAAnB,EAA2B,cAA3B,CAAlB;AACA,WAAOvC,UAAU,CAAC2C,WAAX,CAAuBH,QAAvB,EAAiCE,WAAjC,CAAP;AACD,GAJD;AAMA1C,EAAAA,UAAU,CAAC4C,UAAX,CAAsB,eAAtB,EAAuC,QAAvC;AACD,CAhWD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function() {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\",\n                    \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\",\n                    \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\",\n                    \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\",\n                    \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\",\n                    \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\",\n                    \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\",\n                    \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n        filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\",\n                   \"default\", \"default_if_none\", \"dictsort\",\n                   \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\",\n                   \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\",\n                   \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\",\n                   \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\",\n                   \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\",\n                   \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\",\n                   \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\",\n                   \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\",\n                   \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\",\n                   \"unordered_list\", \"upper\", \"urlencode\", \"urlize\",\n                   \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n        operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n        wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\");\n\n    // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n    function tokenBase (stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      }\n\n      // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n      return null;\n    }\n\n    // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n    function inString (delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n\n          var ch = stream.next();\n\n          // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    // Apply Django template variable syntax highlighting\n    function inVariable (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to find the variable\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    function inTag (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to match an operator\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Attempt to match a word operator\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      }\n\n      // Attempt to match a keyword\n      var keywordMatch = stream.match(keywords);\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n        return \"keyword\";\n      }\n\n      // Attempt to match a variable\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false;  // Release the \"lock\"\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    // Mark everything as comment inside the tag and the tag itself.\n    function inComment (stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase\n      else stream.skipToEnd()\n      return \"comment\";\n    }\n\n    // Mark everything as a comment until the `blockcomment` tag closes.\n    function inBlockComment (stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n\n  CodeMirror.defineMode(\"django\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});\n"]},"metadata":{},"sourceType":"script"}