{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"xquery\", function () {\n    // The keywords object is set to the result of this self executing\n    // function. Each keyword is a property of the keywords object whose\n    // value is {type: atype, style: astyle}\n    var keywords = function () {\n      // convenience functions used to build keywords object\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      },\n          punctuation = {\n        type: \"punctuation\",\n        style: null\n      },\n          qualifier = {\n        type: \"axis_specifier\",\n        style: \"qualifier\"\n      }; // kwObj is what is return from this function at the end\n\n      var kwObj = {\n        ',': punctuation\n      }; // a list of 'basic' keywords. For each add a property to kwObj with the value of\n      // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n\n      var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as', 'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast', 'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content', 'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete', 'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance', 'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end', 'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling', 'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group', 'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into', 'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map', 'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit', 'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering', 'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve', 'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return', 'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score', 'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable', 'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times', 'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered', 'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version', 'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n\n      for (var i = 0, l = basic.length; i < l; i++) {\n        kwObj[basic[i]] = kw(basic[i]);\n      }\n\n      ; // a list of types. For each add a property to kwObj with the value of\n      // {type: \"atom\", style: \"atom\"}\n\n      var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI', 'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp', 'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY', 'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary', 'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language', 'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS', 'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION', 'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string', 'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong', 'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n\n      for (var i = 0, l = types.length; i < l; i++) {\n        kwObj[types[i]] = atom;\n      }\n\n      ; // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n\n      var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n\n      for (var i = 0, l = operators.length; i < l; i++) {\n        kwObj[operators[i]] = operator;\n      }\n\n      ; // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n\n      var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\", \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n\n      for (var i = 0, l = axis_specifiers.length; i < l; i++) {\n        kwObj[axis_specifiers[i]] = qualifier;\n      }\n\n      ;\n      return kwObj;\n    }();\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    } // the primary mode tokenizer\n\n\n    function tokenBase(stream, state) {\n      var ch = stream.next(),\n          mightBeFunction = false,\n          isEQName = isEQNameAhead(stream); // an XML tag (if not in some sub, chained tokenizer)\n\n      if (ch == \"<\") {\n        if (stream.match(\"!--\", true)) return chain(stream, state, tokenXMLComment);\n\n        if (stream.match(\"![CDATA\", false)) {\n          state.tokenize = tokenCDATA;\n          return \"tag\";\n        }\n\n        if (stream.match(\"?\", false)) {\n          return chain(stream, state, tokenPreProcessing);\n        }\n\n        var isclose = stream.eat(\"/\");\n        stream.eatSpace();\n        var tagName = \"\",\n            c;\n\n        while (c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)) {\n          tagName += c;\n        }\n\n        return chain(stream, state, tokenTag(tagName, isclose));\n      } // start code block\n      else if (ch == \"{\") {\n          pushStateStack(state, {\n            type: \"codeblock\"\n          });\n          return null;\n        } // end code block\n        else if (ch == \"}\") {\n            popStateStack(state);\n            return null;\n          } // if we're in an XML block\n          else if (isInXmlBlock(state)) {\n              if (ch == \">\") return \"tag\";else if (ch == \"/\" && stream.eat(\">\")) {\n                popStateStack(state);\n                return \"tag\";\n              } else return \"variable\";\n            } // if a number\n            else if (/\\d/.test(ch)) {\n                stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n                return \"atom\";\n              } // comment start\n              else if (ch === \"(\" && stream.eat(\":\")) {\n                  pushStateStack(state, {\n                    type: \"comment\"\n                  });\n                  return chain(stream, state, tokenComment);\n                } // quoted string\n                else if (!isEQName && (ch === '\"' || ch === \"'\")) return chain(stream, state, tokenString(ch)); // variable\n                  else if (ch === \"$\") {\n                      return chain(stream, state, tokenVariable);\n                    } // assignment\n                    else if (ch === \":\" && stream.eat(\"=\")) {\n                        return \"keyword\";\n                      } // open paren\n                      else if (ch === \"(\") {\n                          pushStateStack(state, {\n                            type: \"paren\"\n                          });\n                          return null;\n                        } // close paren\n                        else if (ch === \")\") {\n                            popStateStack(state);\n                            return null;\n                          } // open paren\n                          else if (ch === \"[\") {\n                              pushStateStack(state, {\n                                type: \"bracket\"\n                              });\n                              return null;\n                            } // close paren\n                            else if (ch === \"]\") {\n                                popStateStack(state);\n                                return null;\n                              } else {\n                                var known = keywords.propertyIsEnumerable(ch) && keywords[ch]; // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n\n                                if (isEQName && ch === '\\\"') while (stream.next() !== '\"') {}\n                                if (isEQName && ch === '\\'') while (stream.next() !== '\\'') {} // gobble up a word if the character is not known\n\n                                if (!known) stream.eatWhile(/[\\w\\$_-]/); // gobble a colon in the case that is a lib func type call fn:doc\n\n                                var foundColon = stream.eat(\":\"); // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n                                // which should get matched as a keyword\n\n                                if (!stream.eat(\":\") && foundColon) {\n                                  stream.eatWhile(/[\\w\\$_-]/);\n                                } // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n\n\n                                if (stream.match(/^[ \\t]*\\(/, false)) {\n                                  mightBeFunction = true;\n                                } // is the word a keyword?\n\n\n                                var word = stream.current();\n                                known = keywords.propertyIsEnumerable(word) && keywords[word]; // if we think it's a function call but not yet known,\n                                // set style to variable for now for lack of something better\n\n                                if (mightBeFunction && !known) known = {\n                                  type: \"function_call\",\n                                  style: \"variable def\"\n                                }; // if the previous word was element, attribute, axis specifier, this word should be the name of that\n\n                                if (isInXmlConstructor(state)) {\n                                  popStateStack(state);\n                                  return \"variable\";\n                                } // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n                                // push the stack so we know to look for it on the next word\n\n\n                                if (word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {\n                                  type: \"xmlconstructor\"\n                                }); // if the word is known, return the details of that else just call this a generic 'word'\n\n                                return known ? known.style : \"variable\";\n                              }\n    } // handle comments, including nested\n\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          maybeNested = false,\n          nestedCount = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          if (nestedCount > 0) nestedCount--;else {\n            popStateStack(state);\n            break;\n          }\n        } else if (ch == \":\" && maybeNested) {\n          nestedCount++;\n        }\n\n        maybeEnd = ch == \":\";\n        maybeNested = ch == \"(\";\n      }\n\n      return \"comment\";\n    } // tokenizer for string literals\n    // optionally pass a tokenizer function to set state.tokenize back to when finished\n\n\n    function tokenString(quote, f) {\n      return function (stream, state) {\n        var ch;\n\n        if (isInString(state) && stream.current() == quote) {\n          popStateStack(state);\n          if (f) state.tokenize = f;\n          return \"string\";\n        }\n\n        pushStateStack(state, {\n          type: \"string\",\n          name: quote,\n          tokenize: tokenString(quote, f)\n        }); // if we're in a string and in an XML block, allow an embedded code block\n\n        if (stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n          state.tokenize = tokenBase;\n          return \"string\";\n        }\n\n        while (ch = stream.next()) {\n          if (ch == quote) {\n            popStateStack(state);\n            if (f) state.tokenize = f;\n            break;\n          } else {\n            // if we're in a string and in an XML block, allow an embedded code block in an attribute\n            if (stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n              state.tokenize = tokenBase;\n              return \"string\";\n            }\n          }\n        }\n\n        return \"string\";\n      };\n    } // tokenizer for variables\n\n\n    function tokenVariable(stream, state) {\n      var isVariableChar = /[\\w\\$_-]/; // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n\n      if (stream.eat(\"\\\"\")) {\n        while (stream.next() !== '\\\"') {}\n\n        ;\n        stream.eat(\":\");\n      } else {\n        stream.eatWhile(isVariableChar);\n        if (!stream.match(\":=\", false)) stream.eat(\":\");\n      }\n\n      stream.eatWhile(isVariableChar);\n      state.tokenize = tokenBase;\n      return \"variable\";\n    } // tokenizer for XML tags\n\n\n    function tokenTag(name, isclose) {\n      return function (stream, state) {\n        stream.eatSpace();\n\n        if (isclose && stream.eat(\">\")) {\n          popStateStack(state);\n          state.tokenize = tokenBase;\n          return \"tag\";\n        } // self closing tag without attributes?\n\n\n        if (!stream.eat(\"/\")) pushStateStack(state, {\n          type: \"tag\",\n          name: name,\n          tokenize: tokenBase\n        });\n\n        if (!stream.eat(\">\")) {\n          state.tokenize = tokenAttribute;\n          return \"tag\";\n        } else {\n          state.tokenize = tokenBase;\n        }\n\n        return \"tag\";\n      };\n    } // tokenizer for XML attributes\n\n\n    function tokenAttribute(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"/\" && stream.eat(\">\")) {\n        if (isInXmlAttributeBlock(state)) popStateStack(state);\n        if (isInXmlBlock(state)) popStateStack(state);\n        return \"tag\";\n      }\n\n      if (ch == \">\") {\n        if (isInXmlAttributeBlock(state)) popStateStack(state);\n        return \"tag\";\n      }\n\n      if (ch == \"=\") return null; // quoted string\n\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch, tokenAttribute));\n      if (!isInXmlAttributeBlock(state)) pushStateStack(state, {\n        type: \"attribute\",\n        tokenize: tokenAttribute\n      });\n      stream.eat(/[a-zA-Z_:]/);\n      stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n      stream.eatSpace(); // the case where the attribute has not value and the tag was closed\n\n      if (stream.match(\">\", false) || stream.match(\"/\", false)) {\n        popStateStack(state);\n        state.tokenize = tokenBase;\n      }\n\n      return \"attribute\";\n    } // handle comments, including nested\n\n\n    function tokenXMLComment(stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"-\" && stream.match(\"->\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment\";\n        }\n      }\n    } // handle CDATA\n\n\n    function tokenCDATA(stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"]\" && stream.match(\"]\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment\";\n        }\n      }\n    } // handle preprocessing instructions\n\n\n    function tokenPreProcessing(stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"?\" && stream.match(\">\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment meta\";\n        }\n      }\n    } // functions to test the current context of the state\n\n\n    function isInXmlBlock(state) {\n      return isIn(state, \"tag\");\n    }\n\n    function isInXmlAttributeBlock(state) {\n      return isIn(state, \"attribute\");\n    }\n\n    function isInXmlConstructor(state) {\n      return isIn(state, \"xmlconstructor\");\n    }\n\n    function isInString(state) {\n      return isIn(state, \"string\");\n    }\n\n    function isEQNameAhead(stream) {\n      // assume we've already eaten a quote (\")\n      if (stream.current() === '\"') return stream.match(/^[^\\\"]+\\\"\\:/, false);else if (stream.current() === '\\'') return stream.match(/^[^\\\"]+\\'\\:/, false);else return false;\n    }\n\n    function isIn(state, type) {\n      return state.stack.length && state.stack[state.stack.length - 1].type == type;\n    }\n\n    function pushStateStack(state, newState) {\n      state.stack.push(newState);\n    }\n\n    function popStateStack(state) {\n      state.stack.pop();\n      var reinstateTokenize = state.stack.length && state.stack[state.stack.length - 1].tokenize;\n      state.tokenize = reinstateTokenize || tokenBase;\n    } // the interface for the mode API\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          cc: [],\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"(:\",\n      blockCommentEnd: \":)\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/xquery\", \"xquery\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/xquery/xquery.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","kw","type","style","operator","atom","punctuation","qualifier","kwObj","basic","i","l","length","types","operators","axis_specifiers","chain","stream","state","f","tokenize","tokenBase","ch","next","mightBeFunction","isEQName","isEQNameAhead","match","tokenXMLComment","tokenCDATA","tokenPreProcessing","isclose","eat","eatSpace","tagName","c","tokenTag","pushStateStack","popStateStack","isInXmlBlock","test","tokenComment","tokenString","tokenVariable","known","propertyIsEnumerable","eatWhile","foundColon","word","current","isInXmlConstructor","maybeEnd","maybeNested","nestedCount","quote","isInString","name","isInXmlAttributeBlock","isVariableChar","tokenAttribute","isIn","stack","newState","push","pop","reinstateTokenize","startState","cc","token","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"xquery\", function() {\n\n  // The keywords object is set to the result of this self executing\n  // function. Each keyword is a property of the keywords object whose\n  // value is {type: atype, style: astyle}\n  var keywords = function(){\n    // convenience functions used to build keywords object\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var operator = kw(\"operator\")\n      , atom = {type: \"atom\", style: \"atom\"}\n      , punctuation = {type: \"punctuation\", style: null}\n      , qualifier = {type: \"axis_specifier\", style: \"qualifier\"};\n\n    // kwObj is what is return from this function at the end\n    var kwObj = {\n      ',': punctuation\n    };\n\n    // a list of 'basic' keywords. For each add a property to kwObj with the value of\n    // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n    var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',\n    'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',\n    'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',\n    'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',\n    'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',\n    'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',\n    'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',\n    'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',\n    'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',\n    'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',\n    'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',\n    'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',\n    'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',\n    'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',\n    'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',\n    'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',\n    'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',\n    'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',\n    'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',\n    'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n    for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);};\n\n    // a list of types. For each add a property to kwObj with the value of\n    // {type: \"atom\", style: \"atom\"}\n    var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',\n    'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',\n    'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',\n    'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',\n    'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',\n    'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',\n    'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',\n    'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',\n    'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',\n    'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n    for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;};\n\n    // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n    var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n    for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;};\n\n    // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n    var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\",\n    \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n    for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; };\n\n    return kwObj;\n  }();\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  // the primary mode tokenizer\n  function tokenBase(stream, state) {\n    var ch = stream.next(),\n        mightBeFunction = false,\n        isEQName = isEQNameAhead(stream);\n\n    // an XML tag (if not in some sub, chained tokenizer)\n    if (ch == \"<\") {\n      if(stream.match(\"!--\", true))\n        return chain(stream, state, tokenXMLComment);\n\n      if(stream.match(\"![CDATA\", false)) {\n        state.tokenize = tokenCDATA;\n        return \"tag\";\n      }\n\n      if(stream.match(\"?\", false)) {\n        return chain(stream, state, tokenPreProcessing);\n      }\n\n      var isclose = stream.eat(\"/\");\n      stream.eatSpace();\n      var tagName = \"\", c;\n      while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\n\n      return chain(stream, state, tokenTag(tagName, isclose));\n    }\n    // start code block\n    else if(ch == \"{\") {\n      pushStateStack(state, { type: \"codeblock\"});\n      return null;\n    }\n    // end code block\n    else if(ch == \"}\") {\n      popStateStack(state);\n      return null;\n    }\n    // if we're in an XML block\n    else if(isInXmlBlock(state)) {\n      if(ch == \">\")\n        return \"tag\";\n      else if(ch == \"/\" && stream.eat(\">\")) {\n        popStateStack(state);\n        return \"tag\";\n      }\n      else\n        return \"variable\";\n    }\n    // if a number\n    else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n      return \"atom\";\n    }\n    // comment start\n    else if (ch === \"(\" && stream.eat(\":\")) {\n      pushStateStack(state, { type: \"comment\"});\n      return chain(stream, state, tokenComment);\n    }\n    // quoted string\n    else if (!isEQName && (ch === '\"' || ch === \"'\"))\n      return chain(stream, state, tokenString(ch));\n    // variable\n    else if(ch === \"$\") {\n      return chain(stream, state, tokenVariable);\n    }\n    // assignment\n    else if(ch ===\":\" && stream.eat(\"=\")) {\n      return \"keyword\";\n    }\n    // open paren\n    else if(ch === \"(\") {\n      pushStateStack(state, { type: \"paren\"});\n      return null;\n    }\n    // close paren\n    else if(ch === \")\") {\n      popStateStack(state);\n      return null;\n    }\n    // open paren\n    else if(ch === \"[\") {\n      pushStateStack(state, { type: \"bracket\"});\n      return null;\n    }\n    // close paren\n    else if(ch === \"]\") {\n      popStateStack(state);\n      return null;\n    }\n    else {\n      var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n      // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n      if(isEQName && ch === '\\\"') while(stream.next() !== '\"'){}\n      if(isEQName && ch === '\\'') while(stream.next() !== '\\''){}\n\n      // gobble up a word if the character is not known\n      if(!known) stream.eatWhile(/[\\w\\$_-]/);\n\n      // gobble a colon in the case that is a lib func type call fn:doc\n      var foundColon = stream.eat(\":\");\n\n      // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n      // which should get matched as a keyword\n      if(!stream.eat(\":\") && foundColon) {\n        stream.eatWhile(/[\\w\\$_-]/);\n      }\n      // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n      if(stream.match(/^[ \\t]*\\(/, false)) {\n        mightBeFunction = true;\n      }\n      // is the word a keyword?\n      var word = stream.current();\n      known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n      // if we think it's a function call but not yet known,\n      // set style to variable for now for lack of something better\n      if(mightBeFunction && !known) known = {type: \"function_call\", style: \"variable def\"};\n\n      // if the previous word was element, attribute, axis specifier, this word should be the name of that\n      if(isInXmlConstructor(state)) {\n        popStateStack(state);\n        return \"variable\";\n      }\n      // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n      // push the stack so we know to look for it on the next word\n      if(word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {type: \"xmlconstructor\"});\n\n      // if the word is known, return the details of that else just call this a generic 'word'\n      return known ? known.style : \"variable\";\n    }\n  }\n\n  // handle comments, including nested\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        if(nestedCount > 0)\n          nestedCount--;\n        else {\n          popStateStack(state);\n          break;\n        }\n      }\n      else if(ch == \":\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \":\");\n      maybeNested = (ch == \"(\");\n    }\n\n    return \"comment\";\n  }\n\n  // tokenizer for string literals\n  // optionally pass a tokenizer function to set state.tokenize back to when finished\n  function tokenString(quote, f) {\n    return function(stream, state) {\n      var ch;\n\n      if(isInString(state) && stream.current() == quote) {\n        popStateStack(state);\n        if(f) state.tokenize = f;\n        return \"string\";\n      }\n\n      pushStateStack(state, { type: \"string\", name: quote, tokenize: tokenString(quote, f) });\n\n      // if we're in a string and in an XML block, allow an embedded code block\n      if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n\n\n      while (ch = stream.next()) {\n        if (ch ==  quote) {\n          popStateStack(state);\n          if(f) state.tokenize = f;\n          break;\n        }\n        else {\n          // if we're in a string and in an XML block, allow an embedded code block in an attribute\n          if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n            state.tokenize = tokenBase;\n            return \"string\";\n          }\n\n        }\n      }\n\n      return \"string\";\n    };\n  }\n\n  // tokenizer for variables\n  function tokenVariable(stream, state) {\n    var isVariableChar = /[\\w\\$_-]/;\n\n    // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n    if(stream.eat(\"\\\"\")) {\n      while(stream.next() !== '\\\"'){};\n      stream.eat(\":\");\n    } else {\n      stream.eatWhile(isVariableChar);\n      if(!stream.match(\":=\", false)) stream.eat(\":\");\n    }\n    stream.eatWhile(isVariableChar);\n    state.tokenize = tokenBase;\n    return \"variable\";\n  }\n\n  // tokenizer for XML tags\n  function tokenTag(name, isclose) {\n    return function(stream, state) {\n      stream.eatSpace();\n      if(isclose && stream.eat(\">\")) {\n        popStateStack(state);\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n      // self closing tag without attributes?\n      if(!stream.eat(\"/\"))\n        pushStateStack(state, { type: \"tag\", name: name, tokenize: tokenBase});\n      if(!stream.eat(\">\")) {\n        state.tokenize = tokenAttribute;\n        return \"tag\";\n      }\n      else {\n        state.tokenize = tokenBase;\n      }\n      return \"tag\";\n    };\n  }\n\n  // tokenizer for XML attributes\n  function tokenAttribute(stream, state) {\n    var ch = stream.next();\n\n    if(ch == \"/\" && stream.eat(\">\")) {\n      if(isInXmlAttributeBlock(state)) popStateStack(state);\n      if(isInXmlBlock(state)) popStateStack(state);\n      return \"tag\";\n    }\n    if(ch == \">\") {\n      if(isInXmlAttributeBlock(state)) popStateStack(state);\n      return \"tag\";\n    }\n    if(ch == \"=\")\n      return null;\n    // quoted string\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch, tokenAttribute));\n\n    if(!isInXmlAttributeBlock(state))\n      pushStateStack(state, { type: \"attribute\", tokenize: tokenAttribute});\n\n    stream.eat(/[a-zA-Z_:]/);\n    stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n    stream.eatSpace();\n\n    // the case where the attribute has not value and the tag was closed\n    if(stream.match(\">\", false) || stream.match(\"/\", false)) {\n      popStateStack(state);\n      state.tokenize = tokenBase;\n    }\n\n    return \"attribute\";\n  }\n\n  // handle comments, including nested\n  function tokenXMLComment(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"-\" && stream.match(\"->\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n    }\n  }\n\n\n  // handle CDATA\n  function tokenCDATA(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"]\" && stream.match(\"]\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n    }\n  }\n\n  // handle preprocessing instructions\n  function tokenPreProcessing(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"?\" && stream.match(\">\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment meta\";\n      }\n    }\n  }\n\n\n  // functions to test the current context of the state\n  function isInXmlBlock(state) { return isIn(state, \"tag\"); }\n  function isInXmlAttributeBlock(state) { return isIn(state, \"attribute\"); }\n  function isInXmlConstructor(state) { return isIn(state, \"xmlconstructor\"); }\n  function isInString(state) { return isIn(state, \"string\"); }\n\n  function isEQNameAhead(stream) {\n    // assume we've already eaten a quote (\")\n    if(stream.current() === '\"')\n      return stream.match(/^[^\\\"]+\\\"\\:/, false);\n    else if(stream.current() === '\\'')\n      return stream.match(/^[^\\\"]+\\'\\:/, false);\n    else\n      return false;\n  }\n\n  function isIn(state, type) {\n    return (state.stack.length && state.stack[state.stack.length - 1].type == type);\n  }\n\n  function pushStateStack(state, newState) {\n    state.stack.push(newState);\n  }\n\n  function popStateStack(state) {\n    state.stack.pop();\n    var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;\n    state.tokenize = reinstateTokenize || tokenBase;\n  }\n\n  // the interface for the mode API\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        cc: [],\n        stack: []\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n\n    blockCommentStart: \"(:\",\n    blockCommentEnd: \":)\"\n\n  };\n\n});\n\nCodeMirror.defineMIME(\"application/xquery\", \"xquery\");\n\n});\n"]},"metadata":{},"sourceType":"script"}