{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tcl\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" + \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" + \"binary break catch cd close concat continue dde eof encoding error \" + \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" + \"filename flush for foreach format gets glob global history http if \" + \"incr info interp join lappend lindex linsert list llength load lrange \" + \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" + \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" + \"registry regsub rename resource return scan seek set socket source split \" + \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" + \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" + \"tclvars tell time trace unknown unset update uplevel upvar variable \" + \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\")) return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/tcl/tcl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\"))\n          return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n          return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n"]},"metadata":{},"sourceType":"script"}