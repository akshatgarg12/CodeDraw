{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ruby\", function (config) {\n    function wordObj(words) {\n      var o = {};\n\n      for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n\n      return o;\n    }\n\n    var keywords = wordObj([\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"]);\n    var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\", \"catch\", \"loop\", \"proc\", \"begin\"]);\n    var dedentWords = wordObj([\"end\", \"until\"]);\n    var opening = {\n      \"[\": \"]\",\n      \"{\": \"}\",\n      \"(\": \")\"\n    };\n    var closing = {\n      \"]\": \"[\",\n      \"}\": \"{\",\n      \")\": \"(\"\n    };\n    var curPunc;\n\n    function chain(newtok, stream, state) {\n      state.tokenize.push(newtok);\n      return newtok(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push(readBlockComment);\n        return \"comment\";\n      }\n\n      if (stream.eatSpace()) return null;\n      var ch = stream.next(),\n          m;\n\n      if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n        return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n      } else if (ch == \"/\") {\n        if (regexpAhead(stream)) return chain(readQuoted(ch, \"string-2\", true), stream, state);else return \"operator\";\n      } else if (ch == \"%\") {\n        var style = \"string\",\n            embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string-2\";else if (stream.eat(/[wxq]/)) {\n          style = \"string\";\n          embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n        return chain(readQuoted(delim, style, embed, true), stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n        return chain(readHereDoc(m[2], m[1]), stream, state);\n      } else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n      } else if (ch == \"?\") {\n        while (stream.match(/^\\\\[CM]-/)) {}\n\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n        return \"string\";\n      } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state); // :> :>> :< :<< are valid symbols\n\n        if (stream.eat(/[\\<\\>]/)) {\n          stream.eat(/[\\<\\>]/);\n          return \"atom\";\n        } // :+ :- :/ :* :| :& :! are valid symbols\n\n\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n          return \"atom\";\n        } // Symbols can't start by a digit\n\n\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n          stream.eatWhile(/[\\w$\\xa1-\\uffff]/); // Only one ? ! = is allowed and only as the last character\n\n          stream.eat(/[\\?\\!\\=]/);\n          return \"atom\";\n        }\n\n        return \"operator\";\n      } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"variable-2\";\n      } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) {\n          stream.eatWhile(/[\\w]/);\n        } else if (stream.eat(/\\d/)) {\n          stream.eat(/\\d/);\n        } else {\n          stream.next(); // Must be a special global like $: or $!\n        }\n\n        return \"variable-3\";\n      } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"ident\";\n      } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        curPunc = \"|\";\n        return null;\n      } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"-\" && stream.eat(\">\")) {\n        return \"arrow\";\n      } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) curPunc = \".\";\n        return \"operator\";\n      } else {\n        return null;\n      }\n    }\n\n    function regexpAhead(stream) {\n      var start = stream.pos,\n          depth = 0,\n          next,\n          found = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (\"[{(\".indexOf(next) > -1) {\n            depth++;\n          } else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n          } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n          }\n\n          escaped = next == \"\\\\\";\n        } else {\n          escaped = false;\n        }\n      }\n\n      stream.backUp(stream.pos - start);\n      return found;\n    }\n\n    function tokenBaseUntilBrace(depth) {\n      if (!depth) depth = 1;\n      return function (stream, state) {\n        if (stream.peek() == \"}\") {\n          if (depth == 1) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else {\n            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n          }\n        } else if (stream.peek() == \"{\") {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenBaseOnce() {\n      var alreadyCalled = false;\n      return function (stream, state) {\n        if (alreadyCalled) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n\n        alreadyCalled = true;\n        return tokenBase(stream, state);\n      };\n    }\n\n    function readQuoted(quote, style, embed, unescaped) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        if (state.context.type === 'read-quoted-paused') {\n          state.context = state.context.prev;\n          stream.eat(\"}\");\n        }\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize.pop();\n            break;\n          }\n\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              if (quote == \"}\") {\n                state.context = {\n                  prev: state.context,\n                  type: 'read-quoted-paused'\n                };\n              }\n\n              state.tokenize.push(tokenBaseUntilBrace());\n              break;\n            } else if (/[@\\$]/.test(stream.peek())) {\n              state.tokenize.push(tokenBaseOnce());\n              break;\n            }\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return style;\n      };\n    }\n\n    function readHereDoc(phrase, mayIndent) {\n      return function (stream, state) {\n        if (mayIndent) stream.eatSpace();\n        if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n        return \"string\";\n      };\n    }\n\n    function readBlockComment(stream, state) {\n      if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenize: [tokenBase],\n          indented: 0,\n          context: {\n            type: \"top\",\n            indented: -config.indentUnit\n          },\n          continuedLine: false,\n          lastTok: null,\n          varList: false\n        };\n      },\n      token: function (stream, state) {\n        curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state),\n            kwtype;\n        var thisTok = curPunc;\n\n        if (style == \"ident\") {\n          var word = stream.current();\n          style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n\n          if (style == \"keyword\") {\n            thisTok = word;\n            if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n          }\n        }\n\n        if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if (curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n          prev: state.context,\n          type: curPunc || style,\n          indented: state.indented\n        };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize[state.tokenize.length - 1] != tokenBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closed = ct.type == closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closed ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);\n      },\n      electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/ruby/ruby.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","wordObj","words","o","i","e","length","keywords","indentWords","dedentWords","opening","closing","curPunc","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","ch","next","m","readQuoted","regexpAhead","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","readHereDoc","eatWhile","test","varList","lastTok","more","start","pos","depth","found","escaped","indexOf","backUp","tokenBaseUntilBrace","peek","pop","tokenBaseOnce","alreadyCalled","quote","unescaped","context","type","prev","phrase","mayIndent","startState","indented","indentUnit","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","Pass","firstChar","charAt","ct","closed","electricInput","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"ruby\", function(config) {\n  function wordObj(words) {\n    var o = {};\n    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n    return o;\n  }\n  var keywords = wordObj([\n    \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n    \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n    \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n    \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n    \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n    \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n  ]);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\",\n                             \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\n  var closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n  var curPunc;\n\n  function chain(newtok, stream, state) {\n    state.tokenize.push(newtok);\n    return newtok(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n      state.tokenize.push(readBlockComment);\n      return \"comment\";\n    }\n    if (stream.eatSpace()) return null;\n    var ch = stream.next(), m;\n    if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n      return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n    } else if (ch == \"/\") {\n      if (regexpAhead(stream))\n        return chain(readQuoted(ch, \"string-2\", true), stream, state);\n      else\n        return \"operator\";\n    } else if (ch == \"%\") {\n      var style = \"string\", embed = true;\n      if (stream.eat(\"s\")) style = \"atom\";\n      else if (stream.eat(/[WQ]/)) style = \"string\";\n      else if (stream.eat(/[r]/)) style = \"string-2\";\n      else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n      var delim = stream.eat(/[^\\w\\s=]/);\n      if (!delim) return \"operator\";\n      if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n      return chain(readQuoted(delim, style, embed, true), stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n      return chain(readHereDoc(m[2], m[1]), stream, state);\n    } else if (ch == \"0\") {\n      if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n      else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n      else stream.eatWhile(/[0-7]/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n      return \"number\";\n    } else if (ch == \"?\") {\n      while (stream.match(/^\\\\[CM]-/)) {}\n      if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n      else stream.next();\n      return \"string\";\n    } else if (ch == \":\") {\n      if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n      if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n      // :> :>> :< :<< are valid symbols\n      if (stream.eat(/[\\<\\>]/)) {\n        stream.eat(/[\\<\\>]/);\n        return \"atom\";\n      }\n\n      // :+ :- :/ :* :| :& :! are valid symbols\n      if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n        return \"atom\";\n      }\n\n      // Symbols can't start by a digit\n      if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n        stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n        // Only one ? ! = is allowed and only as the last character\n        stream.eat(/[\\?\\!\\=]/);\n        return \"atom\";\n      }\n      return \"operator\";\n    } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n      stream.eat(\"@\");\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      return \"variable-2\";\n    } else if (ch == \"$\") {\n      if (stream.eat(/[a-zA-Z_]/)) {\n        stream.eatWhile(/[\\w]/);\n      } else if (stream.eat(/\\d/)) {\n        stream.eat(/\\d/);\n      } else {\n        stream.next(); // Must be a special global like $: or $!\n      }\n      return \"variable-3\";\n    } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      stream.eat(/[\\?\\!]/);\n      if (stream.eat(\":\")) return \"atom\";\n      return \"ident\";\n    } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n      curPunc = \"|\";\n      return null;\n    } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    } else if (ch == \"-\" && stream.eat(\">\")) {\n      return \"arrow\";\n    } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n      var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n      if (ch == \".\" && !more) curPunc = \".\";\n      return \"operator\";\n    } else {\n      return null;\n    }\n  }\n\n  function regexpAhead(stream) {\n    var start = stream.pos, depth = 0, next, found = false, escaped = false\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (\"[{(\".indexOf(next) > -1) {\n          depth++\n        } else if (\"]})\".indexOf(next) > -1) {\n          depth--\n          if (depth < 0) break\n        } else if (next == \"/\" && depth == 0) {\n          found = true\n          break\n        }\n        escaped = next == \"\\\\\"\n      } else {\n        escaped = false\n      }\n    }\n    stream.backUp(stream.pos - start)\n    return found\n  }\n\n  function tokenBaseUntilBrace(depth) {\n    if (!depth) depth = 1;\n    return function(stream, state) {\n      if (stream.peek() == \"}\") {\n        if (depth == 1) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        } else {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n        }\n      } else if (stream.peek() == \"{\") {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n      }\n      return tokenBase(stream, state);\n    };\n  }\n  function tokenBaseOnce() {\n    var alreadyCalled = false;\n    return function(stream, state) {\n      if (alreadyCalled) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n      alreadyCalled = true;\n      return tokenBase(stream, state);\n    };\n  }\n  function readQuoted(quote, style, embed, unescaped) {\n    return function(stream, state) {\n      var escaped = false, ch;\n\n      if (state.context.type === 'read-quoted-paused') {\n        state.context = state.context.prev;\n        stream.eat(\"}\");\n      }\n\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && (unescaped || !escaped)) {\n          state.tokenize.pop();\n          break;\n        }\n        if (embed && ch == \"#\" && !escaped) {\n          if (stream.eat(\"{\")) {\n            if (quote == \"}\") {\n              state.context = {prev: state.context, type: 'read-quoted-paused'};\n            }\n            state.tokenize.push(tokenBaseUntilBrace());\n            break;\n          } else if (/[@\\$]/.test(stream.peek())) {\n            state.tokenize.push(tokenBaseOnce());\n            break;\n          }\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return style;\n    };\n  }\n  function readHereDoc(phrase, mayIndent) {\n    return function(stream, state) {\n      if (mayIndent) stream.eatSpace()\n      if (stream.match(phrase)) state.tokenize.pop();\n      else stream.skipToEnd();\n      return \"string\";\n    };\n  }\n  function readBlockComment(stream, state) {\n    if (stream.sol() && stream.match(\"=end\") && stream.eol())\n      state.tokenize.pop();\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: [tokenBase],\n              indented: 0,\n              context: {type: \"top\", indented: -config.indentUnit},\n              continuedLine: false,\n              lastTok: null,\n              varList: false};\n    },\n\n    token: function(stream, state) {\n      curPunc = null;\n      if (stream.sol()) state.indented = stream.indentation();\n      var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n      var thisTok = curPunc;\n      if (style == \"ident\") {\n        var word = stream.current();\n        style = state.lastTok == \".\" ? \"property\"\n          : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n          : /^[A-Z]/.test(word) ? \"tag\"\n          : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n          : \"variable\";\n        if (style == \"keyword\") {\n          thisTok = word;\n          if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n          else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n          else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n            kwtype = \"indent\";\n          else if (word == \"do\" && state.context.indented < state.indented)\n            kwtype = \"indent\";\n        }\n      }\n      if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n      if (curPunc == \"|\") state.varList = !state.varList;\n\n      if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n        state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n      else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n        state.context = state.context.prev;\n\n      if (stream.eol())\n        state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize[state.tokenize.length-1] != tokenBase) return CodeMirror.Pass;\n      var firstChar = textAfter && textAfter.charAt(0);\n      var ct = state.context;\n      var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n      return ct.indented + (closed ? 0 : config.indentUnit) +\n        (state.continuedLine ? config.indentUnit : 0);\n    },\n\n    electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n\n});\n"]},"metadata":{},"sourceType":"script"}