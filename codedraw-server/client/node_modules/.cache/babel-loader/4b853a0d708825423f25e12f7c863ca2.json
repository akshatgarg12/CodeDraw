{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  var START = 0,\n      FRONTMATTER = 1,\n      BODY = 2; // a mixed mode for Markdown text with an optional YAML front matter\n\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\");\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\");\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        };\n      },\n      token: function token(stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER;\n            return yamlMode.token(stream, state.inner);\n          } else {\n            state.state = BODY;\n            state.inner = CodeMirror.startState(innerMode);\n            return innerMode.token(stream, state.inner);\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false);\n          var style = yamlMode.token(stream, state.inner);\n\n          if (end) {\n            state.state = BODY;\n            state.inner = CodeMirror.startState(innerMode);\n          }\n\n          return style;\n        } else {\n          return innerMode.token(stream, state.inner);\n        }\n      },\n      innerMode: function innerMode(state) {\n        return {\n          mode: curMode(state),\n          state: state.inner\n        };\n      },\n      blankLine: function blankLine(state) {\n        var mode = curMode(state);\n        if (mode.blankLine) return mode.blankLine(state.inner);\n      }\n    };\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","START","FRONTMATTER","BODY","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","curMode","state","startState","inner","copyState","token","stream","match","end","sol","style","mode","blankLine"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"]},"metadata":{},"sourceType":"script"}