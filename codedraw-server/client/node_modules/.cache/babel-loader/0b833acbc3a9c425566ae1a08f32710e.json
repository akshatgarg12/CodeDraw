{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function () {\n    return {\n      token: function (stream, state) {\n        var m;\n\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function (state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function () {\n        return {\n          state: \"top\",\n          type: null\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n"]},"metadata":{},"sourceType":"script"}