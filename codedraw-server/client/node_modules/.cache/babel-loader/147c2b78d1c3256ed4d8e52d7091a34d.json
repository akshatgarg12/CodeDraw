{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function () {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); //Comment\n\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n\n        return \"comment\"; //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        } //After sign\n\n\n        if (state.sign) {\n          state.sign = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n\n            if (stream.match(number)) {\n              return \"number\";\n            }\n\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n\n          return \"comment\"; //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n\n      stream.next();\n    }\n\n    ;\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"twig\", function (config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: /\\{[{#%]/,\n      close: /[}#%]\\}/,\n      mode: twigInner,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/twig/twig.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","RegExp","join","tokenBase","stream","state","ch","peek","incomment","skipTo","skipToEnd","eatWhile","intag","match","instring","next","eat","sol","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"]},"metadata":{},"sourceType":"script"}