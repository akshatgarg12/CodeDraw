{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\",\n        COMMENT = \"comment\",\n        STRING = \"string\",\n        ATOM = \"atom\",\n        NUMBER = \"number\",\n        BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n      return obj;\n    }\n\n    var keywords = makeKeywords(\"Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda\");\n\n    function stateStack(indent, type, prev) {\n      // represents a state stack object\n      this.indent = indent;\n      this.type = type;\n      this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n      state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n      state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber(stream) {\n      return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber(stream) {\n      return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber(stream, backup) {\n      if (backup === true) {\n        stream.backUp(1);\n      }\n\n      return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber(stream) {\n      return stream.match(hexMatcher);\n    }\n\n    return {\n      startState: function () {\n        return {\n          indentStack: null,\n          indentation: 0,\n          mode: false,\n          sExprComment: false,\n          sExprQuote: false\n        };\n      },\n      token: function (stream, state) {\n        if (state.indentStack == null && stream.sol()) {\n          // update indentation, but only if indentStack is empty\n          state.indentation = stream.indentation();\n        } // skip spaces\n\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var returnType = null;\n\n        switch (state.mode) {\n          case \"string\":\n            // multi-line string parsing mode\n            var next,\n                escaped = false;\n\n            while ((next = stream.next()) != null) {\n              if (next == \"\\\"\" && !escaped) {\n                state.mode = false;\n                break;\n              }\n\n              escaped = !escaped && next == \"\\\\\";\n            }\n\n            returnType = STRING; // continue on in scheme-string mode\n\n            break;\n\n          case \"comment\":\n            // comment parsing mode\n            var next,\n                maybeEnd = false;\n\n            while ((next = stream.next()) != null) {\n              if (next == \"#\" && maybeEnd) {\n                state.mode = false;\n                break;\n              }\n\n              maybeEnd = next == \"|\";\n            }\n\n            returnType = COMMENT;\n            break;\n\n          case \"s-expr-comment\":\n            // s-expr commenting mode\n            state.mode = false;\n\n            if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n              // actually start scheme s-expr commenting mode\n              state.sExprComment = 0;\n            } else {\n              // if not we just comment the entire of the next token\n              stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n\n              returnType = COMMENT;\n              break;\n            }\n\n          default:\n            // default parsing mode\n            var ch = stream.next();\n\n            if (ch == \"\\\"\") {\n              state.mode = \"string\";\n              returnType = STRING;\n            } else if (ch == \"'\") {\n              if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n                if (typeof state.sExprQuote != \"number\") {\n                  state.sExprQuote = 0;\n                } // else already in a quoted expression\n\n\n                returnType = ATOM;\n              } else {\n                stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                returnType = ATOM;\n              }\n            } else if (ch == '#') {\n              if (stream.eat(\"|\")) {\n                // Multi-line comment\n                state.mode = \"comment\"; // toggle to comment mode\n\n                returnType = COMMENT;\n              } else if (stream.eat(/[tf]/i)) {\n                // #t/#f (atom)\n                returnType = ATOM;\n              } else if (stream.eat(';')) {\n                // S-Expr comment\n                state.mode = \"s-expr-comment\";\n                returnType = COMMENT;\n              } else {\n                var numTest = null,\n                    hasExactness = false,\n                    hasRadix = true;\n\n                if (stream.eat(/[ei]/i)) {\n                  hasExactness = true;\n                } else {\n                  stream.backUp(1); // must be radix specifier\n                }\n\n                if (stream.match(/^#b/i)) {\n                  numTest = isBinaryNumber;\n                } else if (stream.match(/^#o/i)) {\n                  numTest = isOctalNumber;\n                } else if (stream.match(/^#x/i)) {\n                  numTest = isHexNumber;\n                } else if (stream.match(/^#d/i)) {\n                  numTest = isDecimalNumber;\n                } else if (stream.match(/^[-+0-9.]/, false)) {\n                  hasRadix = false;\n                  numTest = isDecimalNumber; // re-consume the intial # if all matches failed\n                } else if (!hasExactness) {\n                  stream.eat('#');\n                }\n\n                if (numTest != null) {\n                  if (hasRadix && !hasExactness) {\n                    // consume optional exactness after radix\n                    stream.match(/^#[ei]/i);\n                  }\n\n                  if (numTest(stream)) returnType = NUMBER;\n                }\n              }\n            } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) {\n              // match non-prefixed number, must be decimal\n              returnType = NUMBER;\n            } else if (ch == \";\") {\n              // comment\n              stream.skipToEnd(); // rest of the line is a comment\n\n              returnType = COMMENT;\n            } else if (ch == \"(\" || ch == \"[\") {\n              var keyWord = '';\n              var indentTemp = stream.column(),\n                  letter;\n              /**\n              Either\n              (indent-word ..\n              (non-indent-word ..\n              (;something else, bracket, etc.\n              */\n\n              while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                keyWord += letter;\n              }\n\n              if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {\n                // indent-word\n                pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n              } else {\n                // non-indent word\n                // we continue eating the spaces\n                stream.eatSpace();\n\n                if (stream.eol() || stream.peek() == \";\") {\n                  // nothing significant after\n                  // we restart indentation 1 space after\n                  pushStack(state, indentTemp + 1, ch);\n                } else {\n                  pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                }\n              }\n\n              stream.backUp(stream.current().length - 1); // undo all the eating\n\n              if (typeof state.sExprComment == \"number\") state.sExprComment++;\n              if (typeof state.sExprQuote == \"number\") state.sExprQuote++;\n              returnType = BRACKET;\n            } else if (ch == \")\" || ch == \"]\") {\n              returnType = BRACKET;\n\n              if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n                popStack(state);\n\n                if (typeof state.sExprComment == \"number\") {\n                  if (--state.sExprComment == 0) {\n                    returnType = COMMENT; // final closing bracket\n\n                    state.sExprComment = false; // turn off s-expr commenting mode\n                  }\n                }\n\n                if (typeof state.sExprQuote == \"number\") {\n                  if (--state.sExprQuote == 0) {\n                    returnType = ATOM; // final closing bracket\n\n                    state.sExprQuote = false; // turn off s-expr quote mode\n                  }\n                }\n              }\n            } else {\n              stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n              if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                returnType = BUILTIN;\n              } else returnType = \"variable\";\n            }\n\n        }\n\n        return typeof state.sExprComment == \"number\" ? COMMENT : typeof state.sExprQuote == \"number\" ? ATOM : returnType;\n      },\n      indent: function (state) {\n        if (state.indentStack == null) return state.indentation;\n        return state.indentStack.indent;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-scheme\", \"scheme\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/scheme/scheme.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","BUILTIN","COMMENT","STRING","ATOM","NUMBER","BRACKET","INDENT_WORD_SKIP","makeKeywords","str","obj","words","split","i","length","keywords","indentKeys","stateStack","indent","type","prev","pushStack","state","indentStack","popStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","startState","indentation","mode","sExprComment","sExprQuote","token","sol","eatSpace","returnType","next","escaped","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","test","skipToEnd","keyWord","indentTemp","column","letter","propertyIsEnumerable","eol","current","closeBrackets","pairs","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n        ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = makeKeywords(\"Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda\");\n\n    function stateStack(indent, type, prev) { // represents a state stack object\n        this.indent = indent;\n        this.type = type;\n        this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n        state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n        state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber (stream) {\n        return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber (stream) {\n        return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber (stream, backup) {\n        if (backup === true) {\n            stream.backUp(1);\n        }\n        return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber (stream) {\n        return stream.match(hexMatcher);\n    }\n\n    return {\n        startState: function () {\n            return {\n                indentStack: null,\n                indentation: 0,\n                mode: false,\n                sExprComment: false,\n                sExprQuote: false\n            };\n        },\n\n        token: function (stream, state) {\n            if (state.indentStack == null && stream.sol()) {\n                // update indentation, but only if indentStack is empty\n                state.indentation = stream.indentation();\n            }\n\n            // skip spaces\n            if (stream.eatSpace()) {\n                return null;\n            }\n            var returnType = null;\n\n            switch(state.mode){\n                case \"string\": // multi-line string parsing mode\n                    var next, escaped = false;\n                    while ((next = stream.next()) != null) {\n                        if (next == \"\\\"\" && !escaped) {\n\n                            state.mode = false;\n                            break;\n                        }\n                        escaped = !escaped && next == \"\\\\\";\n                    }\n                    returnType = STRING; // continue on in scheme-string mode\n                    break;\n                case \"comment\": // comment parsing mode\n                    var next, maybeEnd = false;\n                    while ((next = stream.next()) != null) {\n                        if (next == \"#\" && maybeEnd) {\n\n                            state.mode = false;\n                            break;\n                        }\n                        maybeEnd = (next == \"|\");\n                    }\n                    returnType = COMMENT;\n                    break;\n                case \"s-expr-comment\": // s-expr commenting mode\n                    state.mode = false;\n                    if(stream.peek() == \"(\" || stream.peek() == \"[\"){\n                        // actually start scheme s-expr commenting mode\n                        state.sExprComment = 0;\n                    }else{\n                        // if not we just comment the entire of the next token\n                        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n                        returnType = COMMENT;\n                        break;\n                    }\n                default: // default parsing mode\n                    var ch = stream.next();\n\n                    if (ch == \"\\\"\") {\n                        state.mode = \"string\";\n                        returnType = STRING;\n\n                    } else if (ch == \"'\") {\n                        if (stream.peek() == \"(\" || stream.peek() == \"[\"){\n                            if (typeof state.sExprQuote != \"number\") {\n                                state.sExprQuote = 0;\n                            } // else already in a quoted expression\n                            returnType = ATOM;\n                        } else {\n                            stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                            returnType = ATOM;\n                        }\n                    } else if (ch == '#') {\n                        if (stream.eat(\"|\")) {                    // Multi-line comment\n                            state.mode = \"comment\"; // toggle to comment mode\n                            returnType = COMMENT;\n                        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n                            returnType = ATOM;\n                        } else if (stream.eat(';')) {                // S-Expr comment\n                            state.mode = \"s-expr-comment\";\n                            returnType = COMMENT;\n                        } else {\n                            var numTest = null, hasExactness = false, hasRadix = true;\n                            if (stream.eat(/[ei]/i)) {\n                                hasExactness = true;\n                            } else {\n                                stream.backUp(1);       // must be radix specifier\n                            }\n                            if (stream.match(/^#b/i)) {\n                                numTest = isBinaryNumber;\n                            } else if (stream.match(/^#o/i)) {\n                                numTest = isOctalNumber;\n                            } else if (stream.match(/^#x/i)) {\n                                numTest = isHexNumber;\n                            } else if (stream.match(/^#d/i)) {\n                                numTest = isDecimalNumber;\n                            } else if (stream.match(/^[-+0-9.]/, false)) {\n                                hasRadix = false;\n                                numTest = isDecimalNumber;\n                            // re-consume the intial # if all matches failed\n                            } else if (!hasExactness) {\n                                stream.eat('#');\n                            }\n                            if (numTest != null) {\n                                if (hasRadix && !hasExactness) {\n                                    // consume optional exactness after radix\n                                    stream.match(/^#[ei]/i);\n                                }\n                                if (numTest(stream))\n                                    returnType = NUMBER;\n                            }\n                        }\n                    } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n                        returnType = NUMBER;\n                    } else if (ch == \";\") { // comment\n                        stream.skipToEnd(); // rest of the line is a comment\n                        returnType = COMMENT;\n                    } else if (ch == \"(\" || ch == \"[\") {\n                      var keyWord = ''; var indentTemp = stream.column(), letter;\n                        /**\n                        Either\n                        (indent-word ..\n                        (non-indent-word ..\n                        (;something else, bracket, etc.\n                        */\n\n                        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                            keyWord += letter;\n                        }\n\n                        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n                            pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n                        } else { // non-indent word\n                            // we continue eating the spaces\n                            stream.eatSpace();\n                            if (stream.eol() || stream.peek() == \";\") {\n                                // nothing significant after\n                                // we restart indentation 1 space after\n                                pushStack(state, indentTemp + 1, ch);\n                            } else {\n                                pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                            }\n                        }\n                        stream.backUp(stream.current().length - 1); // undo all the eating\n\n                        if(typeof state.sExprComment == \"number\") state.sExprComment++;\n                        if(typeof state.sExprQuote == \"number\") state.sExprQuote++;\n\n                        returnType = BRACKET;\n                    } else if (ch == \")\" || ch == \"]\") {\n                        returnType = BRACKET;\n                        if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n                            popStack(state);\n\n                            if(typeof state.sExprComment == \"number\"){\n                                if(--state.sExprComment == 0){\n                                    returnType = COMMENT; // final closing bracket\n                                    state.sExprComment = false; // turn off s-expr commenting mode\n                                }\n                            }\n                            if(typeof state.sExprQuote == \"number\"){\n                                if(--state.sExprQuote == 0){\n                                    returnType = ATOM; // final closing bracket\n                                    state.sExprQuote = false; // turn off s-expr quote mode\n                                }\n                            }\n                        }\n                    } else {\n                        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n                        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                            returnType = BUILTIN;\n                        } else returnType = \"variable\";\n                    }\n            }\n            return (typeof state.sExprComment == \"number\") ? COMMENT : ((typeof state.sExprQuote == \"number\") ? ATOM : returnType);\n        },\n\n        indent: function (state) {\n            if (state.indentStack == null) return state.indentation;\n            return state.indentStack.indent;\n        },\n\n        closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n        lineComment: \";;\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/x-scheme\", \"scheme\");\n\n});\n"]},"metadata":{},"sourceType":"script"}