{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function () {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\", \"close\", \"do\", \"else\", \"for\", \"goto\", \"halt\", \"hang\", \"if\", \"job\", \"kill\", \"lock\", \"merge\", \"new\", \"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"]; // The following list includes instrinsic functions _and_ special variables\n\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      } // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n\n\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") {\n        // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0) state.commandMode = 1;else if (state.commandMode < 0 || state.commandMode == 2) state.commandMode = 0;\n      } else if (ch != \".\" && state.commandMode > 0) {\n        if (ch == \":\") state.commandMode = -1; // SIS - Command post-conditional\n        else state.commandMode = 2;\n      } // Do not color parameter list as line tag\n\n\n      if (ch === \"(\" || ch === \"\\u0009\") state.label = false; // MUMPS comment starts with \";\"\n\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n\n\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/)) return \"number\"; // Handle Strings\n\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } // Handle operators and Delimiters\n\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators)) return \"operator\"; // Prevents leading \".\" in DO block from falling through to error\n\n      if (stream.match(singleDelimiters)) return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command)) return \"variable-2\";\n      if (stream.match(intrinsicFuncs)) return \"builtin\";\n      if (stream.match(identifiers)) return \"variable\"; // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      } // MUMPS Indirection\n\n\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function () {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n      token: function (stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/mumps/mumps.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","commandKeywords","intrinsicFuncsWords","intrinsicFuncs","command","tokenBase","stream","state","sol","label","commandMode","ch","peek","skipToEnd","match","skipTo","next","test","eatWhile","startState","token","style","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function() {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n    // The following list includes instrinsic functions _and_ special variables\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      }\n\n      // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0)\n          state.commandMode = 1;\n        else if ((state.commandMode < 0) || (state.commandMode == 2))\n          state.commandMode = 0;\n      } else if ((ch != \".\") && (state.commandMode > 0)) {\n        if (ch == \":\")\n          state.commandMode = -1;   // SIS - Command post-conditional\n        else\n          state.commandMode = 2;\n      }\n\n      // Do not color parameter list as line tag\n      if ((ch === \"(\") || (ch === \"\\u0009\"))\n        state.label = false;\n\n      // MUMPS comment starts with \";\"\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n        return \"number\";\n\n      // Handle Strings\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      // Prevents leading \".\" in DO block from falling through to error\n      if (stream.match(singleDelimiters))\n        return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command))\n        return \"variable-2\";\n\n      if (stream.match(intrinsicFuncs))\n        return \"builtin\";\n\n      if (stream.match(identifiers))\n        return \"variable\";\n\n      // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      }\n\n      // MUMPS Indirection\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function() {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});\n"]},"metadata":{},"sourceType":"script"}