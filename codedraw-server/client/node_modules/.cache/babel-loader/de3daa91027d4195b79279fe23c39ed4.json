{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function forEach(arr, f) {\n    for (var i = 0; i < arr.length; i++) f(arr[i], i);\n  }\n\n  function some(arr, f) {\n    for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;\n\n    return false;\n  }\n\n  CodeMirror.defineMode(\"dylan\", function (_config) {\n    // Words\n    var words = {\n      // Words that introduce unnamed definitions like \"define interface\"\n      unnamedDefinition: [\"interface\"],\n      // Words that introduce simple named definitions like \"define library\"\n      namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n      // Words that introduce type definitions like \"define class\".\n      // These are also parameterized like \"define method\" and are\n      // appended to otherParameterizedDefinitionWords\n      typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n      // Words that introduce trickier definitions like \"define method\".\n      // These require special definitions to be added to startExpressions\n      otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n      // Words that introduce module constant definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      constantSimpleDefinition: [\"constant\"],\n      // Words that introduce module variable definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      variableSimpleDefinition: [\"variable\"],\n      // Other words that introduce simple definitions\n      // (without implicit bodies).\n      otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n      // Words that begin statements with implicit bodies.\n      statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n      // Patterns that act as separators in compound statements.\n      // This may include any general pattern that must be indented\n      // specially.\n      separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n      // Keywords that do not require special indentation handling,\n      // but which should be highlighted\n      other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n      // Condition signaling function calls\n      signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n    };\n    words[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\n    words[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\n    words[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\n    words[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\n    words[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]); // Patterns\n\n    var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n    var symbol = new RegExp(\"^\" + symbolPattern);\n    var patterns = {\n      // Symbols with special syntax\n      symbolKeyword: symbolPattern + \":\",\n      symbolClass: \"<\" + symbolPattern + \">\",\n      symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n      symbolConstant: \"\\\\$\" + symbolPattern\n    };\n    var patternStyles = {\n      symbolKeyword: \"atom\",\n      symbolClass: \"tag\",\n      symbolGlobal: \"variable-2\",\n      symbolConstant: \"variable-3\"\n    }; // Compile all patterns to regular expressions\n\n    for (var patternName in patterns) if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]); // Names beginning \"with-\" and \"without-\" are commonly\n    // used as statement macro\n\n\n    patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n    var styles = {};\n    styles[\"keyword\"] = \"keyword\";\n    styles[\"definition\"] = \"def\";\n    styles[\"simpleDefinition\"] = \"def\";\n    styles[\"signalingCalls\"] = \"builtin\"; // protected words lookup table\n\n    var wordLookup = {};\n    var styleLookup = {};\n    forEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n      forEach(words[type], function (word) {\n        wordLookup[word] = type;\n        styleLookup[word] = styles[type];\n      });\n    });\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      // String\n      var ch = stream.peek();\n\n      if (ch == \"'\" || ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString(ch, \"string\"));\n      } // Comment\n      else if (ch == \"/\") {\n          stream.next();\n\n          if (stream.eat(\"*\")) {\n            return chain(stream, state, tokenComment);\n          } else if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n          }\n\n          stream.backUp(1);\n        } // Decimal\n        else if (/[+\\-\\d\\.]/.test(ch)) {\n            if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n              return \"number\";\n            }\n          } // Hash\n          else if (ch == \"#\") {\n              stream.next(); // Symbol with string syntax\n\n              ch = stream.peek();\n\n              if (ch == '\"') {\n                stream.next();\n                return chain(stream, state, tokenString('\"', \"string\"));\n              } // Binary number\n              else if (ch == \"b\") {\n                  stream.next();\n                  stream.eatWhile(/[01]/);\n                  return \"number\";\n                } // Hex number\n                else if (ch == \"x\") {\n                    stream.next();\n                    stream.eatWhile(/[\\da-f]/i);\n                    return \"number\";\n                  } // Octal number\n                  else if (ch == \"o\") {\n                      stream.next();\n                      stream.eatWhile(/[0-7]/);\n                      return \"number\";\n                    } // Token concatenation in macros\n                    else if (ch == '#') {\n                        stream.next();\n                        return \"punctuation\";\n                      } // Sequence literals\n                      else if (ch == '[' || ch == '(') {\n                          stream.next();\n                          return \"bracket\"; // Hash symbol\n                        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n                          return \"atom\";\n                        } else {\n                          stream.eatWhile(/[-a-zA-Z]/);\n                          return \"error\";\n                        }\n            } else if (ch == \"~\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                ch = stream.peek();\n\n                if (ch == \"=\") {\n                  stream.next();\n                  return \"operator\";\n                }\n\n                return \"operator\";\n              }\n\n              return \"operator\";\n            } else if (ch == \":\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                return \"operator\";\n              } else if (ch == \":\") {\n                stream.next();\n                return \"punctuation\";\n              }\n            } else if (\"[](){}\".indexOf(ch) != -1) {\n              stream.next();\n              return \"bracket\";\n            } else if (\".,\".indexOf(ch) != -1) {\n              stream.next();\n              return \"punctuation\";\n            } else if (stream.match(\"end\")) {\n              return \"keyword\";\n            }\n\n      for (var name in patterns) {\n        if (patterns.hasOwnProperty(name)) {\n          var pattern = patterns[name];\n          if (pattern instanceof Array && some(pattern, function (p) {\n            return stream.match(p);\n          }) || stream.match(pattern)) return patternStyles[name];\n        }\n      }\n\n      if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n        stream.next();\n        return \"operator\";\n      }\n\n      if (stream.match(\"define\")) {\n        return \"def\";\n      } else {\n        stream.eatWhile(/[\\w\\-]/); // Keyword\n\n        if (wordLookup.hasOwnProperty(stream.current())) {\n          return styleLookup[stream.current()];\n        } else if (stream.current().match(symbol)) {\n          return \"variable\";\n        } else {\n          stream.next();\n          return \"variable-2\";\n        }\n      }\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          maybeNested = false,\n          nestedCount = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          if (nestedCount > 0) {\n            nestedCount--;\n          } else {\n            state.tokenize = tokenBase;\n            break;\n          }\n        } else if (ch == \"*\" && maybeNested) {\n          nestedCount++;\n        }\n\n        maybeEnd = ch == \"*\";\n        maybeNested = ch == \"/\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote, style) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) {\n          state.tokenize = tokenBase;\n        }\n\n        return style;\n      };\n    } // Interface\n\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          currentIndent: 0\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/dylan/dylan.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","forEach","arr","f","i","length","some","defineMode","_config","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","wordLookup","styleLookup","type","word","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEA,WAASC,OAAT,CAAiBC,GAAjB,EAAsBC,CAAtB,EAAyB;AACvB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqCD,CAAC,CAACD,GAAG,CAACE,CAAD,CAAJ,EAASA,CAAT,CAAD;AACtC;;AACD,WAASE,IAAT,CAAcJ,GAAd,EAAmBC,CAAnB,EAAsB;AACpB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC,IAAID,CAAC,CAACD,GAAG,CAACE,CAAD,CAAJ,EAASA,CAAT,CAAL,EAAkB,OAAO,IAAP;;AACvD,WAAO,KAAP;AACD;;AAEDJ,EAAAA,UAAU,CAACO,UAAX,CAAsB,OAAtB,EAA+B,UAASC,OAAT,EAAkB;AAC/C;AACA,QAAIC,KAAK,GAAG;AACV;AACAC,MAAAA,iBAAiB,EAAE,CAAC,WAAD,CAFT;AAIV;AACAC,MAAAA,eAAe,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EACC,UADD,EACa,SADb,EAEC,YAFD,EAEe,oBAFf,CALP;AAUV;AACA;AACA;AACAC,MAAAA,2BAA2B,EAAE,CAAC,OAAD,EAAU,WAAV,EAAuB,kBAAvB,CAbnB;AAeV;AACA;AACAC,MAAAA,4BAA4B,EAAE,CAAC,QAAD,EAAW,UAAX,EACC,YADD,EACe,WADf,CAjBpB;AAqBV;AACA;AACA;AACAC,MAAAA,wBAAwB,EAAE,CAAC,UAAD,CAxBhB;AA0BV;AACA;AACA;AACAC,MAAAA,wBAAwB,EAAE,CAAC,UAAD,CA7BhB;AA+BV;AACA;AACAC,MAAAA,qBAAqB,EAAE,CAAC,SAAD,EAAY,QAAZ,EACC,gBADD,EAEC,OAFD,CAjCb;AAsCV;AACAC,MAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,MAAnC,EACC,KADD,EACQ,QADR,EACkB,MADlB,EAC0B,QAD1B,EACoC,OADpC,EAEC,OAFD,EAEU,SAFV,EAEqB,WAFrB,EAEkC,cAFlC,CAvCD;AA4CV;AACA;AACA;AACAC,MAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,EAAoC,MAApC,EACC,QADD,EACW,YADX,CA/CD;AAmDV;AACA;AACAC,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,SAAjC,EAA4C,IAA5C,EACC,UADD,EACa,KADb,EACoB,OADpB,EAC6B,WAD7B,EAC0C,MAD1C,EAEC,UAFD,EAEa,MAFb,EAEqB,IAFrB,EAE2B,UAF3B,EAEuC,SAFvC,CArDG;AA0DV;AACAC,MAAAA,cAAc,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EACC,OADD,EACU,YADV,EACwB,OADxB;AA3DN,KAAZ;AAgEAX,IAAAA,KAAK,CAAC,iBAAD,CAAL,GACEA,KAAK,CAAC,mBAAD,CAAL,CACCY,MADD,CACQZ,KAAK,CAAC,iBAAD,CADb,EAECY,MAFD,CAEQZ,KAAK,CAAC,8BAAD,CAFb,CADF;AAKAA,IAAAA,KAAK,CAAC,YAAD,CAAL,GACEA,KAAK,CAAC,6BAAD,CAAL,CACCY,MADD,CACQZ,KAAK,CAAC,iBAAD,CADb,CADF;AAIAA,IAAAA,KAAK,CAAC,yBAAD,CAAL,GACEA,KAAK,CAAC,6BAAD,CAAL,CACCY,MADD,CACQZ,KAAK,CAAC,8BAAD,CADb,CADF;AAIAA,IAAAA,KAAK,CAAC,kBAAD,CAAL,GACEA,KAAK,CAAC,0BAAD,CAAL,CACCY,MADD,CACQZ,KAAK,CAAC,0BAAD,CADb,EAECY,MAFD,CAEQZ,KAAK,CAAC,uBAAD,CAFb,CADF;AAKAA,IAAAA,KAAK,CAAC,SAAD,CAAL,GACEA,KAAK,CAAC,WAAD,CAAL,CACCY,MADD,CACQZ,KAAK,CAAC,WAAD,CADb,EAECY,MAFD,CAEQZ,KAAK,CAAC,OAAD,CAFb,CADF,CApF+C,CAyF/C;;AACA,QAAIa,aAAa,GAAG,qBAApB;AACA,QAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,MAAMF,aAAjB,CAAb;AACA,QAAIG,QAAQ,GAAG;AACb;AACAC,MAAAA,aAAa,EAAEJ,aAAa,GAAG,GAFlB;AAGbK,MAAAA,WAAW,EAAE,MAAML,aAAN,GAAsB,GAHtB;AAIbM,MAAAA,YAAY,EAAE,QAAQN,aAAR,GAAwB,KAJzB;AAKbO,MAAAA,cAAc,EAAE,QAAQP;AALX,KAAf;AAOA,QAAIQ,aAAa,GAAG;AAClBJ,MAAAA,aAAa,EAAE,MADG;AAElBC,MAAAA,WAAW,EAAE,KAFK;AAGlBC,MAAAA,YAAY,EAAE,YAHI;AAIlBC,MAAAA,cAAc,EAAE;AAJE,KAApB,CAnG+C,CA0G/C;;AACA,SAAK,IAAIE,WAAT,IAAwBN,QAAxB,EACE,IAAIA,QAAQ,CAACO,cAAT,CAAwBD,WAAxB,CAAJ,EACEN,QAAQ,CAACM,WAAD,CAAR,GAAwB,IAAIP,MAAJ,CAAW,MAAMC,QAAQ,CAACM,WAAD,CAAzB,CAAxB,CA7G2C,CA+G/C;AACA;;;AACAN,IAAAA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAC,mCAAD,CAAtB;AAEA,QAAIQ,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,CAAC,SAAD,CAAN,GAAoB,SAApB;AACAA,IAAAA,MAAM,CAAC,YAAD,CAAN,GAAuB,KAAvB;AACAA,IAAAA,MAAM,CAAC,kBAAD,CAAN,GAA6B,KAA7B;AACAA,IAAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,SAA3B,CAvH+C,CAyH/C;;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,WAAW,GAAG,EAAlB;AAEAlC,IAAAA,OAAO,CAAC,CACN,SADM,EAEN,YAFM,EAGN,kBAHM,EAIN,gBAJM,CAAD,EAKJ,UAASmC,IAAT,EAAe;AAChBnC,MAAAA,OAAO,CAACQ,KAAK,CAAC2B,IAAD,CAAN,EAAc,UAASC,IAAT,EAAe;AAClCH,QAAAA,UAAU,CAACG,IAAD,CAAV,GAAmBD,IAAnB;AACAD,QAAAA,WAAW,CAACE,IAAD,CAAX,GAAoBJ,MAAM,CAACG,IAAD,CAA1B;AACD,OAHM,CAAP;AAID,KAVM,CAAP;;AAaA,aAASE,KAAT,CAAeC,MAAf,EAAuBC,KAAvB,EAA8BrC,CAA9B,EAAiC;AAC/BqC,MAAAA,KAAK,CAACC,QAAN,GAAiBtC,CAAjB;AACA,aAAOA,CAAC,CAACoC,MAAD,EAASC,KAAT,CAAR;AACD;;AAED,aAASE,SAAT,CAAmBH,MAAnB,EAA2BC,KAA3B,EAAkC;AAChC;AACA,UAAIG,EAAE,GAAGJ,MAAM,CAACK,IAAP,EAAT;;AACA,UAAID,EAAE,IAAI,GAAN,IAAaA,EAAE,IAAI,GAAvB,EAA4B;AAC1BJ,QAAAA,MAAM,CAACM,IAAP;AACA,eAAOP,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBM,WAAW,CAACH,EAAD,EAAK,QAAL,CAA3B,CAAZ;AACD,OAHD,CAIA;AAJA,WAKK,IAAIA,EAAE,IAAI,GAAV,EAAe;AAClBJ,UAAAA,MAAM,CAACM,IAAP;;AACA,cAAIN,MAAM,CAACQ,GAAP,CAAW,GAAX,CAAJ,EAAqB;AACnB,mBAAOT,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBQ,YAAhB,CAAZ;AACD,WAFD,MAEO,IAAIT,MAAM,CAACQ,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BR,YAAAA,MAAM,CAACU,SAAP;AACA,mBAAO,SAAP;AACD;;AACDV,UAAAA,MAAM,CAACW,MAAP,CAAc,CAAd;AACD,SATI,CAUL;AAVK,aAWA,IAAI,YAAYC,IAAZ,CAAiBR,EAAjB,CAAJ,EAA0B;AAC7B,gBAAIJ,MAAM,CAACa,KAAP,CAAa,2CAAb,KACAb,MAAM,CAACa,KAAP,CAAa,kCAAb,CADA,IAEAb,MAAM,CAACa,KAAP,CAAa,WAAb,CAFJ,EAE+B;AAC7B,qBAAO,QAAP;AACD;AACF,WANI,CAOL;AAPK,eAQA,IAAIT,EAAE,IAAI,GAAV,EAAe;AAClBJ,cAAAA,MAAM,CAACM,IAAP,GADkB,CAElB;;AACAF,cAAAA,EAAE,GAAGJ,MAAM,CAACK,IAAP,EAAL;;AACA,kBAAID,EAAE,IAAI,GAAV,EAAe;AACbJ,gBAAAA,MAAM,CAACM,IAAP;AACA,uBAAOP,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBM,WAAW,CAAC,GAAD,EAAM,QAAN,CAA3B,CAAZ;AACD,eAHD,CAIA;AAJA,mBAKK,IAAIH,EAAE,IAAI,GAAV,EAAe;AAClBJ,kBAAAA,MAAM,CAACM,IAAP;AACAN,kBAAAA,MAAM,CAACc,QAAP,CAAgB,MAAhB;AACA,yBAAO,QAAP;AACD,iBAJI,CAKL;AALK,qBAMA,IAAIV,EAAE,IAAI,GAAV,EAAe;AAClBJ,oBAAAA,MAAM,CAACM,IAAP;AACAN,oBAAAA,MAAM,CAACc,QAAP,CAAgB,UAAhB;AACA,2BAAO,QAAP;AACD,mBAJI,CAKL;AALK,uBAMA,IAAIV,EAAE,IAAI,GAAV,EAAe;AAClBJ,sBAAAA,MAAM,CAACM,IAAP;AACAN,sBAAAA,MAAM,CAACc,QAAP,CAAgB,OAAhB;AACA,6BAAO,QAAP;AACD,qBAJI,CAKL;AALK,yBAMA,IAAIV,EAAE,IAAI,GAAV,EAAe;AAClBJ,wBAAAA,MAAM,CAACM,IAAP;AACA,+BAAO,aAAP;AACD,uBAHI,CAIL;AAJK,2BAKA,IAAKF,EAAE,IAAI,GAAP,IAAgBA,EAAE,IAAI,GAA1B,EAAgC;AACnCJ,0BAAAA,MAAM,CAACM,IAAP;AACA,iCAAO,SAAP,CAFmC,CAGrC;AACC,yBAJI,MAIE,IAAIN,MAAM,CAACa,KAAP,CAAa,qCAAb,CAAJ,EAAyD;AAC9D,iCAAO,MAAP;AACD,yBAFM,MAEA;AACLb,0BAAAA,MAAM,CAACc,QAAP,CAAgB,WAAhB;AACA,iCAAO,OAAP;AACD;AACF,aA1CI,MA0CE,IAAIV,EAAE,IAAI,GAAV,EAAe;AACpBJ,cAAAA,MAAM,CAACM,IAAP;AACAF,cAAAA,EAAE,GAAGJ,MAAM,CAACK,IAAP,EAAL;;AACA,kBAAID,EAAE,IAAI,GAAV,EAAe;AACbJ,gBAAAA,MAAM,CAACM,IAAP;AACAF,gBAAAA,EAAE,GAAGJ,MAAM,CAACK,IAAP,EAAL;;AACA,oBAAID,EAAE,IAAI,GAAV,EAAe;AACbJ,kBAAAA,MAAM,CAACM,IAAP;AACA,yBAAO,UAAP;AACD;;AACD,uBAAO,UAAP;AACD;;AACD,qBAAO,UAAP;AACD,aAbM,MAaA,IAAIF,EAAE,IAAI,GAAV,EAAe;AACpBJ,cAAAA,MAAM,CAACM,IAAP;AACAF,cAAAA,EAAE,GAAGJ,MAAM,CAACK,IAAP,EAAL;;AACA,kBAAID,EAAE,IAAI,GAAV,EAAe;AACbJ,gBAAAA,MAAM,CAACM,IAAP;AACA,uBAAO,UAAP;AACD,eAHD,MAGO,IAAIF,EAAE,IAAI,GAAV,EAAe;AACpBJ,gBAAAA,MAAM,CAACM,IAAP;AACA,uBAAO,aAAP;AACD;AACF,aAVM,MAUA,IAAI,SAASS,OAAT,CAAiBX,EAAjB,KAAwB,CAAC,CAA7B,EAAgC;AACrCJ,cAAAA,MAAM,CAACM,IAAP;AACA,qBAAO,SAAP;AACD,aAHM,MAGA,IAAI,KAAKS,OAAL,CAAaX,EAAb,KAAoB,CAAC,CAAzB,EAA4B;AACjCJ,cAAAA,MAAM,CAACM,IAAP;AACA,qBAAO,aAAP;AACD,aAHM,MAGA,IAAIN,MAAM,CAACa,KAAP,CAAa,KAAb,CAAJ,EAAyB;AAC9B,qBAAO,SAAP;AACD;;AACD,WAAK,IAAIG,IAAT,IAAiB9B,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAACO,cAAT,CAAwBuB,IAAxB,CAAJ,EAAmC;AACjC,cAAIC,OAAO,GAAG/B,QAAQ,CAAC8B,IAAD,CAAtB;AACA,cAAKC,OAAO,YAAYC,KAAnB,IAA4BnD,IAAI,CAACkD,OAAD,EAAU,UAASE,CAAT,EAAY;AACzD,mBAAOnB,MAAM,CAACa,KAAP,CAAaM,CAAb,CAAP;AACD,WAFoC,CAAjC,IAEGnB,MAAM,CAACa,KAAP,CAAaI,OAAb,CAFP,EAGE,OAAO1B,aAAa,CAACyB,IAAD,CAApB;AACH;AACF;;AACD,UAAI,iBAAiBJ,IAAjB,CAAsBR,EAAtB,CAAJ,EAA+B;AAC7BJ,QAAAA,MAAM,CAACM,IAAP;AACA,eAAO,UAAP;AACD;;AACD,UAAIN,MAAM,CAACa,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAC1B,eAAO,KAAP;AACD,OAFD,MAEO;AACLb,QAAAA,MAAM,CAACc,QAAP,CAAgB,QAAhB,EADK,CAEL;;AACA,YAAInB,UAAU,CAACF,cAAX,CAA0BO,MAAM,CAACoB,OAAP,EAA1B,CAAJ,EAAiD;AAC/C,iBAAOxB,WAAW,CAACI,MAAM,CAACoB,OAAP,EAAD,CAAlB;AACD,SAFD,MAEO,IAAIpB,MAAM,CAACoB,OAAP,GAAiBP,KAAjB,CAAuB7B,MAAvB,CAAJ,EAAoC;AACzC,iBAAO,UAAP;AACD,SAFM,MAEA;AACLgB,UAAAA,MAAM,CAACM,IAAP;AACA,iBAAO,YAAP;AACD;AACF;AACF;;AAED,aAASG,YAAT,CAAsBT,MAAtB,EAA8BC,KAA9B,EAAqC;AACnC,UAAIoB,QAAQ,GAAG,KAAf;AAAA,UAAsBC,WAAW,GAAG,KAApC;AAAA,UAA2CC,WAAW,GAAG,CAAzD;AAAA,UAA4DnB,EAA5D;;AACA,aAAQA,EAAE,GAAGJ,MAAM,CAACM,IAAP,EAAb,EAA6B;AAC3B,YAAIF,EAAE,IAAI,GAAN,IAAaiB,QAAjB,EAA2B;AACzB,cAAIE,WAAW,GAAG,CAAlB,EAAqB;AACnBA,YAAAA,WAAW;AACZ,WAFD,MAEO;AACLtB,YAAAA,KAAK,CAACC,QAAN,GAAiBC,SAAjB;AACA;AACD;AACF,SAPD,MAOO,IAAIC,EAAE,IAAI,GAAN,IAAakB,WAAjB,EAA8B;AACnCC,UAAAA,WAAW;AACZ;;AACDF,QAAAA,QAAQ,GAAIjB,EAAE,IAAI,GAAlB;AACAkB,QAAAA,WAAW,GAAIlB,EAAE,IAAI,GAArB;AACD;;AACD,aAAO,SAAP;AACD;;AAED,aAASG,WAAT,CAAqBiB,KAArB,EAA4BC,KAA5B,EAAmC;AACjC,aAAO,UAASzB,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAIyB,OAAO,GAAG,KAAd;AAAA,YAAqBpB,IAArB;AAAA,YAA2BqB,GAAG,GAAG,KAAjC;;AACA,eAAO,CAACrB,IAAI,GAAGN,MAAM,CAACM,IAAP,EAAR,KAA0B,IAAjC,EAAuC;AACrC,cAAIA,IAAI,IAAIkB,KAAR,IAAiB,CAACE,OAAtB,EAA+B;AAC7BC,YAAAA,GAAG,GAAG,IAAN;AACA;AACD;;AACDD,UAAAA,OAAO,GAAG,CAACA,OAAD,IAAYpB,IAAI,IAAI,IAA9B;AACD;;AACD,YAAIqB,GAAG,IAAI,CAACD,OAAZ,EAAqB;AACnBzB,UAAAA,KAAK,CAACC,QAAN,GAAiBC,SAAjB;AACD;;AACD,eAAOsB,KAAP;AACD,OAbD;AAcD,KAnT8C,CAqT/C;;;AACA,WAAO;AACLG,MAAAA,UAAU,EAAE,YAAW;AACrB,eAAO;AACL1B,UAAAA,QAAQ,EAAEC,SADL;AAEL0B,UAAAA,aAAa,EAAE;AAFV,SAAP;AAID,OANI;AAOLC,MAAAA,KAAK,EAAE,UAAS9B,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAID,MAAM,CAAC+B,QAAP,EAAJ,EACE,OAAO,IAAP;AACF,YAAIN,KAAK,GAAGxB,KAAK,CAACC,QAAN,CAAeF,MAAf,EAAuBC,KAAvB,CAAZ;AACA,eAAOwB,KAAP;AACD,OAZI;AAaLO,MAAAA,iBAAiB,EAAE,IAbd;AAcLC,MAAAA,eAAe,EAAE;AAdZ,KAAP;AAgBD,GAtUD;AAwUAxE,EAAAA,UAAU,CAACyE,UAAX,CAAsB,cAAtB,EAAsC,OAAtC;AAEC,CA5VD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\nCodeMirror.defineMode(\"dylan\", function(_config) {\n  // Words\n  var words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\"interface\"],\n\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\"module\", \"library\", \"macro\",\n                      \"C-struct\", \"C-union\",\n                      \"C-function\", \"C-callable-wrapper\"\n                     ],\n\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\"method\", \"function\",\n                                   \"C-variable\", \"C-address\"\n                                  ],\n\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\"constant\"],\n\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\"variable\"],\n\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\"generic\", \"domain\",\n                            \"C-pointer-type\",\n                            \"table\"\n                           ],\n\n    // Words that begin statements with implicit bodies.\n    statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n                \"for\", \"select\", \"when\", \"unless\", \"until\",\n                \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n               ],\n\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n                \"elseif\", \"afterwards\"\n               ],\n\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n            \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n            \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n           ],\n\n    // Condition signaling function calls\n    signalingCalls: [\"signal\", \"error\", \"cerror\",\n                     \"break\", \"check-type\", \"abort\"\n                    ]\n  };\n\n  words[\"otherDefinition\"] =\n    words[\"unnamedDefinition\"]\n    .concat(words[\"namedDefinition\"])\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"definition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherDefinition\"]);\n\n  words[\"parameterizedDefinition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"simpleDefinition\"] =\n    words[\"constantSimpleDefinition\"]\n    .concat(words[\"variableSimpleDefinition\"])\n    .concat(words[\"otherSimpleDefinition\"]);\n\n  words[\"keyword\"] =\n    words[\"statement\"]\n    .concat(words[\"separator\"])\n    .concat(words[\"other\"]);\n\n  // Patterns\n  var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n  var symbol = new RegExp(\"^\" + symbolPattern);\n  var patterns = {\n    // Symbols with special syntax\n    symbolKeyword: symbolPattern + \":\",\n    symbolClass: \"<\" + symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + symbolPattern\n  };\n  var patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variable-2\",\n    symbolConstant: \"variable-3\"\n  };\n\n  // Compile all patterns to regular expressions\n  for (var patternName in patterns)\n    if (patterns.hasOwnProperty(patternName))\n      patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n  // Names beginning \"with-\" and \"without-\" are commonly\n  // used as statement macro\n  patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\n  var styles = {};\n  styles[\"keyword\"] = \"keyword\";\n  styles[\"definition\"] = \"def\";\n  styles[\"simpleDefinition\"] = \"def\";\n  styles[\"signalingCalls\"] = \"builtin\";\n\n  // protected words lookup table\n  var wordLookup = {};\n  var styleLookup = {};\n\n  forEach([\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n  ], function(type) {\n    forEach(words[type], function(word) {\n      wordLookup[word] = type;\n      styleLookup[word] = styles[type];\n    });\n  });\n\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString(ch, \"string\"));\n    }\n    // Comment\n    else if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n    // Decimal\n    else if (/[+\\-\\d\\.]/.test(ch)) {\n      if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n          stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n          stream.match(/^[+-]?\\d+/)) {\n        return \"number\";\n      }\n    }\n    // Hash\n    else if (ch == \"#\") {\n      stream.next();\n      // Symbol with string syntax\n      ch = stream.peek();\n      if (ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString('\"', \"string\"));\n      }\n      // Binary number\n      else if (ch == \"b\") {\n        stream.next();\n        stream.eatWhile(/[01]/);\n        return \"number\";\n      }\n      // Hex number\n      else if (ch == \"x\") {\n        stream.next();\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n      }\n      // Octal number\n      else if (ch == \"o\") {\n        stream.next();\n        stream.eatWhile(/[0-7]/);\n        return \"number\";\n      }\n      // Token concatenation in macros\n      else if (ch == '#') {\n        stream.next();\n        return \"punctuation\";\n      }\n      // Sequence literals\n      else if ((ch == '[') || (ch == '(')) {\n        stream.next();\n        return \"bracket\";\n      // Hash symbol\n      } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n        return \"atom\";\n      } else {\n        stream.eatWhile(/[-a-zA-Z]/);\n        return \"error\";\n      }\n    } else if (ch == \"~\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          return \"operator\";\n        }\n        return \"operator\";\n      }\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.next();\n        return \"punctuation\";\n      }\n    } else if (\"[](){}\".indexOf(ch) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (\".,\".indexOf(ch) != -1) {\n      stream.next();\n      return \"punctuation\";\n    } else if (stream.match(\"end\")) {\n      return \"keyword\";\n    }\n    for (var name in patterns) {\n      if (patterns.hasOwnProperty(name)) {\n        var pattern = patterns[name];\n        if ((pattern instanceof Array && some(pattern, function(p) {\n          return stream.match(p);\n        })) || stream.match(pattern))\n          return patternStyles[name];\n      }\n    }\n    if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n      stream.next();\n      return \"operator\";\n    }\n    if (stream.match(\"define\")) {\n      return \"def\";\n    } else {\n      stream.eatWhile(/[\\w\\-]/);\n      // Keyword\n      if (wordLookup.hasOwnProperty(stream.current())) {\n        return styleLookup[stream.current()];\n      } else if (stream.current().match(symbol)) {\n        return \"variable\";\n      } else {\n        stream.next();\n        return \"variable-2\";\n      }\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while ((ch = stream.next())) {\n      if (ch == \"/\" && maybeEnd) {\n        if (nestedCount > 0) {\n          nestedCount--;\n        } else {\n          state.tokenize = tokenBase;\n          break;\n        }\n      } else if (ch == \"*\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \"*\");\n      maybeNested = (ch == \"/\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote, style) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return style;\n    };\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n\n});\n"]},"metadata":{},"sourceType":"script"}