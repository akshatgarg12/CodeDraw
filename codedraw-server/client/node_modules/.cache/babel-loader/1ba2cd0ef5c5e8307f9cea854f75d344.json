{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"go\", function (config) {\n    var indentUnit = config.indentUnit;\n    var keywords = {\n      \"break\": true,\n      \"case\": true,\n      \"chan\": true,\n      \"const\": true,\n      \"continue\": true,\n      \"default\": true,\n      \"defer\": true,\n      \"else\": true,\n      \"fallthrough\": true,\n      \"for\": true,\n      \"func\": true,\n      \"go\": true,\n      \"goto\": true,\n      \"if\": true,\n      \"import\": true,\n      \"interface\": true,\n      \"map\": true,\n      \"package\": true,\n      \"range\": true,\n      \"return\": true,\n      \"select\": true,\n      \"struct\": true,\n      \"switch\": true,\n      \"type\": true,\n      \"var\": true,\n      \"bool\": true,\n      \"byte\": true,\n      \"complex64\": true,\n      \"complex128\": true,\n      \"float32\": true,\n      \"float64\": true,\n      \"int8\": true,\n      \"int16\": true,\n      \"int32\": true,\n      \"int64\": true,\n      \"string\": true,\n      \"uint8\": true,\n      \"uint16\": true,\n      \"uint32\": true,\n      \"uint64\": true,\n      \"int\": true,\n      \"uint\": true,\n      \"uintptr\": true,\n      \"error\": true,\n      \"rune\": true\n    };\n    var atoms = {\n      \"true\": true,\n      \"false\": true,\n      \"iota\": true,\n      \"nil\": true,\n      \"append\": true,\n      \"cap\": true,\n      \"close\": true,\n      \"complex\": true,\n      \"copy\": true,\n      \"delete\": true,\n      \"imag\": true,\n      \"len\": true,\n      \"make\": true,\n      \"new\": true,\n      \"panic\": true,\n      \"print\": true,\n      \"println\": true,\n      \"real\": true,\n      \"recover\": true\n    };\n    var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") {\n          stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        } else if (ch == \"0\") {\n          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        } else {\n          stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        }\n\n        return \"number\";\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n        return \"keyword\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || quote == \"`\")) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      if (!state.context.prev) return;\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n          if (ctx.type == \"case\") ctx.type = \"}\";\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"case\") ctx.type = \"case\";else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);else if (curPunc == ctx.type) popContext(state);\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n\n        if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n          state.context.type = \"}\";\n          return ctx.indented;\n        }\n\n        var closing = firstChar == ctx.type;\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}):\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"brace\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-go\", \"go\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/go/go.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","keywords","atoms","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n    \"rune\":true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n"]},"metadata":{},"sourceType":"script"}