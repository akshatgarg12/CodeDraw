{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sieve\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"if elsif else stop require\");\n    var atoms = words(\"true false not\");\n    var indentUnit = config.indentUnit;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == \"\\\"\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"(\") {\n        state._indent.push(\"(\"); // add virtual angel wings so that editor behaves...\n        // ...more sane incase of broken brackets\n\n\n        state._indent.push(\"{\");\n\n        return null;\n      }\n\n      if (ch === \"{\") {\n        state._indent.push(\"{\");\n\n        return null;\n      }\n\n      if (ch == \")\") {\n        state._indent.pop();\n\n        state._indent.pop();\n      }\n\n      if (ch === \"}\") {\n        state._indent.pop();\n\n        return null;\n      }\n\n      if (ch == \",\") return null;\n      if (ch == \";\") return null;\n      if (/[{}\\(\\),;]/.test(ch)) return null; // 1*DIGIT \"K\" / \"M\" / \"G\"\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\d]/);\n        stream.eat(/[KkMmGg]/);\n        return \"number\";\n      } // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n\n\n      if (ch == \":\") {\n        stream.eatWhile(/[a-zA-Z_]/);\n        stream.eatWhile(/[a-zA-Z0-9_]/);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/\\w/);\n      var cur = stream.current(); // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n      // *(multiline-literal / multiline-dotstart)\n      // \".\" CRLF\n\n      if (cur == \"text\" && stream.eat(\":\")) {\n        state.tokenize = tokenMultiLineString;\n        return \"string\";\n      }\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return null;\n    }\n\n    function tokenMultiLineString(stream, state) {\n      state._multiLineString = true; // the first line is special it may contain a comment\n\n      if (!stream.sol()) {\n        stream.eatSpace();\n\n        if (stream.peek() == \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        stream.skipToEnd();\n        return \"string\";\n      }\n\n      if (stream.next() == \".\" && stream.eol()) {\n        state._multiLineString = false;\n        state.tokenize = tokenBase;\n      }\n\n      return \"string\";\n    }\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          _indent: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return (state.tokenize || tokenBase)(stream, state);\n      },\n      indent: function indent(state, _textAfter) {\n        var length = state._indent.length;\n        if (_textAfter && _textAfter[0] == \"}\") length--;\n        if (length < 0) length = 0;\n        return length * indentUnit;\n      },\n      electricChars: \"}\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/sieve/sieve.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eatSpace","peek","eol","maybeEnd","quote","escaped","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane incase of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"]},"metadata":{},"sourceType":"script"}