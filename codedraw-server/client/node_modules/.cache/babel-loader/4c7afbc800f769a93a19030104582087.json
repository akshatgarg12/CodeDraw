{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// CodeMirror2 mode/perl/perl.js (text/x-perl) beta 0.10 (2011-11-08)\n// This is a part of CodeMirror from https://github.com/sabaca/CodeMirror_mode_perl (mail@sabaca.com)\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"perl\", function () {\n    // http://perldoc.perl.org\n    var PERL = {\n      //   null - magic touch\n      //   1 - keyword\n      //   2 - def\n      //   3 - atom\n      //   4 - operator\n      //   5 - variable-2 (predefined)\n      //   [x,y] - x=1,2,3; y=must be defined if x{...}\n      //      PERL operators\n      '->': 4,\n      '++': 4,\n      '--': 4,\n      '**': 4,\n      //   ! ~ \\ and unary + and -\n      '=~': 4,\n      '!~': 4,\n      '*': 4,\n      '/': 4,\n      '%': 4,\n      'x': 4,\n      '+': 4,\n      '-': 4,\n      '.': 4,\n      '<<': 4,\n      '>>': 4,\n      //   named unary operators\n      '<': 4,\n      '>': 4,\n      '<=': 4,\n      '>=': 4,\n      'lt': 4,\n      'gt': 4,\n      'le': 4,\n      'ge': 4,\n      '==': 4,\n      '!=': 4,\n      '<=>': 4,\n      'eq': 4,\n      'ne': 4,\n      'cmp': 4,\n      '~~': 4,\n      '&': 4,\n      '|': 4,\n      '^': 4,\n      '&&': 4,\n      '||': 4,\n      '//': 4,\n      '..': 4,\n      '...': 4,\n      '?': 4,\n      ':': 4,\n      '=': 4,\n      '+=': 4,\n      '-=': 4,\n      '*=': 4,\n      //   etc. ???\n      ',': 4,\n      '=>': 4,\n      '::': 4,\n      //   list operators (rightward)\n      'not': 4,\n      'and': 4,\n      'or': 4,\n      'xor': 4,\n      //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n      'BEGIN': [5, 1],\n      'END': [5, 1],\n      'PRINT': [5, 1],\n      'PRINTF': [5, 1],\n      'GETC': [5, 1],\n      'READ': [5, 1],\n      'READLINE': [5, 1],\n      'DESTROY': [5, 1],\n      'TIE': [5, 1],\n      'TIEHANDLE': [5, 1],\n      'UNTIE': [5, 1],\n      'STDIN': 5,\n      'STDIN_TOP': 5,\n      'STDOUT': 5,\n      'STDOUT_TOP': 5,\n      'STDERR': 5,\n      'STDERR_TOP': 5,\n      '$ARG': 5,\n      '$_': 5,\n      '@ARG': 5,\n      '@_': 5,\n      '$LIST_SEPARATOR': 5,\n      '$\"': 5,\n      '$PROCESS_ID': 5,\n      '$PID': 5,\n      '$$': 5,\n      '$REAL_GROUP_ID': 5,\n      '$GID': 5,\n      '$(': 5,\n      '$EFFECTIVE_GROUP_ID': 5,\n      '$EGID': 5,\n      '$)': 5,\n      '$PROGRAM_NAME': 5,\n      '$0': 5,\n      '$SUBSCRIPT_SEPARATOR': 5,\n      '$SUBSEP': 5,\n      '$;': 5,\n      '$REAL_USER_ID': 5,\n      '$UID': 5,\n      '$<': 5,\n      '$EFFECTIVE_USER_ID': 5,\n      '$EUID': 5,\n      '$>': 5,\n      '$a': 5,\n      '$b': 5,\n      '$COMPILING': 5,\n      '$^C': 5,\n      '$DEBUGGING': 5,\n      '$^D': 5,\n      '${^ENCODING}': 5,\n      '$ENV': 5,\n      '%ENV': 5,\n      '$SYSTEM_FD_MAX': 5,\n      '$^F': 5,\n      '@F': 5,\n      '${^GLOBAL_PHASE}': 5,\n      '$^H': 5,\n      '%^H': 5,\n      '@INC': 5,\n      '%INC': 5,\n      '$INPLACE_EDIT': 5,\n      '$^I': 5,\n      '$^M': 5,\n      '$OSNAME': 5,\n      '$^O': 5,\n      '${^OPEN}': 5,\n      '$PERLDB': 5,\n      '$^P': 5,\n      '$SIG': 5,\n      '%SIG': 5,\n      '$BASETIME': 5,\n      '$^T': 5,\n      '${^TAINT}': 5,\n      '${^UNICODE}': 5,\n      '${^UTF8CACHE}': 5,\n      '${^UTF8LOCALE}': 5,\n      '$PERL_VERSION': 5,\n      '$^V': 5,\n      '${^WIN32_SLOPPY_STAT}': 5,\n      '$EXECUTABLE_NAME': 5,\n      '$^X': 5,\n      '$1': 5,\n      // - regexp $1, $2...\n      '$MATCH': 5,\n      '$&': 5,\n      '${^MATCH}': 5,\n      '$PREMATCH': 5,\n      '$`': 5,\n      '${^PREMATCH}': 5,\n      '$POSTMATCH': 5,\n      \"$'\": 5,\n      '${^POSTMATCH}': 5,\n      '$LAST_PAREN_MATCH': 5,\n      '$+': 5,\n      '$LAST_SUBMATCH_RESULT': 5,\n      '$^N': 5,\n      '@LAST_MATCH_END': 5,\n      '@+': 5,\n      '%LAST_PAREN_MATCH': 5,\n      '%+': 5,\n      '@LAST_MATCH_START': 5,\n      '@-': 5,\n      '%LAST_MATCH_START': 5,\n      '%-': 5,\n      '$LAST_REGEXP_CODE_RESULT': 5,\n      '$^R': 5,\n      '${^RE_DEBUG_FLAGS}': 5,\n      '${^RE_TRIE_MAXBUF}': 5,\n      '$ARGV': 5,\n      '@ARGV': 5,\n      'ARGV': 5,\n      'ARGVOUT': 5,\n      '$OUTPUT_FIELD_SEPARATOR': 5,\n      '$OFS': 5,\n      '$,': 5,\n      '$INPUT_LINE_NUMBER': 5,\n      '$NR': 5,\n      '$.': 5,\n      '$INPUT_RECORD_SEPARATOR': 5,\n      '$RS': 5,\n      '$/': 5,\n      '$OUTPUT_RECORD_SEPARATOR': 5,\n      '$ORS': 5,\n      '$\\\\': 5,\n      '$OUTPUT_AUTOFLUSH': 5,\n      '$|': 5,\n      '$ACCUMULATOR': 5,\n      '$^A': 5,\n      '$FORMAT_FORMFEED': 5,\n      '$^L': 5,\n      '$FORMAT_PAGE_NUMBER': 5,\n      '$%': 5,\n      '$FORMAT_LINES_LEFT': 5,\n      '$-': 5,\n      '$FORMAT_LINE_BREAK_CHARACTERS': 5,\n      '$:': 5,\n      '$FORMAT_LINES_PER_PAGE': 5,\n      '$=': 5,\n      '$FORMAT_TOP_NAME': 5,\n      '$^': 5,\n      '$FORMAT_NAME': 5,\n      '$~': 5,\n      '${^CHILD_ERROR_NATIVE}': 5,\n      '$EXTENDED_OS_ERROR': 5,\n      '$^E': 5,\n      '$EXCEPTIONS_BEING_CAUGHT': 5,\n      '$^S': 5,\n      '$WARNING': 5,\n      '$^W': 5,\n      '${^WARNING_BITS}': 5,\n      '$OS_ERROR': 5,\n      '$ERRNO': 5,\n      '$!': 5,\n      '%OS_ERROR': 5,\n      '%ERRNO': 5,\n      '%!': 5,\n      '$CHILD_ERROR': 5,\n      '$?': 5,\n      '$EVAL_ERROR': 5,\n      '$@': 5,\n      '$OFMT': 5,\n      '$#': 5,\n      '$*': 5,\n      '$ARRAY_BASE': 5,\n      '$[': 5,\n      '$OLD_PERL_VERSION': 5,\n      '$]': 5,\n      //      PERL blocks\n      'if': [1, 1],\n      elsif: [1, 1],\n      'else': [1, 1],\n      'while': [1, 1],\n      unless: [1, 1],\n      'for': [1, 1],\n      foreach: [1, 1],\n      //      PERL functions\n      'abs': 1,\n      // - absolute value function\n      accept: 1,\n      // - accept an incoming socket connect\n      alarm: 1,\n      // - schedule a SIGALRM\n      'atan2': 1,\n      // - arctangent of Y/X in the range -PI to PI\n      bind: 1,\n      // - binds an address to a socket\n      binmode: 1,\n      // - prepare binary files for I/O\n      bless: 1,\n      // - create an object\n      bootstrap: 1,\n      //\n      'break': 1,\n      // - break out of a \"given\" block\n      caller: 1,\n      // - get context of the current subroutine call\n      chdir: 1,\n      // - change your current working directory\n      chmod: 1,\n      // - changes the permissions on a list of files\n      chomp: 1,\n      // - remove a trailing record separator from a string\n      chop: 1,\n      // - remove the last character from a string\n      chown: 1,\n      // - change the ownership on a list of files\n      chr: 1,\n      // - get character this number represents\n      chroot: 1,\n      // - make directory new root for path lookups\n      close: 1,\n      // - close file (or pipe or socket) handle\n      closedir: 1,\n      // - close directory handle\n      connect: 1,\n      // - connect to a remote socket\n      'continue': [1, 1],\n      // - optional trailing block in a while or foreach\n      'cos': 1,\n      // - cosine function\n      crypt: 1,\n      // - one-way passwd-style encryption\n      dbmclose: 1,\n      // - breaks binding on a tied dbm file\n      dbmopen: 1,\n      // - create binding on a tied dbm file\n      'default': 1,\n      //\n      defined: 1,\n      // - test whether a value, variable, or function is defined\n      'delete': 1,\n      // - deletes a value from a hash\n      die: 1,\n      // - raise an exception or bail out\n      'do': 1,\n      // - turn a BLOCK into a TERM\n      dump: 1,\n      // - create an immediate core dump\n      each: 1,\n      // - retrieve the next key/value pair from a hash\n      endgrent: 1,\n      // - be done using group file\n      endhostent: 1,\n      // - be done using hosts file\n      endnetent: 1,\n      // - be done using networks file\n      endprotoent: 1,\n      // - be done using protocols file\n      endpwent: 1,\n      // - be done using passwd file\n      endservent: 1,\n      // - be done using services file\n      eof: 1,\n      // - test a filehandle for its end\n      'eval': 1,\n      // - catch exceptions or compile and run code\n      'exec': 1,\n      // - abandon this program to run another\n      exists: 1,\n      // - test whether a hash key is present\n      exit: 1,\n      // - terminate this program\n      'exp': 1,\n      // - raise I to a power\n      fcntl: 1,\n      // - file control system call\n      fileno: 1,\n      // - return file descriptor from filehandle\n      flock: 1,\n      // - lock an entire file with an advisory lock\n      fork: 1,\n      // - create a new process just like this one\n      format: 1,\n      // - declare a picture format with use by the write() function\n      formline: 1,\n      // - internal function used for formats\n      getc: 1,\n      // - get the next character from the filehandle\n      getgrent: 1,\n      // - get next group record\n      getgrgid: 1,\n      // - get group record given group user ID\n      getgrnam: 1,\n      // - get group record given group name\n      gethostbyaddr: 1,\n      // - get host record given its address\n      gethostbyname: 1,\n      // - get host record given name\n      gethostent: 1,\n      // - get next hosts record\n      getlogin: 1,\n      // - return who logged in at this tty\n      getnetbyaddr: 1,\n      // - get network record given its address\n      getnetbyname: 1,\n      // - get networks record given name\n      getnetent: 1,\n      // - get next networks record\n      getpeername: 1,\n      // - find the other end of a socket connection\n      getpgrp: 1,\n      // - get process group\n      getppid: 1,\n      // - get parent process ID\n      getpriority: 1,\n      // - get current nice value\n      getprotobyname: 1,\n      // - get protocol record given name\n      getprotobynumber: 1,\n      // - get protocol record numeric protocol\n      getprotoent: 1,\n      // - get next protocols record\n      getpwent: 1,\n      // - get next passwd record\n      getpwnam: 1,\n      // - get passwd record given user login name\n      getpwuid: 1,\n      // - get passwd record given user ID\n      getservbyname: 1,\n      // - get services record given its name\n      getservbyport: 1,\n      // - get services record given numeric port\n      getservent: 1,\n      // - get next services record\n      getsockname: 1,\n      // - retrieve the sockaddr for a given socket\n      getsockopt: 1,\n      // - get socket options on a given socket\n      given: 1,\n      //\n      glob: 1,\n      // - expand filenames using wildcards\n      gmtime: 1,\n      // - convert UNIX time into record or string using Greenwich time\n      'goto': 1,\n      // - create spaghetti code\n      grep: 1,\n      // - locate elements in a list test true against a given criterion\n      hex: 1,\n      // - convert a string to a hexadecimal number\n      'import': 1,\n      // - patch a module's namespace into your own\n      index: 1,\n      // - find a substring within a string\n      'int': 1,\n      // - get the integer portion of a number\n      ioctl: 1,\n      // - system-dependent device control system call\n      'join': 1,\n      // - join a list into a string using a separator\n      keys: 1,\n      // - retrieve list of indices from a hash\n      kill: 1,\n      // - send a signal to a process or process group\n      last: 1,\n      // - exit a block prematurely\n      lc: 1,\n      // - return lower-case version of a string\n      lcfirst: 1,\n      // - return a string with just the next letter in lower case\n      length: 1,\n      // - return the number of bytes in a string\n      'link': 1,\n      // - create a hard link in the filesytem\n      listen: 1,\n      // - register your socket as a server\n      local: 2,\n      // - create a temporary value for a global variable (dynamic scoping)\n      localtime: 1,\n      // - convert UNIX time into record or string using local time\n      lock: 1,\n      // - get a thread lock on a variable, subroutine, or method\n      'log': 1,\n      // - retrieve the natural logarithm for a number\n      lstat: 1,\n      // - stat a symbolic link\n      m: null,\n      // - match a string with a regular expression pattern\n      map: 1,\n      // - apply a change to a list to get back a new list with the changes\n      mkdir: 1,\n      // - create a directory\n      msgctl: 1,\n      // - SysV IPC message control operations\n      msgget: 1,\n      // - get SysV IPC message queue\n      msgrcv: 1,\n      // - receive a SysV IPC message from a message queue\n      msgsnd: 1,\n      // - send a SysV IPC message to a message queue\n      my: 2,\n      // - declare and assign a local variable (lexical scoping)\n      'new': 1,\n      //\n      next: 1,\n      // - iterate a block prematurely\n      no: 1,\n      // - unimport some module symbols or semantics at compile time\n      oct: 1,\n      // - convert a string to an octal number\n      open: 1,\n      // - open a file, pipe, or descriptor\n      opendir: 1,\n      // - open a directory\n      ord: 1,\n      // - find a character's numeric representation\n      our: 2,\n      // - declare and assign a package variable (lexical scoping)\n      pack: 1,\n      // - convert a list into a binary representation\n      'package': 1,\n      // - declare a separate global namespace\n      pipe: 1,\n      // - open a pair of connected filehandles\n      pop: 1,\n      // - remove the last element from an array and return it\n      pos: 1,\n      // - find or set the offset for the last/next m//g search\n      print: 1,\n      // - output a list to a filehandle\n      printf: 1,\n      // - output a formatted list to a filehandle\n      prototype: 1,\n      // - get the prototype (if any) of a subroutine\n      push: 1,\n      // - append one or more elements to an array\n      q: null,\n      // - singly quote a string\n      qq: null,\n      // - doubly quote a string\n      qr: null,\n      // - Compile pattern\n      quotemeta: null,\n      // - quote regular expression magic characters\n      qw: null,\n      // - quote a list of words\n      qx: null,\n      // - backquote quote a string\n      rand: 1,\n      // - retrieve the next pseudorandom number\n      read: 1,\n      // - fixed-length buffered input from a filehandle\n      readdir: 1,\n      // - get a directory from a directory handle\n      readline: 1,\n      // - fetch a record from a file\n      readlink: 1,\n      // - determine where a symbolic link is pointing\n      readpipe: 1,\n      // - execute a system command and collect standard output\n      recv: 1,\n      // - receive a message over a Socket\n      redo: 1,\n      // - start this loop iteration over again\n      ref: 1,\n      // - find out the type of thing being referenced\n      rename: 1,\n      // - change a filename\n      require: 1,\n      // - load in external functions from a library at runtime\n      reset: 1,\n      // - clear all variables of a given name\n      'return': 1,\n      // - get out of a function early\n      reverse: 1,\n      // - flip a string or a list\n      rewinddir: 1,\n      // - reset directory handle\n      rindex: 1,\n      // - right-to-left substring search\n      rmdir: 1,\n      // - remove a directory\n      s: null,\n      // - replace a pattern with a string\n      say: 1,\n      // - print with newline\n      scalar: 1,\n      // - force a scalar context\n      seek: 1,\n      // - reposition file pointer for random-access I/O\n      seekdir: 1,\n      // - reposition directory pointer\n      select: 1,\n      // - reset default output or do I/O multiplexing\n      semctl: 1,\n      // - SysV semaphore control operations\n      semget: 1,\n      // - get set of SysV semaphores\n      semop: 1,\n      // - SysV semaphore operations\n      send: 1,\n      // - send a message over a socket\n      setgrent: 1,\n      // - prepare group file for use\n      sethostent: 1,\n      // - prepare hosts file for use\n      setnetent: 1,\n      // - prepare networks file for use\n      setpgrp: 1,\n      // - set the process group of a process\n      setpriority: 1,\n      // - set a process's nice value\n      setprotoent: 1,\n      // - prepare protocols file for use\n      setpwent: 1,\n      // - prepare passwd file for use\n      setservent: 1,\n      // - prepare services file for use\n      setsockopt: 1,\n      // - set some socket options\n      shift: 1,\n      // - remove the first element of an array, and return it\n      shmctl: 1,\n      // - SysV shared memory operations\n      shmget: 1,\n      // - get SysV shared memory segment identifier\n      shmread: 1,\n      // - read SysV shared memory\n      shmwrite: 1,\n      // - write SysV shared memory\n      shutdown: 1,\n      // - close down just half of a socket connection\n      'sin': 1,\n      // - return the sine of a number\n      sleep: 1,\n      // - block for some number of seconds\n      socket: 1,\n      // - create a socket\n      socketpair: 1,\n      // - create a pair of sockets\n      'sort': 1,\n      // - sort a list of values\n      splice: 1,\n      // - add or remove elements anywhere in an array\n      'split': 1,\n      // - split up a string using a regexp delimiter\n      sprintf: 1,\n      // - formatted print into a string\n      'sqrt': 1,\n      // - square root function\n      srand: 1,\n      // - seed the random number generator\n      stat: 1,\n      // - get a file's status information\n      state: 1,\n      // - declare and assign a state variable (persistent lexical scoping)\n      study: 1,\n      // - optimize input data for repeated searches\n      'sub': 1,\n      // - declare a subroutine, possibly anonymously\n      'substr': 1,\n      // - get or alter a portion of a stirng\n      symlink: 1,\n      // - create a symbolic link to a file\n      syscall: 1,\n      // - execute an arbitrary system call\n      sysopen: 1,\n      // - open a file, pipe, or descriptor\n      sysread: 1,\n      // - fixed-length unbuffered input from a filehandle\n      sysseek: 1,\n      // - position I/O pointer on handle used with sysread and syswrite\n      system: 1,\n      // - run a separate program\n      syswrite: 1,\n      // - fixed-length unbuffered output to a filehandle\n      tell: 1,\n      // - get current seekpointer on a filehandle\n      telldir: 1,\n      // - get current seekpointer on a directory handle\n      tie: 1,\n      // - bind a variable to an object class\n      tied: 1,\n      // - get a reference to the object underlying a tied variable\n      time: 1,\n      // - return number of seconds since 1970\n      times: 1,\n      // - return elapsed time for self and child processes\n      tr: null,\n      // - transliterate a string\n      truncate: 1,\n      // - shorten a file\n      uc: 1,\n      // - return upper-case version of a string\n      ucfirst: 1,\n      // - return a string with just the next letter in upper case\n      umask: 1,\n      // - set file creation mode mask\n      undef: 1,\n      // - remove a variable or function definition\n      unlink: 1,\n      // - remove one link to a file\n      unpack: 1,\n      // - convert binary structure into normal perl variables\n      unshift: 1,\n      // - prepend more elements to the beginning of a list\n      untie: 1,\n      // - break a tie binding to a variable\n      use: 1,\n      // - load in a module at compile time\n      utime: 1,\n      // - set a file's last access and modify times\n      values: 1,\n      // - return a list of the values in a hash\n      vec: 1,\n      // - test or set particular bits in a string\n      wait: 1,\n      // - wait for any child process to die\n      waitpid: 1,\n      // - wait for a particular child process to die\n      wantarray: 1,\n      // - get void vs scalar vs list context of current subroutine call\n      warn: 1,\n      // - print debugging info\n      when: 1,\n      //\n      write: 1,\n      // - print a picture record\n      y: null\n    }; // - transliterate a string\n\n    var RXstyle = \"string-2\";\n    var RXmodifiers = /[goseximacplud]/; // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\n    function tokenChain(stream, state, chain, style, tail) {\n      // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n      state.chain = null; //                                                          12   3tail\n\n      state.style = null;\n      state.tail = null;\n\n      state.tokenize = function (stream, state) {\n        var e = false,\n            c,\n            i = 0;\n\n        while (c = stream.next()) {\n          if (c === chain[i] && !e) {\n            if (chain[++i] !== undefined) {\n              state.chain = chain[i];\n              state.style = style;\n              state.tail = tail;\n            } else if (tail) stream.eatWhile(tail);\n\n            state.tokenize = tokenPerl;\n            return style;\n          }\n\n          e = !e && c == \"\\\\\";\n        }\n\n        return style;\n      };\n\n      return state.tokenize(stream, state);\n    }\n\n    function tokenSOMETHING(stream, state, string) {\n      state.tokenize = function (stream, state) {\n        if (stream.string == string) state.tokenize = tokenPerl;\n        stream.skipToEnd();\n        return \"string\";\n      };\n\n      return state.tokenize(stream, state);\n    }\n\n    function tokenPerl(stream, state) {\n      if (stream.eatSpace()) return null;\n      if (state.chain) return tokenChain(stream, state, state.chain, state.style, state.tail);\n      if (stream.match(/^\\-?[\\d\\.]/, false)) if (stream.match(/^(\\-?(\\d*\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F]+|0b[01]+|\\d+(e[+-]?\\d+)?)/)) return 'number';\n\n      if (stream.match(/^<<(?=\\w)/)) {\n        // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n        stream.eatWhile(/\\w/);\n        return tokenSOMETHING(stream, state, stream.current().substr(2));\n      }\n\n      if (stream.sol() && stream.match(/^\\=item(?!\\w)/)) {\n        // NOTE: \\n=item...\\n=cut\\n\n        return tokenSOMETHING(stream, state, '=cut');\n      }\n\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n        if (prefix(stream, 3) == \"<<\" + ch) {\n          var p = stream.pos;\n          stream.eatWhile(/\\w/);\n          var n = stream.current().substr(1);\n          if (n && stream.eat(ch)) return tokenSOMETHING(stream, state, n);\n          stream.pos = p;\n        }\n\n        return tokenChain(stream, state, [ch], \"string\");\n      }\n\n      if (ch == \"q\") {\n        var c = look(stream, -2);\n\n        if (!(c && /\\w/.test(c))) {\n          c = look(stream, 0);\n\n          if (c == \"x\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n            }\n          } else if (c == \"q\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], \"string\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], \"string\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], \"string\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], \"string\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], \"string\");\n            }\n          } else if (c == \"w\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], \"bracket\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], \"bracket\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], \"bracket\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], \"bracket\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], \"bracket\");\n            }\n          } else if (c == \"r\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n            }\n          } else if (/[\\^'\"!~\\/(\\[{<]/.test(c)) {\n            if (c == \"(\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\")\"], \"string\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\"]\"], \"string\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\"}\"], \"string\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\">\"], \"string\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              return tokenChain(stream, state, [stream.eat(c)], \"string\");\n            }\n          }\n        }\n      }\n\n      if (ch == \"m\") {\n        var c = look(stream, -2);\n\n        if (!(c && /\\w/.test(c))) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              return tokenChain(stream, state, [c], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"(\") {\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n          }\n        }\n      }\n\n      if (ch == \"s\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n            if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n            if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n            if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n            return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n          }\n        }\n      }\n\n      if (ch == \"y\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n            if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n            if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n            if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n            return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n          }\n        }\n      }\n\n      if (ch == \"t\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(\"r\");\n\n          if (c) {\n            c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n            if (c) {\n              if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n              if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n              if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n              if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n              return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n            }\n          }\n        }\n      }\n\n      if (ch == \"`\") {\n        return tokenChain(stream, state, [ch], \"variable-2\");\n      }\n\n      if (ch == \"/\") {\n        if (!/~\\s*$/.test(prefix(stream))) return \"operator\";else return tokenChain(stream, state, [ch], RXstyle, RXmodifiers);\n      }\n\n      if (ch == \"$\") {\n        var p = stream.pos;\n        if (stream.eatWhile(/\\d/) || stream.eat(\"{\") && stream.eatWhile(/\\d/) && stream.eat(\"}\")) return \"variable-2\";else stream.pos = p;\n      }\n\n      if (/[$@%]/.test(ch)) {\n        var p = stream.pos;\n\n        if (stream.eat(\"^\") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)) {\n          var c = stream.current();\n          if (PERL[c]) return \"variable-2\";\n        }\n\n        stream.pos = p;\n      }\n\n      if (/[$@%&]/.test(ch)) {\n        if (stream.eatWhile(/[\\w$\\[\\]]/) || stream.eat(\"{\") && stream.eatWhile(/[\\w$\\[\\]]/) && stream.eat(\"}\")) {\n          var c = stream.current();\n          if (PERL[c]) return \"variable-2\";else return \"variable\";\n        }\n      }\n\n      if (ch == \"#\") {\n        if (look(stream, -2) != \"$\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)) {\n        var p = stream.pos;\n        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n        if (PERL[stream.current()]) return \"operator\";else stream.pos = p;\n      }\n\n      if (ch == \"_\") {\n        if (stream.pos == 1) {\n          if (suffix(stream, 6) == \"_END__\") {\n            return tokenChain(stream, state, ['\\0'], \"comment\");\n          } else if (suffix(stream, 7) == \"_DATA__\") {\n            return tokenChain(stream, state, ['\\0'], \"variable-2\");\n          } else if (suffix(stream, 7) == \"_C__\") {\n            return tokenChain(stream, state, ['\\0'], \"string\");\n          }\n        }\n      }\n\n      if (/\\w/.test(ch)) {\n        var p = stream.pos;\n        if (look(stream, -2) == \"{\" && (look(stream, 0) == \"}\" || stream.eatWhile(/\\w/) && look(stream, 0) == \"}\")) return \"string\";else stream.pos = p;\n      }\n\n      if (/[A-Z]/.test(ch)) {\n        var l = look(stream, -2);\n        var p = stream.pos;\n        stream.eatWhile(/[A-Z_]/);\n\n        if (/[\\da-z]/.test(look(stream, 0))) {\n          stream.pos = p;\n        } else {\n          var c = PERL[stream.current()];\n          if (!c) return \"meta\";\n          if (c[1]) c = c[0];\n\n          if (l != \":\") {\n            if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"variable-2\";else return \"meta\";\n          } else return \"meta\";\n        }\n      }\n\n      if (/[a-zA-Z_]/.test(ch)) {\n        var l = look(stream, -2);\n        stream.eatWhile(/\\w/);\n        var c = PERL[stream.current()];\n        if (!c) return \"meta\";\n        if (c[1]) c = c[0];\n\n        if (l != \":\") {\n          if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"variable-2\";else return \"meta\";\n        } else return \"meta\";\n      }\n\n      return null;\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenPerl,\n          chain: null,\n          style: null,\n          tail: null\n        };\n      },\n      token: function (stream, state) {\n        return (state.tokenize || tokenPerl)(stream, state);\n      },\n      lineComment: '#'\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"perl\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/x-perl\", \"perl\"); // it's like \"peek\", but need for look-ahead or look-behind if index < 0\n\n  function look(stream, c) {\n    return stream.string.charAt(stream.pos + (c || 0));\n  } // return a part of prefix of current stream from current position\n\n\n  function prefix(stream, c) {\n    if (c) {\n      var x = stream.pos - c;\n      return stream.string.substr(x >= 0 ? x : 0, c);\n    } else {\n      return stream.string.substr(0, stream.pos - 1);\n    }\n  } // return a part of suffix of current stream from current position\n\n\n  function suffix(stream, c) {\n    var y = stream.string.length;\n    var x = y - stream.pos + 1;\n    return stream.string.substr(stream.pos, c && c < y ? c : x);\n  } // eating and vomiting a part of stream from current position\n\n\n  function eatSuffix(stream, c) {\n    var x = stream.pos + c;\n    var y;\n    if (x <= 0) stream.pos = 0;else if (x >= (y = stream.string.length - 1)) stream.pos = y;else stream.pos = x;\n  }\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/perl/perl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","PERL","elsif","unless","foreach","accept","alarm","bind","binmode","bless","bootstrap","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","crypt","dbmclose","dbmopen","defined","die","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","exists","exit","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","grep","hex","index","ioctl","keys","kill","last","lc","lcfirst","length","listen","local","localtime","lock","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","next","no","oct","open","opendir","ord","our","pack","pipe","pop","pos","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","reset","reverse","rewinddir","rindex","rmdir","s","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sleep","socket","socketpair","splice","sprintf","srand","stat","state","study","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","y","RXstyle","RXmodifiers","tokenChain","stream","chain","style","tail","tokenize","e","c","i","undefined","eatWhile","tokenPerl","tokenSOMETHING","string","skipToEnd","eatSpace","match","current","substr","sol","ch","prefix","p","n","eat","look","test","eatSuffix","suffix","l","startState","token","lineComment","registerHelper","defineMIME","charAt","x"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,MAAtB,EAA6B,YAAU;AAC/B;AACA,QAAIC,IAAI,GAAC;AAAuC;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AAChC,YAAoC,CARnC;AASD,YAAoC,CATnC;AAUD,YAAoC,CAVnC;AAWD,YAAoC,CAXnC;AAYuC;AACxC,YAAoC,CAbnC;AAcD,YAAoC,CAdnC;AAeD,WAAoC,CAfnC;AAgBD,WAAoC,CAhBnC;AAiBD,WAAoC,CAjBnC;AAkBD,WAAoC,CAlBnC;AAmBD,WAAoC,CAnBnC;AAoBD,WAAoC,CApBnC;AAqBD,WAAoC,CArBnC;AAsBD,YAAoC,CAtBnC;AAuBD,YAAoC,CAvBnC;AAwBuC;AACxC,WAAoC,CAzBnC;AA0BD,WAAoC,CA1BnC;AA2BD,YAAoC,CA3BnC;AA4BD,YAAoC,CA5BnC;AA6BD,YAAoC,CA7BnC;AA8BD,YAAoC,CA9BnC;AA+BD,YAAoC,CA/BnC;AAgCD,YAAoC,CAhCnC;AAiCD,YAAoC,CAjCnC;AAkCD,YAAoC,CAlCnC;AAmCD,aAAoC,CAnCnC;AAoCD,YAAoC,CApCnC;AAqCD,YAAoC,CArCnC;AAsCD,aAAoC,CAtCnC;AAuCD,YAAoC,CAvCnC;AAwCD,WAAoC,CAxCnC;AAyCD,WAAoC,CAzCnC;AA0CD,WAAoC,CA1CnC;AA2CD,YAAoC,CA3CnC;AA4CD,YAAoC,CA5CnC;AA6CD,YAAoC,CA7CnC;AA8CD,YAAoC,CA9CnC;AA+CD,aAAoC,CA/CnC;AAgDD,WAAoC,CAhDnC;AAiDD,WAAoC,CAjDnC;AAkDD,WAAoC,CAlDnC;AAmDD,YAAoC,CAnDnC;AAoDD,YAAoC,CApDnC;AAqDD,YAAoC,CArDnC;AAqDuC;AACxC,WAAoC,CAtDnC;AAuDD,YAAoC,CAvDnC;AAwDD,YAAoC,CAxDnC;AAyDuC;AACxC,aAAoC,CA1DnC;AA2DD,aAAoC,CA3DnC;AA4DD,YAAoC,CA5DnC;AA6DD,aAAoC,CA7DnC;AA8D+B;AAChC,eAAoC,CAAC,CAAD,EAAG,CAAH,CA/DnC;AAgED,aAAoC,CAAC,CAAD,EAAG,CAAH,CAhEnC;AAiED,eAAoC,CAAC,CAAD,EAAG,CAAH,CAjEnC;AAkED,gBAAoC,CAAC,CAAD,EAAG,CAAH,CAlEnC;AAmED,cAAoC,CAAC,CAAD,EAAG,CAAH,CAnEnC;AAoED,cAAoC,CAAC,CAAD,EAAG,CAAH,CApEnC;AAqED,kBAAoC,CAAC,CAAD,EAAG,CAAH,CArEnC;AAsED,iBAAoC,CAAC,CAAD,EAAG,CAAH,CAtEnC;AAuED,aAAoC,CAAC,CAAD,EAAG,CAAH,CAvEnC;AAwED,mBAAoC,CAAC,CAAD,EAAG,CAAH,CAxEnC;AAyED,eAAoC,CAAC,CAAD,EAAG,CAAH,CAzEnC;AA0ED,eAAqC,CA1EpC;AA2ED,mBAAqC,CA3EpC;AA4ED,gBAAqC,CA5EpC;AA6ED,oBAAqC,CA7EpC;AA8ED,gBAAqC,CA9EpC;AA+ED,oBAAqC,CA/EpC;AAgFD,cAAqC,CAhFpC;AAiFD,YAAqC,CAjFpC;AAkFD,cAAqC,CAlFpC;AAmFD,YAAqC,CAnFpC;AAoFD,yBAAqC,CApFpC;AAqFD,YAAqC,CArFpC;AAsFD,qBAAqC,CAtFpC;AAuFD,cAAqC,CAvFpC;AAwFD,YAAqC,CAxFpC;AAyFD,wBAAqC,CAzFpC;AA0FD,cAAqC,CA1FpC;AA2FD,YAAqC,CA3FpC;AA4FD,6BAAqC,CA5FpC;AA6FD,eAAqC,CA7FpC;AA8FD,YAAqC,CA9FpC;AA+FD,uBAAqC,CA/FpC;AAgGD,YAAqC,CAhGpC;AAiGD,8BAAqC,CAjGpC;AAkGD,iBAAqC,CAlGpC;AAmGD,YAAqC,CAnGpC;AAoGD,uBAAqC,CApGpC;AAqGD,cAAqC,CArGpC;AAsGD,YAAqC,CAtGpC;AAuGD,4BAAqC,CAvGpC;AAwGD,eAAqC,CAxGpC;AAyGD,YAAqC,CAzGpC;AA0GD,YAAqC,CA1GpC;AA2GD,YAAqC,CA3GpC;AA4GD,oBAAqC,CA5GpC;AA6GD,aAAqC,CA7GpC;AA8GD,oBAAqC,CA9GpC;AA+GD,aAAqC,CA/GpC;AAgHD,sBAAqC,CAhHpC;AAiHD,cAAqC,CAjHpC;AAkHD,cAAqC,CAlHpC;AAmHD,wBAAqC,CAnHpC;AAoHD,aAAqC,CApHpC;AAqHD,YAAqC,CArHpC;AAsHD,0BAAqC,CAtHpC;AAuHD,aAAqC,CAvHpC;AAwHD,aAAqC,CAxHpC;AAyHD,cAAqC,CAzHpC;AA0HD,cAAqC,CA1HpC;AA2HD,uBAAqC,CA3HpC;AA4HD,aAAqC,CA5HpC;AA6HD,aAAqC,CA7HpC;AA8HD,iBAAqC,CA9HpC;AA+HD,aAAqC,CA/HpC;AAgID,kBAAqC,CAhIpC;AAiID,iBAAqC,CAjIpC;AAkID,aAAqC,CAlIpC;AAmID,cAAqC,CAnIpC;AAoID,cAAqC,CApIpC;AAqID,mBAAqC,CArIpC;AAsID,aAAqC,CAtIpC;AAuID,mBAAqC,CAvIpC;AAwID,qBAAqC,CAxIpC;AAyID,uBAAqC,CAzIpC;AA0ID,wBAAqC,CA1IpC;AA2ID,uBAAqC,CA3IpC;AA4ID,aAAqC,CA5IpC;AA6ID,+BAAqC,CA7IpC;AA8ID,0BAAqC,CA9IpC;AA+ID,aAAqC,CA/IpC;AAgJD,YAAqC,CAhJpC;AAgJuC;AACxC,gBAAqC,CAjJpC;AAkJD,YAAqC,CAlJpC;AAmJD,mBAAqC,CAnJpC;AAoJD,mBAAqC,CApJpC;AAqJD,YAAqC,CArJpC;AAsJD,sBAAqC,CAtJpC;AAuJD,oBAAqC,CAvJpC;AAwJD,YAAqC,CAxJpC;AAyJD,uBAAqC,CAzJpC;AA0JD,2BAAqC,CA1JpC;AA2JD,YAAqC,CA3JpC;AA4JD,+BAAqC,CA5JpC;AA6JD,aAAqC,CA7JpC;AA8JD,yBAAqC,CA9JpC;AA+JD,YAAqC,CA/JpC;AAgKD,2BAAqC,CAhKpC;AAiKD,YAAqC,CAjKpC;AAkKD,2BAAqC,CAlKpC;AAmKD,YAAqC,CAnKpC;AAoKD,2BAAqC,CApKpC;AAqKD,YAAqC,CArKpC;AAsKD,kCAAqC,CAtKpC;AAuKD,aAAqC,CAvKpC;AAwKD,4BAAqC,CAxKpC;AAyKD,4BAAqC,CAzKpC;AA0KD,eAAqC,CA1KpC;AA2KD,eAAqC,CA3KpC;AA4KD,cAAqC,CA5KpC;AA6KD,iBAAqC,CA7KpC;AA8KD,iCAAqC,CA9KpC;AA+KD,cAAqC,CA/KpC;AAgLD,YAAqC,CAhLpC;AAiLD,4BAAqC,CAjLpC;AAkLD,aAAqC,CAlLpC;AAmLD,YAAqC,CAnLpC;AAoLD,iCAAqC,CApLpC;AAqLD,aAAqC,CArLpC;AAsLD,YAAqC,CAtLpC;AAuLD,kCAAqC,CAvLpC;AAwLD,cAAqC,CAxLpC;AAyLD,aAAqC,CAzLpC;AA0LD,2BAAqC,CA1LpC;AA2LD,YAAqC,CA3LpC;AA4LD,sBAAqC,CA5LpC;AA6LD,aAAqC,CA7LpC;AA8LD,0BAAqC,CA9LpC;AA+LD,aAAqC,CA/LpC;AAgMD,6BAAqC,CAhMpC;AAiMD,YAAqC,CAjMpC;AAkMD,4BAAqC,CAlMpC;AAmMD,YAAqC,CAnMpC;AAoMD,uCAAqC,CApMpC;AAqMD,YAAqC,CArMpC;AAsMD,gCAAqC,CAtMpC;AAuMD,YAAqC,CAvMpC;AAwMD,0BAAqC,CAxMpC;AAyMD,YAAqC,CAzMpC;AA0MD,sBAAqC,CA1MpC;AA2MD,YAAqC,CA3MpC;AA4MD,gCAAqC,CA5MpC;AA6MD,4BAAqC,CA7MpC;AA8MD,aAAqC,CA9MpC;AA+MD,kCAAqC,CA/MpC;AAgND,aAAqC,CAhNpC;AAiND,kBAAqC,CAjNpC;AAkND,aAAqC,CAlNpC;AAmND,0BAAqC,CAnNpC;AAoND,mBAAqC,CApNpC;AAqND,gBAAqC,CArNpC;AAsND,YAAqC,CAtNpC;AAuND,mBAAqC,CAvNpC;AAwND,gBAAqC,CAxNpC;AAyND,YAAqC,CAzNpC;AA0ND,sBAAqC,CA1NpC;AA2ND,YAAqC,CA3NpC;AA4ND,qBAAqC,CA5NpC;AA6ND,YAAqC,CA7NpC;AA8ND,eAAqC,CA9NpC;AA+ND,YAAqC,CA/NpC;AAgOD,YAAqC,CAhOpC;AAiOD,qBAAqC,CAjOpC;AAkOD,YAAqC,CAlOpC;AAmOD,2BAAqC,CAnOpC;AAoOD,YAAqC,CApOpC;AAqO+B;AAChC,YAAiC,CAAC,CAAD,EAAG,CAAH,CAtOhC;AAuODC,MAAAA,KAAK,EAA4B,CAAC,CAAD,EAAG,CAAH,CAvOhC;AAwOD,cAAiC,CAAC,CAAD,EAAG,CAAH,CAxOhC;AAyOD,eAAiC,CAAC,CAAD,EAAG,CAAH,CAzOhC;AA0ODC,MAAAA,MAAM,EAA2B,CAAC,CAAD,EAAG,CAAH,CA1OhC;AA2OD,aAAiC,CAAC,CAAD,EAAG,CAAH,CA3OhC;AA4ODC,MAAAA,OAAO,EAA0B,CAAC,CAAD,EAAG,CAAH,CA5OhC;AA6O+B;AAChC,aAAiC,CA9OhC;AA8OuC;AACxCC,MAAAA,MAAM,EAA2B,CA/OhC;AA+OuC;AACxCC,MAAAA,KAAK,EAA4B,CAhPhC;AAgPuC;AACxC,eAAiC,CAjPhC;AAiPuC;AACxCC,MAAAA,IAAI,EAA6B,CAlPhC;AAkPuC;AACxCC,MAAAA,OAAO,EAA0B,CAnPhC;AAmPuC;AACxCC,MAAAA,KAAK,EAA4B,CApPhC;AAoPuC;AACxCC,MAAAA,SAAS,EAAwB,CArPhC;AAqPuC;AACxC,eAAiC,CAtPhC;AAsPuC;AACxCC,MAAAA,MAAM,EAA2B,CAvPhC;AAuPuC;AACxCC,MAAAA,KAAK,EAA4B,CAxPhC;AAwPuC;AACxCC,MAAAA,KAAK,EAA4B,CAzPhC;AAyPuC;AACxCC,MAAAA,KAAK,EAA4B,CA1PhC;AA0PuC;AACxCC,MAAAA,IAAI,EAA6B,CA3PhC;AA2PuC;AACxCC,MAAAA,KAAK,EAA4B,CA5PhC;AA4PuC;AACxCC,MAAAA,GAAG,EAA8B,CA7PhC;AA6PuC;AACxCC,MAAAA,MAAM,EAA2B,CA9PhC;AA8PuC;AACxCC,MAAAA,KAAK,EAA4B,CA/PhC;AA+PuC;AACxCC,MAAAA,QAAQ,EAAyB,CAhQhC;AAgQuC;AACxCC,MAAAA,OAAO,EAA0B,CAjQhC;AAiQuC;AACxC,kBAAiC,CAAC,CAAD,EAAG,CAAH,CAlQhC;AAkQuC;AACxC,aAAiC,CAnQhC;AAmQuC;AACxCC,MAAAA,KAAK,EAA4B,CApQhC;AAoQuC;AACxCC,MAAAA,QAAQ,EAAyB,CArQhC;AAqQuC;AACxCC,MAAAA,OAAO,EAA0B,CAtQhC;AAsQuC;AACxC,iBAAiC,CAvQhC;AAuQuC;AACxCC,MAAAA,OAAO,EAA0B,CAxQhC;AAwQuC;AACxC,gBAAiC,CAzQhC;AAyQuC;AACxCC,MAAAA,GAAG,EAA8B,CA1QhC;AA0QuC;AACxC,YAAiC,CA3QhC;AA2QuC;AACxCC,MAAAA,IAAI,EAA6B,CA5QhC;AA4QuC;AACxCC,MAAAA,IAAI,EAA6B,CA7QhC;AA6QuC;AACxCC,MAAAA,QAAQ,EAAyB,CA9QhC;AA8QuC;AACxCC,MAAAA,UAAU,EAAuB,CA/QhC;AA+QuC;AACxCC,MAAAA,SAAS,EAAwB,CAhRhC;AAgRuC;AACxCC,MAAAA,WAAW,EAAsB,CAjRhC;AAiRuC;AACxCC,MAAAA,QAAQ,EAAyB,CAlRhC;AAkRuC;AACxCC,MAAAA,UAAU,EAAuB,CAnRhC;AAmRuC;AACxCC,MAAAA,GAAG,EAA8B,CApRhC;AAoRuC;AACxC,cAAiC,CArRhC;AAqRuC;AACxC,cAAiC,CAtRhC;AAsRuC;AACxCC,MAAAA,MAAM,EAA2B,CAvRhC;AAuRuC;AACxCC,MAAAA,IAAI,EAA6B,CAxRhC;AAwRuC;AACxC,aAAiC,CAzRhC;AAyRuC;AACxCC,MAAAA,KAAK,EAA4B,CA1RhC;AA0RuC;AACxCC,MAAAA,MAAM,EAA2B,CA3RhC;AA2RuC;AACxCC,MAAAA,KAAK,EAA4B,CA5RhC;AA4RuC;AACxCC,MAAAA,IAAI,EAA6B,CA7RhC;AA6RuC;AACxCC,MAAAA,MAAM,EAA2B,CA9RhC;AA8RuC;AACxCC,MAAAA,QAAQ,EAAyB,CA/RhC;AA+RuC;AACxCC,MAAAA,IAAI,EAA6B,CAhShC;AAgSuC;AACxCC,MAAAA,QAAQ,EAAyB,CAjShC;AAiSuC;AACxCC,MAAAA,QAAQ,EAAyB,CAlShC;AAkSuC;AACxCC,MAAAA,QAAQ,EAAyB,CAnShC;AAmSuC;AACxCC,MAAAA,aAAa,EAAoB,CApShC;AAoSuC;AACxCC,MAAAA,aAAa,EAAoB,CArShC;AAqSuC;AACxCC,MAAAA,UAAU,EAAuB,CAtShC;AAsSuC;AACxCC,MAAAA,QAAQ,EAAyB,CAvShC;AAuSuC;AACxCC,MAAAA,YAAY,EAAqB,CAxShC;AAwSuC;AACxCC,MAAAA,YAAY,EAAqB,CAzShC;AAySuC;AACxCC,MAAAA,SAAS,EAAwB,CA1ShC;AA0SuC;AACxCC,MAAAA,WAAW,EAAsB,CA3ShC;AA2SuC;AACxCC,MAAAA,OAAO,EAA0B,CA5ShC;AA4SuC;AACxCC,MAAAA,OAAO,EAA0B,CA7ShC;AA6SuC;AACxCC,MAAAA,WAAW,EAAsB,CA9ShC;AA8SuC;AACxCC,MAAAA,cAAc,EAAmB,CA/ShC;AA+SuC;AACxCC,MAAAA,gBAAgB,EAAiB,CAhThC;AAgTuC;AACxCC,MAAAA,WAAW,EAAsB,CAjThC;AAiTuC;AACxCC,MAAAA,QAAQ,EAAyB,CAlThC;AAkTuC;AACxCC,MAAAA,QAAQ,EAAyB,CAnThC;AAmTuC;AACxCC,MAAAA,QAAQ,EAAyB,CApThC;AAoTuC;AACxCC,MAAAA,aAAa,EAAoB,CArThC;AAqTuC;AACxCC,MAAAA,aAAa,EAAoB,CAtThC;AAsTuC;AACxCC,MAAAA,UAAU,EAAuB,CAvThC;AAuTuC;AACxCC,MAAAA,WAAW,EAAsB,CAxThC;AAwTuC;AACxCC,MAAAA,UAAU,EAAuB,CAzThC;AAyTuC;AACxCC,MAAAA,KAAK,EAA4B,CA1ThC;AA0TuC;AACxCC,MAAAA,IAAI,EAA6B,CA3ThC;AA2TuC;AACxCC,MAAAA,MAAM,EAA2B,CA5ThC;AA4TuC;AACxC,cAAiC,CA7ThC;AA6TuC;AACxCC,MAAAA,IAAI,EAA6B,CA9ThC;AA8TuC;AACxCC,MAAAA,GAAG,EAA8B,CA/ThC;AA+TuC;AACxC,gBAAiC,CAhUhC;AAgUuC;AACxCC,MAAAA,KAAK,EAA4B,CAjUhC;AAiUuC;AACxC,aAAiC,CAlUhC;AAkUuC;AACxCC,MAAAA,KAAK,EAA4B,CAnUhC;AAmUuC;AACxC,cAAiC,CApUhC;AAoUuC;AACxCC,MAAAA,IAAI,EAA6B,CArUhC;AAqUuC;AACxCC,MAAAA,IAAI,EAA6B,CAtUhC;AAsUuC;AACxCC,MAAAA,IAAI,EAA6B,CAvUhC;AAuUuC;AACxCC,MAAAA,EAAE,EAA+B,CAxUhC;AAwUuC;AACxCC,MAAAA,OAAO,EAA0B,CAzUhC;AAyUuC;AACxCC,MAAAA,MAAM,EAA2B,CA1UhC;AA0UuC;AACxC,cAAiC,CA3UhC;AA2UuC;AACxCC,MAAAA,MAAM,EAA2B,CA5UhC;AA4UuC;AACxCC,MAAAA,KAAK,EAA6B,CA7UjC;AA6UuC;AACxCC,MAAAA,SAAS,EAAwB,CA9UhC;AA8UuC;AACxCC,MAAAA,IAAI,EAA6B,CA/UhC;AA+UuC;AACxC,aAAiC,CAhVhC;AAgVuC;AACxCC,MAAAA,KAAK,EAA4B,CAjVhC;AAiVuC;AACxCC,MAAAA,CAAC,EAAgC,IAlVhC;AAkVuC;AACxCC,MAAAA,GAAG,EAA8B,CAnVhC;AAmVuC;AACxCC,MAAAA,KAAK,EAA4B,CApVhC;AAoVuC;AACxCC,MAAAA,MAAM,EAA2B,CArVhC;AAqVuC;AACxCC,MAAAA,MAAM,EAA2B,CAtVhC;AAsVuC;AACxCC,MAAAA,MAAM,EAA2B,CAvVhC;AAuVuC;AACxCC,MAAAA,MAAM,EAA2B,CAxVhC;AAwVuC;AACxCC,MAAAA,EAAE,EAAgC,CAzVjC;AAyVuC;AACxC,aAAiC,CA1VhC;AA0VuC;AACxCC,MAAAA,IAAI,EAA6B,CA3VhC;AA2VuC;AACxCC,MAAAA,EAAE,EAA+B,CA5VhC;AA4VuC;AACxCC,MAAAA,GAAG,EAA8B,CA7VhC;AA6VuC;AACxCC,MAAAA,IAAI,EAA6B,CA9VhC;AA8VuC;AACxCC,MAAAA,OAAO,EAA0B,CA/VhC;AA+VuC;AACxCC,MAAAA,GAAG,EAA8B,CAhWhC;AAgWuC;AACxCC,MAAAA,GAAG,EAA+B,CAjWjC;AAiWuC;AACxCC,MAAAA,IAAI,EAA6B,CAlWhC;AAkWuC;AACxC,iBAAiC,CAnWhC;AAmWuC;AACxCC,MAAAA,IAAI,EAA6B,CApWhC;AAoWuC;AACxCC,MAAAA,GAAG,EAA8B,CArWhC;AAqWuC;AACxCC,MAAAA,GAAG,EAA8B,CAtWhC;AAsWuC;AACxCC,MAAAA,KAAK,EAA4B,CAvWhC;AAuWuC;AACxCC,MAAAA,MAAM,EAA2B,CAxWhC;AAwWuC;AACxCC,MAAAA,SAAS,EAAwB,CAzWhC;AAyWuC;AACxCC,MAAAA,IAAI,EAA6B,CA1WhC;AA0WuC;AACxCC,MAAAA,CAAC,EAAgC,IA3WhC;AA2WuC;AACxCC,MAAAA,EAAE,EAA+B,IA5WhC;AA4WuC;AACxCC,MAAAA,EAAE,EAA+B,IA7WhC;AA6WuC;AACxCC,MAAAA,SAAS,EAAwB,IA9WhC;AA8WuC;AACxCC,MAAAA,EAAE,EAA+B,IA/WhC;AA+WuC;AACxCC,MAAAA,EAAE,EAA+B,IAhXhC;AAgXuC;AACxCC,MAAAA,IAAI,EAA6B,CAjXhC;AAiXuC;AACxCC,MAAAA,IAAI,EAA6B,CAlXhC;AAkXuC;AACxCC,MAAAA,OAAO,EAA0B,CAnXhC;AAmXuC;AACxCC,MAAAA,QAAQ,EAAyB,CApXhC;AAoXuC;AACxCC,MAAAA,QAAQ,EAAyB,CArXhC;AAqXuC;AACxCC,MAAAA,QAAQ,EAAyB,CAtXhC;AAsXuC;AACxCC,MAAAA,IAAI,EAA6B,CAvXhC;AAuXuC;AACxCC,MAAAA,IAAI,EAA6B,CAxXhC;AAwXuC;AACxCC,MAAAA,GAAG,EAA8B,CAzXhC;AAyXuC;AACxCC,MAAAA,MAAM,EAA2B,CA1XhC;AA0XuC;AACxClI,MAAAA,OAAO,EAA0B,CA3XhC;AA2XuC;AACxCmI,MAAAA,KAAK,EAA4B,CA5XhC;AA4XuC;AACxC,gBAAiC,CA7XhC;AA6XuC;AACxCC,MAAAA,OAAO,EAA0B,CA9XhC;AA8XuC;AACxCC,MAAAA,SAAS,EAAwB,CA/XhC;AA+XuC;AACxCC,MAAAA,MAAM,EAA2B,CAhYhC;AAgYuC;AACxCC,MAAAA,KAAK,EAA4B,CAjYhC;AAiYuC;AACxCC,MAAAA,CAAC,EAAgC,IAlYhC;AAkYuC;AACxCC,MAAAA,GAAG,EAA8B,CAnYhC;AAmYuC;AACxCC,MAAAA,MAAM,EAA2B,CApYhC;AAoYuC;AACxCC,MAAAA,IAAI,EAA6B,CArYhC;AAqYuC;AACxCC,MAAAA,OAAO,EAA0B,CAtYhC;AAsYuC;AACxCC,MAAAA,MAAM,EAA2B,CAvYhC;AAuYuC;AACxCC,MAAAA,MAAM,EAA2B,CAxYhC;AAwYuC;AACxCC,MAAAA,MAAM,EAA2B,CAzYhC;AAyYuC;AACxCC,MAAAA,KAAK,EAA4B,CA1YhC;AA0YuC;AACxCC,MAAAA,IAAI,EAA6B,CA3YhC;AA2YuC;AACxCC,MAAAA,QAAQ,EAAyB,CA5YhC;AA4YuC;AACxCC,MAAAA,UAAU,EAAuB,CA7YhC;AA6YuC;AACxCC,MAAAA,SAAS,EAAwB,CA9YhC;AA8YuC;AACxCC,MAAAA,OAAO,EAA0B,CA/YhC;AA+YuC;AACxCC,MAAAA,WAAW,EAAsB,CAhZhC;AAgZuC;AACxCC,MAAAA,WAAW,EAAsB,CAjZhC;AAiZuC;AACxCC,MAAAA,QAAQ,EAAyB,CAlZhC;AAkZuC;AACxCC,MAAAA,UAAU,EAAuB,CAnZhC;AAmZuC;AACxCC,MAAAA,UAAU,EAAuB,CApZhC;AAoZuC;AACxCC,MAAAA,KAAK,EAA4B,CArZhC;AAqZuC;AACxCC,MAAAA,MAAM,EAA2B,CAtZhC;AAsZuC;AACxCC,MAAAA,MAAM,EAA2B,CAvZhC;AAuZuC;AACxCC,MAAAA,OAAO,EAA0B,CAxZhC;AAwZuC;AACxCC,MAAAA,QAAQ,EAAyB,CAzZhC;AAyZuC;AACxCC,MAAAA,QAAQ,EAAyB,CA1ZhC;AA0ZuC;AACxC,aAAiC,CA3ZhC;AA2ZuC;AACxCC,MAAAA,KAAK,EAA4B,CA5ZhC;AA4ZuC;AACxCC,MAAAA,MAAM,EAA2B,CA7ZhC;AA6ZuC;AACxCC,MAAAA,UAAU,EAAuB,CA9ZhC;AA8ZuC;AACxC,cAAiC,CA/ZhC;AA+ZuC;AACxCC,MAAAA,MAAM,EAA2B,CAhahC;AAgauC;AACxC,eAAiC,CAjahC;AAiauC;AACxCC,MAAAA,OAAO,EAA0B,CAlahC;AAkauC;AACxC,cAAiC,CAnahC;AAmauC;AACxCC,MAAAA,KAAK,EAA4B,CApahC;AAoauC;AACxCC,MAAAA,IAAI,EAA6B,CArahC;AAqauC;AACxCC,MAAAA,KAAK,EAA4B,CAtahC;AAsauC;AACxCC,MAAAA,KAAK,EAA4B,CAvahC;AAuauC;AACxC,aAAiC,CAxahC;AAwauC;AACxC,gBAAiC,CAzahC;AAyauC;AACxCC,MAAAA,OAAO,EAA0B,CA1ahC;AA0auC;AACxCC,MAAAA,OAAO,EAA0B,CA3ahC;AA2auC;AACxCC,MAAAA,OAAO,EAA0B,CA5ahC;AA4auC;AACxCC,MAAAA,OAAO,EAA0B,CA7ahC;AA6auC;AACxCC,MAAAA,OAAO,EAA0B,CA9ahC;AA8auC;AACxCC,MAAAA,MAAM,EAA2B,CA/ahC;AA+auC;AACxCC,MAAAA,QAAQ,EAAyB,CAhbhC;AAgbuC;AACxCC,MAAAA,IAAI,EAA6B,CAjbhC;AAibuC;AACxCC,MAAAA,OAAO,EAA0B,CAlbhC;AAkbuC;AACxCC,MAAAA,GAAG,EAA8B,CAnbhC;AAmbuC;AACxCC,MAAAA,IAAI,EAA6B,CApbhC;AAobuC;AACxCC,MAAAA,IAAI,EAA6B,CArbhC;AAqbuC;AACxCC,MAAAA,KAAK,EAA4B,CAtbhC;AAsbuC;AACxCC,MAAAA,EAAE,EAA+B,IAvbhC;AAubuC;AACxCC,MAAAA,QAAQ,EAAyB,CAxbhC;AAwbuC;AACxCC,MAAAA,EAAE,EAA+B,CAzbhC;AAybuC;AACxCC,MAAAA,OAAO,EAA0B,CA1bhC;AA0buC;AACxCC,MAAAA,KAAK,EAA4B,CA3bhC;AA2buC;AACxCC,MAAAA,KAAK,EAA4B,CA5bhC;AA4buC;AACxCC,MAAAA,MAAM,EAA2B,CA7bhC;AA6buC;AACxCC,MAAAA,MAAM,EAA2B,CA9bhC;AA8buC;AACxCC,MAAAA,OAAO,EAA0B,CA/bhC;AA+buC;AACxCC,MAAAA,KAAK,EAA4B,CAhchC;AAgcuC;AACxCC,MAAAA,GAAG,EAA8B,CAjchC;AAicuC;AACxCC,MAAAA,KAAK,EAA4B,CAlchC;AAkcuC;AACxCC,MAAAA,MAAM,EAA2B,CAnchC;AAmcuC;AACxCC,MAAAA,GAAG,EAA8B,CApchC;AAocuC;AACxCC,MAAAA,IAAI,EAA6B,CArchC;AAqcuC;AACxCC,MAAAA,OAAO,EAA0B,CAtchC;AAscuC;AACxCC,MAAAA,SAAS,EAAwB,CAvchC;AAucuC;AACxCC,MAAAA,IAAI,EAA6B,CAxchC;AAwcuC;AACxCC,MAAAA,IAAI,EAA6B,CAzchC;AAycuC;AACxCC,MAAAA,KAAK,EAA4B,CA1chC;AA0cuC;AACxCC,MAAAA,CAAC,EAAgC;AA3chC,KAAT,CAF+B,CA6ciB;;AAEhD,QAAIC,OAAO,GAAC,UAAZ;AACA,QAAIC,WAAW,GAAC,iBAAhB,CAhd+B,CAgdiB;;AAEhD,aAASC,UAAT,CAAoBC,MAApB,EAA2BvC,KAA3B,EAAiCwC,KAAjC,EAAuCC,KAAvC,EAA6CC,IAA7C,EAAkD;AAAM;AAChD1C,MAAAA,KAAK,CAACwC,KAAN,GAAY,IAAZ,CAD0C,CACM;;AAChDxC,MAAAA,KAAK,CAACyC,KAAN,GAAY,IAAZ;AACAzC,MAAAA,KAAK,CAAC0C,IAAN,GAAW,IAAX;;AACA1C,MAAAA,KAAK,CAAC2C,QAAN,GAAe,UAASJ,MAAT,EAAgBvC,KAAhB,EAAsB;AAC7B,YAAI4C,CAAC,GAAC,KAAN;AAAA,YAAYC,CAAZ;AAAA,YAAcC,CAAC,GAAC,CAAhB;;AACA,eAAMD,CAAC,GAACN,MAAM,CAAC3G,IAAP,EAAR,EAAsB;AACd,cAAGiH,CAAC,KAAGL,KAAK,CAACM,CAAD,CAAT,IAAc,CAACF,CAAlB,EAAoB;AACZ,gBAAGJ,KAAK,CAAC,EAAEM,CAAH,CAAL,KAAaC,SAAhB,EAA0B;AAClB/C,cAAAA,KAAK,CAACwC,KAAN,GAAYA,KAAK,CAACM,CAAD,CAAjB;AACA9C,cAAAA,KAAK,CAACyC,KAAN,GAAYA,KAAZ;AACAzC,cAAAA,KAAK,CAAC0C,IAAN,GAAWA,IAAX;AAAiB,aAHzB,MAIK,IAAGA,IAAH,EACGH,MAAM,CAACS,QAAP,CAAgBN,IAAhB;;AACR1C,YAAAA,KAAK,CAAC2C,QAAN,GAAeM,SAAf;AACA,mBAAOR,KAAP;AAAc;;AACtBG,UAAAA,CAAC,GAAC,CAACA,CAAD,IAAIC,CAAC,IAAE,IAAT;AAAe;;AACvB,eAAOJ,KAAP;AAAc,OAbtB;;AAcA,aAAOzC,KAAK,CAAC2C,QAAN,CAAeJ,MAAf,EAAsBvC,KAAtB,CAAP;AAAqC;;AAE7C,aAASkD,cAAT,CAAwBX,MAAxB,EAA+BvC,KAA/B,EAAqCmD,MAArC,EAA4C;AACpCnD,MAAAA,KAAK,CAAC2C,QAAN,GAAe,UAASJ,MAAT,EAAgBvC,KAAhB,EAAsB;AAC7B,YAAGuC,MAAM,CAACY,MAAP,IAAeA,MAAlB,EACQnD,KAAK,CAAC2C,QAAN,GAAeM,SAAf;AACRV,QAAAA,MAAM,CAACa,SAAP;AACA,eAAO,QAAP;AAAiB,OAJzB;;AAKA,aAAOpD,KAAK,CAAC2C,QAAN,CAAeJ,MAAf,EAAsBvC,KAAtB,CAAP;AAAqC;;AAE7C,aAASiD,SAAT,CAAmBV,MAAnB,EAA0BvC,KAA1B,EAAgC;AACxB,UAAGuC,MAAM,CAACc,QAAP,EAAH,EACQ,OAAO,IAAP;AACR,UAAGrD,KAAK,CAACwC,KAAT,EACQ,OAAOF,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAcA,KAAK,CAACwC,KAApB,EAA0BxC,KAAK,CAACyC,KAAhC,EAAsCzC,KAAK,CAAC0C,IAA5C,CAAjB;AACR,UAAGH,MAAM,CAACe,KAAP,CAAa,YAAb,EAA0B,KAA1B,CAAH,EACQ,IAAGf,MAAM,CAACe,KAAP,CAAa,6EAAb,CAAH,EACQ,OAAO,QAAP;;AAChB,UAAGf,MAAM,CAACe,KAAP,CAAa,WAAb,CAAH,EAA6B;AAAmB;AACxCf,QAAAA,MAAM,CAACS,QAAP,CAAgB,IAAhB;AACA,eAAOE,cAAc,CAACX,MAAD,EAAQvC,KAAR,EAAcuC,MAAM,CAACgB,OAAP,GAAiBC,MAAjB,CAAwB,CAAxB,CAAd,CAArB;AAAgE;;AACxE,UAAGjB,MAAM,CAACkB,GAAP,MAAclB,MAAM,CAACe,KAAP,CAAa,eAAb,CAAjB,EAA+C;AAAC;AACxC,eAAOJ,cAAc,CAACX,MAAD,EAAQvC,KAAR,EAAc,MAAd,CAArB;AAA4C;;AACpD,UAAI0D,EAAE,GAACnB,MAAM,CAAC3G,IAAP,EAAP;;AACA,UAAG8H,EAAE,IAAE,GAAJ,IAASA,EAAE,IAAE,GAAhB,EAAoB;AAA4B;AACxC,YAAGC,MAAM,CAACpB,MAAD,EAAS,CAAT,CAAN,IAAmB,OAAKmB,EAA3B,EAA8B;AACtB,cAAIE,CAAC,GAACrB,MAAM,CAACjG,GAAb;AACAiG,UAAAA,MAAM,CAACS,QAAP,CAAgB,IAAhB;AACA,cAAIa,CAAC,GAACtB,MAAM,CAACgB,OAAP,GAAiBC,MAAjB,CAAwB,CAAxB,CAAN;AACA,cAAGK,CAAC,IAAEtB,MAAM,CAACuB,GAAP,CAAWJ,EAAX,CAAN,EACQ,OAAOR,cAAc,CAACX,MAAD,EAAQvC,KAAR,EAAc6D,CAAd,CAArB;AACRtB,UAAAA,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc;;AACtB,eAAOtB,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC0D,EAAD,CAAd,EAAmB,QAAnB,CAAjB;AAA+C;;AACvD,UAAGA,EAAE,IAAE,GAAP,EAAW;AACH,YAAIb,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAV;;AACA,YAAG,EAAEM,CAAC,IAAE,KAAKmB,IAAL,CAAUnB,CAAV,CAAL,CAAH,EAAsB;AACdA,UAAAA,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAN;;AACA,cAAGM,CAAC,IAAE,GAAN,EAAU;AACFA,YAAAA,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAN;;AACA,gBAAGM,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAG,aAAa2B,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChBoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAACuC,MAAM,CAACuB,GAAP,CAAWjB,CAAX,CAAD,CAAd,EAA8BT,OAA9B,EAAsCC,WAAtC,CAAjB;AAAqE;AAAC,WAhBtF,MAiBK,IAAGQ,CAAC,IAAE,GAAN,EAAU;AACPA,YAAAA,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAN;;AACA,gBAAGM,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG,aAAagE,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChBoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAACuC,MAAM,CAACuB,GAAP,CAAWjB,CAAX,CAAD,CAAd,EAA8B,QAA9B,CAAjB;AAA0D;AAAC,WAhBtE,MAiBA,IAAGA,CAAC,IAAE,GAAN,EAAU;AACPA,YAAAA,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAN;;AACA,gBAAGM,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;AAAiD;;AACzD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;AAAiD;;AACzD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;AAAiD;;AACzD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;AAAiD;;AACzD,gBAAG,aAAagE,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChBoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAACuC,MAAM,CAACuB,GAAP,CAAWjB,CAAX,CAAD,CAAd,EAA8B,SAA9B,CAAjB;AAA2D;AAAC,WAhBvE,MAiBA,IAAGA,CAAC,IAAE,GAAN,EAAU;AACPA,YAAAA,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAN;;AACA,gBAAGM,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAG,aAAa2B,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChBoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAACuC,MAAM,CAACuB,GAAP,CAAWjB,CAAX,CAAD,CAAd,EAA8BT,OAA9B,EAAsCC,WAAtC,CAAjB;AAAqE;AAAC,WAhBjF,MAiBA,IAAG,kBAAkB2B,IAAlB,CAAuBnB,CAAvB,CAAH,EAA6B;AAC1B,gBAAGA,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG6C,CAAC,IAAE,GAAN,EAAU;AACFoB,cAAAA,SAAS,CAAC1B,MAAD,EAAS,CAAT,CAAT;AACA,qBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;AAAgD;;AACxD,gBAAG,aAAagE,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChB,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAACuC,MAAM,CAACuB,GAAP,CAAWjB,CAAX,CAAD,CAAd,EAA8B,QAA9B,CAAjB;AAA0D;AAAC;AAAC;AAAC;;AAC7F,UAAGa,EAAE,IAAE,GAAP,EAAW;AACH,YAAIb,CAAC,GAACkB,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAV;;AACA,YAAG,EAAEM,CAAC,IAAE,KAAKmB,IAAL,CAAUnB,CAAV,CAAL,CAAH,EAAsB;AACdA,UAAAA,CAAC,GAACN,MAAM,CAACuB,GAAP,CAAW,iBAAX,CAAF;;AACA,cAAGjB,CAAH,EAAK;AACG,gBAAG,aAAamB,IAAb,CAAkBnB,CAAlB,CAAH,EAAwB;AAChB,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC6C,CAAD,CAAd,EAAkBT,OAAlB,EAA0BC,WAA1B,CAAjB;AAAyD;;AACjE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACF,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACF,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACF,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;;AACnE,gBAAGQ,CAAC,IAAE,GAAN,EAAU;AACF,qBAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBoC,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;AAAC;AAAC;AAAC;;AAC9F,UAAGqB,EAAE,IAAE,GAAP,EAAW;AACH,YAAIb,CAAC,GAAC,cAAcmB,IAAd,CAAmBD,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;AACA,YAAG,CAACM,CAAJ,EAAM;AACEA,UAAAA,CAAC,GAACN,MAAM,CAACuB,GAAP,CAAW,iBAAX,CAAF;;AACA,cAAGjB,CAAH,EAAK;AACG,gBAAGA,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,mBAAOC,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC6C,CAAD,EAAGA,CAAH,CAAd,EAAoBT,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;AAAC;AAAC;;AACrF,UAAGqB,EAAE,IAAE,GAAP,EAAW;AACH,YAAIb,CAAC,GAAC,cAAcmB,IAAd,CAAmBD,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;AACA,YAAG,CAACM,CAAJ,EAAM;AACEA,UAAAA,CAAC,GAACN,MAAM,CAACuB,GAAP,CAAW,iBAAX,CAAF;;AACA,cAAGjB,CAAH,EAAK;AACG,gBAAGA,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,gBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,mBAAOC,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC6C,CAAD,EAAGA,CAAH,CAAd,EAAoBT,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;AAAC;AAAC;;AACrF,UAAGqB,EAAE,IAAE,GAAP,EAAW;AACH,YAAIb,CAAC,GAAC,cAAcmB,IAAd,CAAmBD,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;AACA,YAAG,CAACM,CAAJ,EAAM;AACEA,UAAAA,CAAC,GAACN,MAAM,CAACuB,GAAP,CAAW,GAAX,CAAF;;AAAkB,cAAGjB,CAAH,EAAK;AACvBA,YAAAA,CAAC,GAACN,MAAM,CAACuB,GAAP,CAAW,iBAAX,CAAF;;AACA,gBAAGjB,CAAH,EAAK;AACG,kBAAGA,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,kBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,kBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,kBAAGQ,CAAC,IAAE,GAAN,EACQ,OAAOP,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBoC,OAAxB,EAAgCC,WAAhC,CAAjB;AACR,qBAAOC,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC6C,CAAD,EAAGA,CAAH,CAAd,EAAoBT,OAApB,EAA4BC,WAA5B,CAAjB;AAA2D;AAAC;AAAC;AAAC;;AACtF,UAAGqB,EAAE,IAAE,GAAP,EAAW;AACH,eAAOpB,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC0D,EAAD,CAAd,EAAmB,YAAnB,CAAjB;AAAmD;;AAC3D,UAAGA,EAAE,IAAE,GAAP,EAAW;AACH,YAAG,CAAC,QAAQM,IAAR,CAAaL,MAAM,CAACpB,MAAD,CAAnB,CAAJ,EACQ,OAAO,UAAP,CADR,KAGQ,OAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC0D,EAAD,CAAd,EAAmBtB,OAAnB,EAA2BC,WAA3B,CAAjB;AAA0D;;AAC1E,UAAGqB,EAAE,IAAE,GAAP,EAAW;AACH,YAAIE,CAAC,GAACrB,MAAM,CAACjG,GAAb;AACA,YAAGiG,MAAM,CAACS,QAAP,CAAgB,IAAhB,KAAuBT,MAAM,CAACuB,GAAP,CAAW,GAAX,KAAiBvB,MAAM,CAACS,QAAP,CAAgB,IAAhB,CAAjB,IAAwCT,MAAM,CAACuB,GAAP,CAAW,GAAX,CAAlE,EACQ,OAAO,YAAP,CADR,KAGQvB,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc;;AAC9B,UAAG,QAAQI,IAAR,CAAaN,EAAb,CAAH,EAAoB;AACZ,YAAIE,CAAC,GAACrB,MAAM,CAACjG,GAAb;;AACA,YAAGiG,MAAM,CAACuB,GAAP,CAAW,GAAX,KAAiBvB,MAAM,CAACuB,GAAP,CAAW,OAAX,CAAjB,IAAsC,CAAC,SAASE,IAAT,CAAcD,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAlB,CAAD,IAAkCA,MAAM,CAACuB,GAAP,CAAW,sCAAX,CAA3E,EAA8H;AACtH,cAAIjB,CAAC,GAACN,MAAM,CAACgB,OAAP,EAAN;AACA,cAAG1N,IAAI,CAACgN,CAAD,CAAP,EACQ,OAAO,YAAP;AAAqB;;AACrCN,QAAAA,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc;;AACtB,UAAG,SAASI,IAAT,CAAcN,EAAd,CAAH,EAAqB;AACb,YAAGnB,MAAM,CAACS,QAAP,CAAgB,WAAhB,KAA8BT,MAAM,CAACuB,GAAP,CAAW,GAAX,KAAiBvB,MAAM,CAACS,QAAP,CAAgB,WAAhB,CAAjB,IAA+CT,MAAM,CAACuB,GAAP,CAAW,GAAX,CAAhF,EAAgG;AACxF,cAAIjB,CAAC,GAACN,MAAM,CAACgB,OAAP,EAAN;AACA,cAAG1N,IAAI,CAACgN,CAAD,CAAP,EACQ,OAAO,YAAP,CADR,KAGQ,OAAO,UAAP;AAAmB;AAAC;;AAC5C,UAAGa,EAAE,IAAE,GAAP,EAAW;AACH,YAAGK,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAJ,IAAkB,GAArB,EAAyB;AACjBA,UAAAA,MAAM,CAACa,SAAP;AACA,iBAAO,SAAP;AAAkB;AAAC;;AACnC,UAAG,2BAA2BY,IAA3B,CAAgCN,EAAhC,CAAH,EAAuC;AAC/B,YAAIE,CAAC,GAACrB,MAAM,CAACjG,GAAb;AACAiG,QAAAA,MAAM,CAACS,QAAP,CAAgB,0BAAhB;AACA,YAAGnN,IAAI,CAAC0M,MAAM,CAACgB,OAAP,EAAD,CAAP,EACQ,OAAO,UAAP,CADR,KAGQhB,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc;;AAC9B,UAAGF,EAAE,IAAE,GAAP,EAAW;AACH,YAAGnB,MAAM,CAACjG,GAAP,IAAY,CAAf,EAAiB;AACT,cAAG4H,MAAM,CAAC3B,MAAD,EAAS,CAAT,CAAN,IAAmB,QAAtB,EAA+B;AACvB,mBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,SAArB,CAAjB;AAAkD,WAD1D,MAEK,IAAGkE,MAAM,CAAC3B,MAAD,EAAS,CAAT,CAAN,IAAmB,SAAtB,EAAgC;AAC7B,mBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,YAArB,CAAjB;AAAqD,WADxD,MAEA,IAAGkE,MAAM,CAAC3B,MAAD,EAAS,CAAT,CAAN,IAAmB,MAAtB,EAA6B;AAC1B,mBAAOD,UAAU,CAACC,MAAD,EAAQvC,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,QAArB,CAAjB;AAAiD;AAAC;AAAC;;AAC3E,UAAG,KAAKgE,IAAL,CAAUN,EAAV,CAAH,EAAiB;AACT,YAAIE,CAAC,GAACrB,MAAM,CAACjG,GAAb;AACA,YAAGyH,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAJ,IAAkB,GAAlB,KAAwBwB,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAJ,IAAiB,GAAjB,IAAsBA,MAAM,CAACS,QAAP,CAAgB,IAAhB,KAAuBe,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAJ,IAAiB,GAAtF,CAAH,EACQ,OAAO,QAAP,CADR,KAGQA,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc;;AAC9B,UAAG,QAAQI,IAAR,CAAaN,EAAb,CAAH,EAAoB;AACZ,YAAIS,CAAC,GAACJ,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAV;AACA,YAAIqB,CAAC,GAACrB,MAAM,CAACjG,GAAb;AACAiG,QAAAA,MAAM,CAACS,QAAP,CAAgB,QAAhB;;AACA,YAAG,UAAUgB,IAAV,CAAeD,IAAI,CAACxB,MAAD,EAAS,CAAT,CAAnB,CAAH,EAAmC;AAC3BA,UAAAA,MAAM,CAACjG,GAAP,GAAWsH,CAAX;AAAc,SADtB,MAEI;AACI,cAAIf,CAAC,GAAChN,IAAI,CAAC0M,MAAM,CAACgB,OAAP,EAAD,CAAV;AACA,cAAG,CAACV,CAAJ,EACQ,OAAO,MAAP;AACR,cAAGA,CAAC,CAAC,CAAD,CAAJ,EACQA,CAAC,GAACA,CAAC,CAAC,CAAD,CAAH;;AACR,cAAGsB,CAAC,IAAE,GAAN,EAAU;AACF,gBAAGtB,CAAC,IAAE,CAAN,EACQ,OAAO,SAAP,CADR,KAEK,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,KAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,MAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,UAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,YAAP,CADH,KAGG,OAAO,MAAP;AAAe,WAZ/B,MAcQ,OAAO,MAAP;AAAe;AAAC;;AACxC,UAAG,YAAYmB,IAAZ,CAAiBN,EAAjB,CAAH,EAAwB;AAChB,YAAIS,CAAC,GAACJ,IAAI,CAACxB,MAAD,EAAS,CAAC,CAAV,CAAV;AACAA,QAAAA,MAAM,CAACS,QAAP,CAAgB,IAAhB;AACA,YAAIH,CAAC,GAAChN,IAAI,CAAC0M,MAAM,CAACgB,OAAP,EAAD,CAAV;AACA,YAAG,CAACV,CAAJ,EACQ,OAAO,MAAP;AACR,YAAGA,CAAC,CAAC,CAAD,CAAJ,EACQA,CAAC,GAACA,CAAC,CAAC,CAAD,CAAH;;AACR,YAAGsB,CAAC,IAAE,GAAN,EAAU;AACF,cAAGtB,CAAC,IAAE,CAAN,EACQ,OAAO,SAAP,CADR,KAEK,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,KAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,MAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,UAAP,CADH,KAEA,IAAGA,CAAC,IAAE,CAAN,EACG,OAAO,YAAP,CADH,KAGG,OAAO,MAAP;AAAe,SAZ/B,MAcQ,OAAO,MAAP;AAAe;;AAC/B,aAAO,IAAP;AAAa;;AAErB,WAAO;AACHuB,MAAAA,UAAU,EAAE,YAAW;AACnB,eAAO;AACHzB,UAAAA,QAAQ,EAAEM,SADP;AAEHT,UAAAA,KAAK,EAAE,IAFJ;AAGHC,UAAAA,KAAK,EAAE,IAHJ;AAIHC,UAAAA,IAAI,EAAE;AAJH,SAAP;AAMH,OARE;AASH2B,MAAAA,KAAK,EAAE,UAAS9B,MAAT,EAAiBvC,KAAjB,EAAwB;AAC3B,eAAO,CAACA,KAAK,CAAC2C,QAAN,IAAkBM,SAAnB,EAA8BV,MAA9B,EAAsCvC,KAAtC,CAAP;AACH,OAXE;AAYHsE,MAAAA,WAAW,EAAE;AAZV,KAAP;AAcP,GA5wBD;AA8wBA3O,EAAAA,UAAU,CAAC4O,cAAX,CAA0B,WAA1B,EAAuC,MAAvC,EAA+C,OAA/C;AAEA5O,EAAAA,UAAU,CAAC6O,UAAX,CAAsB,aAAtB,EAAqC,MAArC,EAnxBwB,CAqxBxB;;AACA,WAAST,IAAT,CAAcxB,MAAd,EAAsBM,CAAtB,EAAwB;AACtB,WAAON,MAAM,CAACY,MAAP,CAAcsB,MAAd,CAAqBlC,MAAM,CAACjG,GAAP,IAAYuG,CAAC,IAAE,CAAf,CAArB,CAAP;AACD,GAxxBuB,CA0xBxB;;;AACA,WAASc,MAAT,CAAgBpB,MAAhB,EAAwBM,CAAxB,EAA0B;AACxB,QAAGA,CAAH,EAAK;AACH,UAAI6B,CAAC,GAACnC,MAAM,CAACjG,GAAP,GAAWuG,CAAjB;AACA,aAAON,MAAM,CAACY,MAAP,CAAcK,MAAd,CAAsBkB,CAAC,IAAE,CAAH,GAAKA,CAAL,GAAO,CAA7B,EAAgC7B,CAAhC,CAAP;AAA2C,KAF7C,MAGI;AACF,aAAON,MAAM,CAACY,MAAP,CAAcK,MAAd,CAAqB,CAArB,EAAuBjB,MAAM,CAACjG,GAAP,GAAW,CAAlC,CAAP;AACD;AACF,GAlyBuB,CAoyBxB;;;AACA,WAAS4H,MAAT,CAAgB3B,MAAhB,EAAwBM,CAAxB,EAA0B;AACxB,QAAIV,CAAC,GAACI,MAAM,CAACY,MAAP,CAAcrI,MAApB;AACA,QAAI4J,CAAC,GAACvC,CAAC,GAACI,MAAM,CAACjG,GAAT,GAAa,CAAnB;AACA,WAAOiG,MAAM,CAACY,MAAP,CAAcK,MAAd,CAAqBjB,MAAM,CAACjG,GAA5B,EAAiCuG,CAAC,IAAEA,CAAC,GAACV,CAAL,GAAOU,CAAP,GAAS6B,CAA1C,CAAP;AACD,GAzyBuB,CA2yBxB;;;AACA,WAAST,SAAT,CAAmB1B,MAAnB,EAA2BM,CAA3B,EAA6B;AAC3B,QAAI6B,CAAC,GAACnC,MAAM,CAACjG,GAAP,GAAWuG,CAAjB;AACA,QAAIV,CAAJ;AACA,QAAGuC,CAAC,IAAE,CAAN,EACEnC,MAAM,CAACjG,GAAP,GAAW,CAAX,CADF,KAEK,IAAGoI,CAAC,KAAGvC,CAAC,GAACI,MAAM,CAACY,MAAP,CAAcrI,MAAd,GAAqB,CAA1B,CAAJ,EACHyH,MAAM,CAACjG,GAAP,GAAW6F,CAAX,CADG,KAGHI,MAAM,CAACjG,GAAP,GAAWoI,CAAX;AACH;AAEA,CA9zBD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// CodeMirror2 mode/perl/perl.js (text/x-perl) beta 0.10 (2011-11-08)\n// This is a part of CodeMirror from https://github.com/sabaca/CodeMirror_mode_perl (mail@sabaca.com)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"perl\",function(){\n        // http://perldoc.perl.org\n        var PERL={                                      //   null - magic touch\n                                                        //   1 - keyword\n                                                        //   2 - def\n                                                        //   3 - atom\n                                                        //   4 - operator\n                                                        //   5 - variable-2 (predefined)\n                                                        //   [x,y] - x=1,2,3; y=must be defined if x{...}\n                                                //      PERL operators\n                '->'                            :   4,\n                '++'                            :   4,\n                '--'                            :   4,\n                '**'                            :   4,\n                                                        //   ! ~ \\ and unary + and -\n                '=~'                            :   4,\n                '!~'                            :   4,\n                '*'                             :   4,\n                '/'                             :   4,\n                '%'                             :   4,\n                'x'                             :   4,\n                '+'                             :   4,\n                '-'                             :   4,\n                '.'                             :   4,\n                '<<'                            :   4,\n                '>>'                            :   4,\n                                                        //   named unary operators\n                '<'                             :   4,\n                '>'                             :   4,\n                '<='                            :   4,\n                '>='                            :   4,\n                'lt'                            :   4,\n                'gt'                            :   4,\n                'le'                            :   4,\n                'ge'                            :   4,\n                '=='                            :   4,\n                '!='                            :   4,\n                '<=>'                           :   4,\n                'eq'                            :   4,\n                'ne'                            :   4,\n                'cmp'                           :   4,\n                '~~'                            :   4,\n                '&'                             :   4,\n                '|'                             :   4,\n                '^'                             :   4,\n                '&&'                            :   4,\n                '||'                            :   4,\n                '//'                            :   4,\n                '..'                            :   4,\n                '...'                           :   4,\n                '?'                             :   4,\n                ':'                             :   4,\n                '='                             :   4,\n                '+='                            :   4,\n                '-='                            :   4,\n                '*='                            :   4,  //   etc. ???\n                ','                             :   4,\n                '=>'                            :   4,\n                '::'                            :   4,\n                                                        //   list operators (rightward)\n                'not'                           :   4,\n                'and'                           :   4,\n                'or'                            :   4,\n                'xor'                           :   4,\n                                                //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n                'BEGIN'                         :   [5,1],\n                'END'                           :   [5,1],\n                'PRINT'                         :   [5,1],\n                'PRINTF'                        :   [5,1],\n                'GETC'                          :   [5,1],\n                'READ'                          :   [5,1],\n                'READLINE'                      :   [5,1],\n                'DESTROY'                       :   [5,1],\n                'TIE'                           :   [5,1],\n                'TIEHANDLE'                     :   [5,1],\n                'UNTIE'                         :   [5,1],\n                'STDIN'                         :    5,\n                'STDIN_TOP'                     :    5,\n                'STDOUT'                        :    5,\n                'STDOUT_TOP'                    :    5,\n                'STDERR'                        :    5,\n                'STDERR_TOP'                    :    5,\n                '$ARG'                          :    5,\n                '$_'                            :    5,\n                '@ARG'                          :    5,\n                '@_'                            :    5,\n                '$LIST_SEPARATOR'               :    5,\n                '$\"'                            :    5,\n                '$PROCESS_ID'                   :    5,\n                '$PID'                          :    5,\n                '$$'                            :    5,\n                '$REAL_GROUP_ID'                :    5,\n                '$GID'                          :    5,\n                '$('                            :    5,\n                '$EFFECTIVE_GROUP_ID'           :    5,\n                '$EGID'                         :    5,\n                '$)'                            :    5,\n                '$PROGRAM_NAME'                 :    5,\n                '$0'                            :    5,\n                '$SUBSCRIPT_SEPARATOR'          :    5,\n                '$SUBSEP'                       :    5,\n                '$;'                            :    5,\n                '$REAL_USER_ID'                 :    5,\n                '$UID'                          :    5,\n                '$<'                            :    5,\n                '$EFFECTIVE_USER_ID'            :    5,\n                '$EUID'                         :    5,\n                '$>'                            :    5,\n                '$a'                            :    5,\n                '$b'                            :    5,\n                '$COMPILING'                    :    5,\n                '$^C'                           :    5,\n                '$DEBUGGING'                    :    5,\n                '$^D'                           :    5,\n                '${^ENCODING}'                  :    5,\n                '$ENV'                          :    5,\n                '%ENV'                          :    5,\n                '$SYSTEM_FD_MAX'                :    5,\n                '$^F'                           :    5,\n                '@F'                            :    5,\n                '${^GLOBAL_PHASE}'              :    5,\n                '$^H'                           :    5,\n                '%^H'                           :    5,\n                '@INC'                          :    5,\n                '%INC'                          :    5,\n                '$INPLACE_EDIT'                 :    5,\n                '$^I'                           :    5,\n                '$^M'                           :    5,\n                '$OSNAME'                       :    5,\n                '$^O'                           :    5,\n                '${^OPEN}'                      :    5,\n                '$PERLDB'                       :    5,\n                '$^P'                           :    5,\n                '$SIG'                          :    5,\n                '%SIG'                          :    5,\n                '$BASETIME'                     :    5,\n                '$^T'                           :    5,\n                '${^TAINT}'                     :    5,\n                '${^UNICODE}'                   :    5,\n                '${^UTF8CACHE}'                 :    5,\n                '${^UTF8LOCALE}'                :    5,\n                '$PERL_VERSION'                 :    5,\n                '$^V'                           :    5,\n                '${^WIN32_SLOPPY_STAT}'         :    5,\n                '$EXECUTABLE_NAME'              :    5,\n                '$^X'                           :    5,\n                '$1'                            :    5, // - regexp $1, $2...\n                '$MATCH'                        :    5,\n                '$&'                            :    5,\n                '${^MATCH}'                     :    5,\n                '$PREMATCH'                     :    5,\n                '$`'                            :    5,\n                '${^PREMATCH}'                  :    5,\n                '$POSTMATCH'                    :    5,\n                \"$'\"                            :    5,\n                '${^POSTMATCH}'                 :    5,\n                '$LAST_PAREN_MATCH'             :    5,\n                '$+'                            :    5,\n                '$LAST_SUBMATCH_RESULT'         :    5,\n                '$^N'                           :    5,\n                '@LAST_MATCH_END'               :    5,\n                '@+'                            :    5,\n                '%LAST_PAREN_MATCH'             :    5,\n                '%+'                            :    5,\n                '@LAST_MATCH_START'             :    5,\n                '@-'                            :    5,\n                '%LAST_MATCH_START'             :    5,\n                '%-'                            :    5,\n                '$LAST_REGEXP_CODE_RESULT'      :    5,\n                '$^R'                           :    5,\n                '${^RE_DEBUG_FLAGS}'            :    5,\n                '${^RE_TRIE_MAXBUF}'            :    5,\n                '$ARGV'                         :    5,\n                '@ARGV'                         :    5,\n                'ARGV'                          :    5,\n                'ARGVOUT'                       :    5,\n                '$OUTPUT_FIELD_SEPARATOR'       :    5,\n                '$OFS'                          :    5,\n                '$,'                            :    5,\n                '$INPUT_LINE_NUMBER'            :    5,\n                '$NR'                           :    5,\n                '$.'                            :    5,\n                '$INPUT_RECORD_SEPARATOR'       :    5,\n                '$RS'                           :    5,\n                '$/'                            :    5,\n                '$OUTPUT_RECORD_SEPARATOR'      :    5,\n                '$ORS'                          :    5,\n                '$\\\\'                           :    5,\n                '$OUTPUT_AUTOFLUSH'             :    5,\n                '$|'                            :    5,\n                '$ACCUMULATOR'                  :    5,\n                '$^A'                           :    5,\n                '$FORMAT_FORMFEED'              :    5,\n                '$^L'                           :    5,\n                '$FORMAT_PAGE_NUMBER'           :    5,\n                '$%'                            :    5,\n                '$FORMAT_LINES_LEFT'            :    5,\n                '$-'                            :    5,\n                '$FORMAT_LINE_BREAK_CHARACTERS' :    5,\n                '$:'                            :    5,\n                '$FORMAT_LINES_PER_PAGE'        :    5,\n                '$='                            :    5,\n                '$FORMAT_TOP_NAME'              :    5,\n                '$^'                            :    5,\n                '$FORMAT_NAME'                  :    5,\n                '$~'                            :    5,\n                '${^CHILD_ERROR_NATIVE}'        :    5,\n                '$EXTENDED_OS_ERROR'            :    5,\n                '$^E'                           :    5,\n                '$EXCEPTIONS_BEING_CAUGHT'      :    5,\n                '$^S'                           :    5,\n                '$WARNING'                      :    5,\n                '$^W'                           :    5,\n                '${^WARNING_BITS}'              :    5,\n                '$OS_ERROR'                     :    5,\n                '$ERRNO'                        :    5,\n                '$!'                            :    5,\n                '%OS_ERROR'                     :    5,\n                '%ERRNO'                        :    5,\n                '%!'                            :    5,\n                '$CHILD_ERROR'                  :    5,\n                '$?'                            :    5,\n                '$EVAL_ERROR'                   :    5,\n                '$@'                            :    5,\n                '$OFMT'                         :    5,\n                '$#'                            :    5,\n                '$*'                            :    5,\n                '$ARRAY_BASE'                   :    5,\n                '$['                            :    5,\n                '$OLD_PERL_VERSION'             :    5,\n                '$]'                            :    5,\n                                                //      PERL blocks\n                'if'                            :[1,1],\n                elsif                           :[1,1],\n                'else'                          :[1,1],\n                'while'                         :[1,1],\n                unless                          :[1,1],\n                'for'                           :[1,1],\n                foreach                         :[1,1],\n                                                //      PERL functions\n                'abs'                           :1,     // - absolute value function\n                accept                          :1,     // - accept an incoming socket connect\n                alarm                           :1,     // - schedule a SIGALRM\n                'atan2'                         :1,     // - arctangent of Y/X in the range -PI to PI\n                bind                            :1,     // - binds an address to a socket\n                binmode                         :1,     // - prepare binary files for I/O\n                bless                           :1,     // - create an object\n                bootstrap                       :1,     //\n                'break'                         :1,     // - break out of a \"given\" block\n                caller                          :1,     // - get context of the current subroutine call\n                chdir                           :1,     // - change your current working directory\n                chmod                           :1,     // - changes the permissions on a list of files\n                chomp                           :1,     // - remove a trailing record separator from a string\n                chop                            :1,     // - remove the last character from a string\n                chown                           :1,     // - change the ownership on a list of files\n                chr                             :1,     // - get character this number represents\n                chroot                          :1,     // - make directory new root for path lookups\n                close                           :1,     // - close file (or pipe or socket) handle\n                closedir                        :1,     // - close directory handle\n                connect                         :1,     // - connect to a remote socket\n                'continue'                      :[1,1], // - optional trailing block in a while or foreach\n                'cos'                           :1,     // - cosine function\n                crypt                           :1,     // - one-way passwd-style encryption\n                dbmclose                        :1,     // - breaks binding on a tied dbm file\n                dbmopen                         :1,     // - create binding on a tied dbm file\n                'default'                       :1,     //\n                defined                         :1,     // - test whether a value, variable, or function is defined\n                'delete'                        :1,     // - deletes a value from a hash\n                die                             :1,     // - raise an exception or bail out\n                'do'                            :1,     // - turn a BLOCK into a TERM\n                dump                            :1,     // - create an immediate core dump\n                each                            :1,     // - retrieve the next key/value pair from a hash\n                endgrent                        :1,     // - be done using group file\n                endhostent                      :1,     // - be done using hosts file\n                endnetent                       :1,     // - be done using networks file\n                endprotoent                     :1,     // - be done using protocols file\n                endpwent                        :1,     // - be done using passwd file\n                endservent                      :1,     // - be done using services file\n                eof                             :1,     // - test a filehandle for its end\n                'eval'                          :1,     // - catch exceptions or compile and run code\n                'exec'                          :1,     // - abandon this program to run another\n                exists                          :1,     // - test whether a hash key is present\n                exit                            :1,     // - terminate this program\n                'exp'                           :1,     // - raise I to a power\n                fcntl                           :1,     // - file control system call\n                fileno                          :1,     // - return file descriptor from filehandle\n                flock                           :1,     // - lock an entire file with an advisory lock\n                fork                            :1,     // - create a new process just like this one\n                format                          :1,     // - declare a picture format with use by the write() function\n                formline                        :1,     // - internal function used for formats\n                getc                            :1,     // - get the next character from the filehandle\n                getgrent                        :1,     // - get next group record\n                getgrgid                        :1,     // - get group record given group user ID\n                getgrnam                        :1,     // - get group record given group name\n                gethostbyaddr                   :1,     // - get host record given its address\n                gethostbyname                   :1,     // - get host record given name\n                gethostent                      :1,     // - get next hosts record\n                getlogin                        :1,     // - return who logged in at this tty\n                getnetbyaddr                    :1,     // - get network record given its address\n                getnetbyname                    :1,     // - get networks record given name\n                getnetent                       :1,     // - get next networks record\n                getpeername                     :1,     // - find the other end of a socket connection\n                getpgrp                         :1,     // - get process group\n                getppid                         :1,     // - get parent process ID\n                getpriority                     :1,     // - get current nice value\n                getprotobyname                  :1,     // - get protocol record given name\n                getprotobynumber                :1,     // - get protocol record numeric protocol\n                getprotoent                     :1,     // - get next protocols record\n                getpwent                        :1,     // - get next passwd record\n                getpwnam                        :1,     // - get passwd record given user login name\n                getpwuid                        :1,     // - get passwd record given user ID\n                getservbyname                   :1,     // - get services record given its name\n                getservbyport                   :1,     // - get services record given numeric port\n                getservent                      :1,     // - get next services record\n                getsockname                     :1,     // - retrieve the sockaddr for a given socket\n                getsockopt                      :1,     // - get socket options on a given socket\n                given                           :1,     //\n                glob                            :1,     // - expand filenames using wildcards\n                gmtime                          :1,     // - convert UNIX time into record or string using Greenwich time\n                'goto'                          :1,     // - create spaghetti code\n                grep                            :1,     // - locate elements in a list test true against a given criterion\n                hex                             :1,     // - convert a string to a hexadecimal number\n                'import'                        :1,     // - patch a module's namespace into your own\n                index                           :1,     // - find a substring within a string\n                'int'                           :1,     // - get the integer portion of a number\n                ioctl                           :1,     // - system-dependent device control system call\n                'join'                          :1,     // - join a list into a string using a separator\n                keys                            :1,     // - retrieve list of indices from a hash\n                kill                            :1,     // - send a signal to a process or process group\n                last                            :1,     // - exit a block prematurely\n                lc                              :1,     // - return lower-case version of a string\n                lcfirst                         :1,     // - return a string with just the next letter in lower case\n                length                          :1,     // - return the number of bytes in a string\n                'link'                          :1,     // - create a hard link in the filesytem\n                listen                          :1,     // - register your socket as a server\n                local                           : 2,    // - create a temporary value for a global variable (dynamic scoping)\n                localtime                       :1,     // - convert UNIX time into record or string using local time\n                lock                            :1,     // - get a thread lock on a variable, subroutine, or method\n                'log'                           :1,     // - retrieve the natural logarithm for a number\n                lstat                           :1,     // - stat a symbolic link\n                m                               :null,  // - match a string with a regular expression pattern\n                map                             :1,     // - apply a change to a list to get back a new list with the changes\n                mkdir                           :1,     // - create a directory\n                msgctl                          :1,     // - SysV IPC message control operations\n                msgget                          :1,     // - get SysV IPC message queue\n                msgrcv                          :1,     // - receive a SysV IPC message from a message queue\n                msgsnd                          :1,     // - send a SysV IPC message to a message queue\n                my                              : 2,    // - declare and assign a local variable (lexical scoping)\n                'new'                           :1,     //\n                next                            :1,     // - iterate a block prematurely\n                no                              :1,     // - unimport some module symbols or semantics at compile time\n                oct                             :1,     // - convert a string to an octal number\n                open                            :1,     // - open a file, pipe, or descriptor\n                opendir                         :1,     // - open a directory\n                ord                             :1,     // - find a character's numeric representation\n                our                             : 2,    // - declare and assign a package variable (lexical scoping)\n                pack                            :1,     // - convert a list into a binary representation\n                'package'                       :1,     // - declare a separate global namespace\n                pipe                            :1,     // - open a pair of connected filehandles\n                pop                             :1,     // - remove the last element from an array and return it\n                pos                             :1,     // - find or set the offset for the last/next m//g search\n                print                           :1,     // - output a list to a filehandle\n                printf                          :1,     // - output a formatted list to a filehandle\n                prototype                       :1,     // - get the prototype (if any) of a subroutine\n                push                            :1,     // - append one or more elements to an array\n                q                               :null,  // - singly quote a string\n                qq                              :null,  // - doubly quote a string\n                qr                              :null,  // - Compile pattern\n                quotemeta                       :null,  // - quote regular expression magic characters\n                qw                              :null,  // - quote a list of words\n                qx                              :null,  // - backquote quote a string\n                rand                            :1,     // - retrieve the next pseudorandom number\n                read                            :1,     // - fixed-length buffered input from a filehandle\n                readdir                         :1,     // - get a directory from a directory handle\n                readline                        :1,     // - fetch a record from a file\n                readlink                        :1,     // - determine where a symbolic link is pointing\n                readpipe                        :1,     // - execute a system command and collect standard output\n                recv                            :1,     // - receive a message over a Socket\n                redo                            :1,     // - start this loop iteration over again\n                ref                             :1,     // - find out the type of thing being referenced\n                rename                          :1,     // - change a filename\n                require                         :1,     // - load in external functions from a library at runtime\n                reset                           :1,     // - clear all variables of a given name\n                'return'                        :1,     // - get out of a function early\n                reverse                         :1,     // - flip a string or a list\n                rewinddir                       :1,     // - reset directory handle\n                rindex                          :1,     // - right-to-left substring search\n                rmdir                           :1,     // - remove a directory\n                s                               :null,  // - replace a pattern with a string\n                say                             :1,     // - print with newline\n                scalar                          :1,     // - force a scalar context\n                seek                            :1,     // - reposition file pointer for random-access I/O\n                seekdir                         :1,     // - reposition directory pointer\n                select                          :1,     // - reset default output or do I/O multiplexing\n                semctl                          :1,     // - SysV semaphore control operations\n                semget                          :1,     // - get set of SysV semaphores\n                semop                           :1,     // - SysV semaphore operations\n                send                            :1,     // - send a message over a socket\n                setgrent                        :1,     // - prepare group file for use\n                sethostent                      :1,     // - prepare hosts file for use\n                setnetent                       :1,     // - prepare networks file for use\n                setpgrp                         :1,     // - set the process group of a process\n                setpriority                     :1,     // - set a process's nice value\n                setprotoent                     :1,     // - prepare protocols file for use\n                setpwent                        :1,     // - prepare passwd file for use\n                setservent                      :1,     // - prepare services file for use\n                setsockopt                      :1,     // - set some socket options\n                shift                           :1,     // - remove the first element of an array, and return it\n                shmctl                          :1,     // - SysV shared memory operations\n                shmget                          :1,     // - get SysV shared memory segment identifier\n                shmread                         :1,     // - read SysV shared memory\n                shmwrite                        :1,     // - write SysV shared memory\n                shutdown                        :1,     // - close down just half of a socket connection\n                'sin'                           :1,     // - return the sine of a number\n                sleep                           :1,     // - block for some number of seconds\n                socket                          :1,     // - create a socket\n                socketpair                      :1,     // - create a pair of sockets\n                'sort'                          :1,     // - sort a list of values\n                splice                          :1,     // - add or remove elements anywhere in an array\n                'split'                         :1,     // - split up a string using a regexp delimiter\n                sprintf                         :1,     // - formatted print into a string\n                'sqrt'                          :1,     // - square root function\n                srand                           :1,     // - seed the random number generator\n                stat                            :1,     // - get a file's status information\n                state                           :1,     // - declare and assign a state variable (persistent lexical scoping)\n                study                           :1,     // - optimize input data for repeated searches\n                'sub'                           :1,     // - declare a subroutine, possibly anonymously\n                'substr'                        :1,     // - get or alter a portion of a stirng\n                symlink                         :1,     // - create a symbolic link to a file\n                syscall                         :1,     // - execute an arbitrary system call\n                sysopen                         :1,     // - open a file, pipe, or descriptor\n                sysread                         :1,     // - fixed-length unbuffered input from a filehandle\n                sysseek                         :1,     // - position I/O pointer on handle used with sysread and syswrite\n                system                          :1,     // - run a separate program\n                syswrite                        :1,     // - fixed-length unbuffered output to a filehandle\n                tell                            :1,     // - get current seekpointer on a filehandle\n                telldir                         :1,     // - get current seekpointer on a directory handle\n                tie                             :1,     // - bind a variable to an object class\n                tied                            :1,     // - get a reference to the object underlying a tied variable\n                time                            :1,     // - return number of seconds since 1970\n                times                           :1,     // - return elapsed time for self and child processes\n                tr                              :null,  // - transliterate a string\n                truncate                        :1,     // - shorten a file\n                uc                              :1,     // - return upper-case version of a string\n                ucfirst                         :1,     // - return a string with just the next letter in upper case\n                umask                           :1,     // - set file creation mode mask\n                undef                           :1,     // - remove a variable or function definition\n                unlink                          :1,     // - remove one link to a file\n                unpack                          :1,     // - convert binary structure into normal perl variables\n                unshift                         :1,     // - prepend more elements to the beginning of a list\n                untie                           :1,     // - break a tie binding to a variable\n                use                             :1,     // - load in a module at compile time\n                utime                           :1,     // - set a file's last access and modify times\n                values                          :1,     // - return a list of the values in a hash\n                vec                             :1,     // - test or set particular bits in a string\n                wait                            :1,     // - wait for any child process to die\n                waitpid                         :1,     // - wait for a particular child process to die\n                wantarray                       :1,     // - get void vs scalar vs list context of current subroutine call\n                warn                            :1,     // - print debugging info\n                when                            :1,     //\n                write                           :1,     // - print a picture record\n                y                               :null}; // - transliterate a string\n\n        var RXstyle=\"string-2\";\n        var RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\n        function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n                state.chain=null;                               //                                                          12   3tail\n                state.style=null;\n                state.tail=null;\n                state.tokenize=function(stream,state){\n                        var e=false,c,i=0;\n                        while(c=stream.next()){\n                                if(c===chain[i]&&!e){\n                                        if(chain[++i]!==undefined){\n                                                state.chain=chain[i];\n                                                state.style=style;\n                                                state.tail=tail;}\n                                        else if(tail)\n                                                stream.eatWhile(tail);\n                                        state.tokenize=tokenPerl;\n                                        return style;}\n                                e=!e&&c==\"\\\\\";}\n                        return style;};\n                return state.tokenize(stream,state);}\n\n        function tokenSOMETHING(stream,state,string){\n                state.tokenize=function(stream,state){\n                        if(stream.string==string)\n                                state.tokenize=tokenPerl;\n                        stream.skipToEnd();\n                        return \"string\";};\n                return state.tokenize(stream,state);}\n\n        function tokenPerl(stream,state){\n                if(stream.eatSpace())\n                        return null;\n                if(state.chain)\n                        return tokenChain(stream,state,state.chain,state.style,state.tail);\n                if(stream.match(/^\\-?[\\d\\.]/,false))\n                        if(stream.match(/^(\\-?(\\d*\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F]+|0b[01]+|\\d+(e[+-]?\\d+)?)/))\n                                return 'number';\n                if(stream.match(/^<<(?=\\w)/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n                        stream.eatWhile(/\\w/);\n                        return tokenSOMETHING(stream,state,stream.current().substr(2));}\n                if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n                        return tokenSOMETHING(stream,state,'=cut');}\n                var ch=stream.next();\n                if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n                        if(prefix(stream, 3)==\"<<\"+ch){\n                                var p=stream.pos;\n                                stream.eatWhile(/\\w/);\n                                var n=stream.current().substr(1);\n                                if(n&&stream.eat(ch))\n                                        return tokenSOMETHING(stream,state,n);\n                                stream.pos=p;}\n                        return tokenChain(stream,state,[ch],\"string\");}\n                if(ch==\"q\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=look(stream, 0);\n                                if(c==\"x\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(c==\"q\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n                                else if(c==\"w\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"bracket\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"bracket\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"bracket\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"bracket\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n                                else if(c==\"r\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n                if(ch==\"m\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n                                        if(c==\"(\"){\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n                if(ch==\"s\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"y\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"t\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(\"r\");if(c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n                if(ch==\"`\"){\n                        return tokenChain(stream,state,[ch],\"variable-2\");}\n                if(ch==\"/\"){\n                        if(!/~\\s*$/.test(prefix(stream)))\n                                return \"operator\";\n                        else\n                                return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n                if(ch==\"$\"){\n                        var p=stream.pos;\n                        if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n                                return \"variable-2\";\n                        else\n                                stream.pos=p;}\n                if(/[$@%]/.test(ch)){\n                        var p=stream.pos;\n                        if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";}\n                        stream.pos=p;}\n                if(/[$@%&]/.test(ch)){\n                        if(stream.eatWhile(/[\\w$\\[\\]]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$\\[\\]]/)&&stream.eat(\"}\")){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";\n                                else\n                                        return \"variable\";}}\n                if(ch==\"#\"){\n                        if(look(stream, -2)!=\"$\"){\n                                stream.skipToEnd();\n                                return \"comment\";}}\n                if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n                        var p=stream.pos;\n                        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n                        if(PERL[stream.current()])\n                                return \"operator\";\n                        else\n                                stream.pos=p;}\n                if(ch==\"_\"){\n                        if(stream.pos==1){\n                                if(suffix(stream, 6)==\"_END__\"){\n                                        return tokenChain(stream,state,['\\0'],\"comment\");}\n                                else if(suffix(stream, 7)==\"_DATA__\"){\n                                        return tokenChain(stream,state,['\\0'],\"variable-2\");}\n                                else if(suffix(stream, 7)==\"_C__\"){\n                                        return tokenChain(stream,state,['\\0'],\"string\");}}}\n                if(/\\w/.test(ch)){\n                        var p=stream.pos;\n                        if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n                                return \"string\";\n                        else\n                                stream.pos=p;}\n                if(/[A-Z]/.test(ch)){\n                        var l=look(stream, -2);\n                        var p=stream.pos;\n                        stream.eatWhile(/[A-Z_]/);\n                        if(/[\\da-z]/.test(look(stream, 0))){\n                                stream.pos=p;}\n                        else{\n                                var c=PERL[stream.current()];\n                                if(!c)\n                                        return \"meta\";\n                                if(c[1])\n                                        c=c[0];\n                                if(l!=\":\"){\n                                        if(c==1)\n                                                return \"keyword\";\n                                        else if(c==2)\n                                                return \"def\";\n                                        else if(c==3)\n                                                return \"atom\";\n                                        else if(c==4)\n                                                return \"operator\";\n                                        else if(c==5)\n                                                return \"variable-2\";\n                                        else\n                                                return \"meta\";}\n                                else\n                                        return \"meta\";}}\n                if(/[a-zA-Z_]/.test(ch)){\n                        var l=look(stream, -2);\n                        stream.eatWhile(/\\w/);\n                        var c=PERL[stream.current()];\n                        if(!c)\n                                return \"meta\";\n                        if(c[1])\n                                c=c[0];\n                        if(l!=\":\"){\n                                if(c==1)\n                                        return \"keyword\";\n                                else if(c==2)\n                                        return \"def\";\n                                else if(c==3)\n                                        return \"atom\";\n                                else if(c==4)\n                                        return \"operator\";\n                                else if(c==5)\n                                        return \"variable-2\";\n                                else\n                                        return \"meta\";}\n                        else\n                                return \"meta\";}\n                return null;}\n\n        return {\n            startState: function() {\n                return {\n                    tokenize: tokenPerl,\n                    chain: null,\n                    style: null,\n                    tail: null\n                };\n            },\n            token: function(stream, state) {\n                return (state.tokenize || tokenPerl)(stream, state);\n            },\n            lineComment: '#'\n        };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"perl\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/x-perl\", \"perl\");\n\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n});\n"]},"metadata":{},"sourceType":"script"}