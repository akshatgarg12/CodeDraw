{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"haskell\");\n    return {\n      startState: function () {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\")) return \"meta\";\n        }\n\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState);\n        } else {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      },\n      innerMode: function (state) {\n        return state.inCode ? {\n          state: state.baseState,\n          mode: baseMode\n        } : null;\n      }\n    };\n  }, \"haskell\");\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/haskell-literate/haskell-literate.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","baseMode","getMode","base","startState","inCode","baseState","token","stream","state","sol","eat","skipToEnd","innerMode","mode","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAAUA,GAAV,EAAe;AACd,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,EAAkCA,OAAO,CAAC,oBAAD,CAAzC,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,EAAyB,oBAAzB,CAAD,EAAiDJ,GAAjD,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAAUA,UAAV,EAAsB;AACvB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,kBAAtB,EAA0C,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACxE,QAAIC,QAAQ,GAAGJ,UAAU,CAACK,OAAX,CAAmBH,MAAnB,EAA4BC,YAAY,IAAIA,YAAY,CAACG,IAA9B,IAAuC,SAAlE,CAAf;AAEA,WAAO;AACLC,MAAAA,UAAU,EAAE,YAAY;AACtB,eAAO;AACLC,UAAAA,MAAM,EAAE,KADH;AAELC,UAAAA,SAAS,EAAET,UAAU,CAACO,UAAX,CAAsBH,QAAtB;AAFN,SAAP;AAID,OANI;AAOLM,MAAAA,KAAK,EAAE,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC9B,YAAID,MAAM,CAACE,GAAP,EAAJ,EAAkB;AAChB,cAAID,KAAK,CAACJ,MAAN,GAAeG,MAAM,CAACG,GAAP,CAAW,GAAX,CAAnB,EACE,OAAO,MAAP;AACH;;AACD,YAAIF,KAAK,CAACJ,MAAV,EAAkB;AAChB,iBAAOJ,QAAQ,CAACM,KAAT,CAAeC,MAAf,EAAuBC,KAAK,CAACH,SAA7B,CAAP;AACD,SAFD,MAEO;AACLE,UAAAA,MAAM,CAACI,SAAP;AACA,iBAAO,SAAP;AACD;AACF,OAlBI;AAmBLC,MAAAA,SAAS,EAAE,UAAUJ,KAAV,EAAiB;AAC1B,eAAOA,KAAK,CAACJ,MAAN,GAAe;AAACI,UAAAA,KAAK,EAAEA,KAAK,CAACH,SAAd;AAAyBQ,UAAAA,IAAI,EAAEb;AAA/B,SAAf,GAA0D,IAAjE;AACD;AArBI,KAAP;AAuBD,GA1BD,EA0BG,SA1BH;AA4BAJ,EAAAA,UAAU,CAACkB,UAAX,CAAsB,yBAAtB,EAAiD,kBAAjD;AACD,CAvCD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n  \"use strict\"\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, (parserConfig && parserConfig.base) || \"haskell\")\n\n    return {\n      startState: function () {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        }\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\"))\n            return \"meta\"\n        }\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState)\n        } else {\n          stream.skipToEnd()\n          return \"comment\"\n        }\n      },\n      innerMode: function (state) {\n        return state.inCode ? {state: state.baseState, mode: baseMode} : null\n      }\n    }\n  }, \"haskell\")\n\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\")\n});\n"]},"metadata":{},"sourceType":"script"}