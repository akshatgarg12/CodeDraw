{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Swift mode created by Michael Kaminsky https://github.com/mkaminsky11\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordSet(words) {\n    var set = {};\n\n    for (var i = 0; i < words.length; i++) set[words[i]] = true;\n\n    return set;\n  }\n\n  var keywords = wordSet([\"_\", \"var\", \"let\", \"class\", \"enum\", \"extension\", \"import\", \"protocol\", \"struct\", \"func\", \"typealias\", \"associatedtype\", \"open\", \"public\", \"internal\", \"fileprivate\", \"private\", \"deinit\", \"init\", \"new\", \"override\", \"self\", \"subscript\", \"super\", \"convenience\", \"dynamic\", \"final\", \"indirect\", \"lazy\", \"required\", \"static\", \"unowned\", \"unowned(safe)\", \"unowned(unsafe)\", \"weak\", \"as\", \"is\", \"break\", \"case\", \"continue\", \"default\", \"else\", \"fallthrough\", \"for\", \"guard\", \"if\", \"in\", \"repeat\", \"switch\", \"where\", \"while\", \"defer\", \"return\", \"inout\", \"mutating\", \"nonmutating\", \"catch\", \"do\", \"rethrows\", \"throw\", \"throws\", \"try\", \"didSet\", \"get\", \"set\", \"willSet\", \"assignment\", \"associativity\", \"infix\", \"left\", \"none\", \"operator\", \"postfix\", \"precedence\", \"precedencegroup\", \"prefix\", \"right\", \"Any\", \"AnyObject\", \"Type\", \"dynamicType\", \"Self\", \"Protocol\", \"__COLUMN__\", \"__FILE__\", \"__FUNCTION__\", \"__LINE__\"]);\n  var definingKeywords = wordSet([\"var\", \"let\", \"class\", \"enum\", \"extension\", \"import\", \"protocol\", \"struct\", \"func\", \"typealias\", \"associatedtype\", \"for\"]);\n  var atoms = wordSet([\"true\", \"false\", \"nil\", \"self\", \"super\", \"_\"]);\n  var types = wordSet([\"Array\", \"Bool\", \"Character\", \"Dictionary\", \"Double\", \"Float\", \"Int\", \"Int8\", \"Int16\", \"Int32\", \"Int64\", \"Never\", \"Optional\", \"Set\", \"String\", \"UInt8\", \"UInt16\", \"UInt32\", \"UInt64\", \"Void\"]);\n  var operators = \"+-/*%=|&<>~^?!\";\n  var punc = \":;,.(){}[]\";\n  var binary = /^\\-?0b[01][01_]*/;\n  var octal = /^\\-?0o[0-7][0-7_]*/;\n  var hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/;\n  var decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/;\n  var identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/;\n  var property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/;\n  var instruction = /^\\#[A-Za-z]+/;\n  var attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/; //var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\n  function tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation();\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek();\n\n    if (ch == \"/\") {\n      if (stream.match(\"//\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(\"/*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n    }\n\n    if (stream.match(instruction)) return \"builtin\";\n    if (stream.match(attribute)) return \"attribute\";\n    if (stream.match(binary)) return \"number\";\n    if (stream.match(octal)) return \"number\";\n    if (stream.match(hexadecimal)) return \"number\";\n    if (stream.match(decimal)) return \"number\";\n    if (stream.match(property)) return \"property\";\n\n    if (operators.indexOf(ch) > -1) {\n      stream.next();\n      return \"operator\";\n    }\n\n    if (punc.indexOf(ch) > -1) {\n      stream.next();\n      stream.match(\"..\");\n      return \"punctuation\";\n    }\n\n    var stringMatch;\n\n    if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n      var tokenize = tokenString.bind(null, stringMatch[0]);\n      state.tokenize.push(tokenize);\n      return tokenize(stream, state);\n    }\n\n    if (stream.match(identifier)) {\n      var ident = stream.current();\n      if (types.hasOwnProperty(ident)) return \"variable-2\";\n      if (atoms.hasOwnProperty(ident)) return \"atom\";\n\n      if (keywords.hasOwnProperty(ident)) {\n        if (definingKeywords.hasOwnProperty(ident)) state.prev = \"define\";\n        return \"keyword\";\n      }\n\n      if (prev == \"define\") return \"def\";\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenUntilClosingParen() {\n    var depth = 0;\n    return function (stream, state, prev) {\n      var inner = tokenBase(stream, state, prev);\n\n      if (inner == \"punctuation\") {\n        if (stream.current() == \"(\") ++depth;else if (stream.current() == \")\") {\n          if (depth == 0) {\n            stream.backUp(1);\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else --depth;\n        }\n      }\n\n      return inner;\n    };\n  }\n\n  function tokenString(openQuote, stream, state) {\n    var singleLine = openQuote.length == 1;\n    var ch,\n        escaped = false;\n\n    while (ch = stream.peek()) {\n      if (escaped) {\n        stream.next();\n\n        if (ch == \"(\") {\n          state.tokenize.push(tokenUntilClosingParen());\n          return \"string\";\n        }\n\n        escaped = false;\n      } else if (stream.match(openQuote)) {\n        state.tokenize.pop();\n        return \"string\";\n      } else {\n        stream.next();\n        escaped = ch == \"\\\\\";\n      }\n    }\n\n    if (singleLine) {\n      state.tokenize.pop();\n    }\n\n    return \"string\";\n  }\n\n  function tokenComment(stream, state) {\n    var ch;\n\n    while (true) {\n      stream.match(/^[^/*]+/, true);\n      ch = stream.next();\n      if (!ch) break;\n\n      if (ch === \"/\" && stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n      } else if (ch === \"*\" && stream.eat(\"/\")) {\n        state.tokenize.pop();\n      }\n    }\n\n    return \"comment\";\n  }\n\n  function Context(prev, align, indented) {\n    this.prev = prev;\n    this.align = align;\n    this.indented = indented;\n  }\n\n  function pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*])/, false) ? null : stream.column() + 1;\n    state.context = new Context(state.context, align, state.indented);\n  }\n\n  function popContext(state) {\n    if (state.context) {\n      state.indented = state.context.indented;\n      state.context = state.context.prev;\n    }\n  }\n\n  CodeMirror.defineMode(\"swift\", function (config) {\n    return {\n      startState: function () {\n        return {\n          prev: null,\n          context: null,\n          indented: 0,\n          tokenize: []\n        };\n      },\n      token: function (stream, state) {\n        var prev = state.prev;\n        state.prev = null;\n        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase;\n        var style = tokenize(stream, state, prev);\n        if (!style || style == \"comment\") state.prev = prev;else if (!state.prev) state.prev = style;\n\n        if (style == \"punctuation\") {\n          var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current());\n          if (bracket) (bracket[1] ? popContext : pushContext)(state, stream);\n        }\n\n        return style;\n      },\n      indent: function (state, textAfter) {\n        var cx = state.context;\n        if (!cx) return 0;\n        var closing = /^[\\]\\}\\)]/.test(textAfter);\n        if (cx.align != null) return cx.align - (closing ? 1 : 0);\n        return cx.indented + (closing ? 0 : config.indentUnit);\n      },\n      electricInput: /^\\s*[\\)\\}\\]]$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-swift\", \"swift\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/swift/swift.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordSet","words","set","i","length","keywords","definingKeywords","atoms","types","operators","punc","binary","octal","hexadecimal","decimal","identifier","property","instruction","attribute","tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","ch","peek","match","skipToEnd","tokenize","push","tokenComment","indexOf","next","stringMatch","tokenString","bind","ident","current","hasOwnProperty","tokenUntilClosingParen","depth","inner","backUp","pop","openQuote","singleLine","escaped","eat","Context","align","pushContext","column","context","popContext","defineMode","config","startState","token","style","bracket","exec","indent","textAfter","cx","closing","test","indentUnit","electricInput","lineComment","blockCommentStart","blockCommentEnd","fold","closeBrackets","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Swift mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  function wordSet(words) {\n    var set = {}\n    for (var i = 0; i < words.length; i++) set[words[i]] = true\n    return set\n  }\n\n  var keywords = wordSet([\"_\",\"var\",\"let\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                          \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                          \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                          \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                          \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                          \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                          \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\n  var definingKeywords = wordSet([\"var\",\"let\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\n  var atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\n  var types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                       \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\n  var operators = \"+-/*%=|&<>~^?!\"\n  var punc = \":;,.(){}[]\"\n  var binary = /^\\-?0b[01][01_]*/\n  var octal = /^\\-?0o[0-7][0-7_]*/\n  var hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\n  var decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\n  var identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\n  var property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  var instruction = /^\\#[A-Za-z]+/\n  var attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  //var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\n  function tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation()\n    if (stream.eatSpace()) return null\n\n    var ch = stream.peek()\n    if (ch == \"/\") {\n      if (stream.match(\"//\")) {\n        stream.skipToEnd()\n        return \"comment\"\n      }\n      if (stream.match(\"/*\")) {\n        state.tokenize.push(tokenComment)\n        return tokenComment(stream, state)\n      }\n    }\n    if (stream.match(instruction)) return \"builtin\"\n    if (stream.match(attribute)) return \"attribute\"\n    if (stream.match(binary)) return \"number\"\n    if (stream.match(octal)) return \"number\"\n    if (stream.match(hexadecimal)) return \"number\"\n    if (stream.match(decimal)) return \"number\"\n    if (stream.match(property)) return \"property\"\n    if (operators.indexOf(ch) > -1) {\n      stream.next()\n      return \"operator\"\n    }\n    if (punc.indexOf(ch) > -1) {\n      stream.next()\n      stream.match(\"..\")\n      return \"punctuation\"\n    }\n    var stringMatch\n    if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n      var tokenize = tokenString.bind(null, stringMatch[0])\n      state.tokenize.push(tokenize)\n      return tokenize(stream, state)\n    }\n\n    if (stream.match(identifier)) {\n      var ident = stream.current()\n      if (types.hasOwnProperty(ident)) return \"variable-2\"\n      if (atoms.hasOwnProperty(ident)) return \"atom\"\n      if (keywords.hasOwnProperty(ident)) {\n        if (definingKeywords.hasOwnProperty(ident))\n          state.prev = \"define\"\n        return \"keyword\"\n      }\n      if (prev == \"define\") return \"def\"\n      return \"variable\"\n    }\n\n    stream.next()\n    return null\n  }\n\n  function tokenUntilClosingParen() {\n    var depth = 0\n    return function(stream, state, prev) {\n      var inner = tokenBase(stream, state, prev)\n      if (inner == \"punctuation\") {\n        if (stream.current() == \"(\") ++depth\n        else if (stream.current() == \")\") {\n          if (depth == 0) {\n            stream.backUp(1)\n            state.tokenize.pop()\n            return state.tokenize[state.tokenize.length - 1](stream, state)\n          }\n          else --depth\n        }\n      }\n      return inner\n    }\n  }\n\n  function tokenString(openQuote, stream, state) {\n    var singleLine = openQuote.length == 1\n    var ch, escaped = false\n    while (ch = stream.peek()) {\n      if (escaped) {\n        stream.next()\n        if (ch == \"(\") {\n          state.tokenize.push(tokenUntilClosingParen())\n          return \"string\"\n        }\n        escaped = false\n      } else if (stream.match(openQuote)) {\n        state.tokenize.pop()\n        return \"string\"\n      } else {\n        stream.next()\n        escaped = ch == \"\\\\\"\n      }\n    }\n    if (singleLine) {\n      state.tokenize.pop()\n    }\n    return \"string\"\n  }\n\n  function tokenComment(stream, state) {\n    var ch\n    while (true) {\n      stream.match(/^[^/*]+/, true)\n      ch = stream.next()\n      if (!ch) break\n      if (ch === \"/\" && stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment)\n      } else if (ch === \"*\" && stream.eat(\"/\")) {\n        state.tokenize.pop()\n      }\n    }\n    return \"comment\"\n  }\n\n  function Context(prev, align, indented) {\n    this.prev = prev\n    this.align = align\n    this.indented = indented\n  }\n\n  function pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*])/, false) ? null : stream.column() + 1\n    state.context = new Context(state.context, align, state.indented)\n  }\n\n  function popContext(state) {\n    if (state.context) {\n      state.indented = state.context.indented\n      state.context = state.context.prev\n    }\n  }\n\n  CodeMirror.defineMode(\"swift\", function(config) {\n    return {\n      startState: function() {\n        return {\n          prev: null,\n          context: null,\n          indented: 0,\n          tokenize: []\n        }\n      },\n\n      token: function(stream, state) {\n        var prev = state.prev\n        state.prev = null\n        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n        var style = tokenize(stream, state, prev)\n        if (!style || style == \"comment\") state.prev = prev\n        else if (!state.prev) state.prev = style\n\n        if (style == \"punctuation\") {\n          var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n          if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n        }\n\n        return style\n      },\n\n      indent: function(state, textAfter) {\n        var cx = state.context\n        if (!cx) return 0\n        var closing = /^[\\]\\}\\)]/.test(textAfter)\n        if (cx.align != null) return cx.align - (closing ? 1 : 0)\n        return cx.indented + (closing ? 0 : config.indentUnit)\n      },\n\n      electricInput: /^\\s*[\\)\\}\\]]$/,\n\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    }\n  })\n\n  CodeMirror.defineMIME(\"text/x-swift\",\"swift\")\n});\n"]},"metadata":{},"sourceType":"script"}