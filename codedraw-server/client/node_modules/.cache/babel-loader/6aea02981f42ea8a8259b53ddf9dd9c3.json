{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var rfc2822 = [\"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\", \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\", \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"];\n  var rfc2822NoEmail = [\"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"];\n  CodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n  var whitespace = /^[ \\t]/;\n  var separator = /^From /; // See RFC 4155\n\n  var rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\n  var rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\n  var header = /^[^:]+:/; // Optional fields defined in RFC 2822\n\n  var email = /^[^ ]+@[^ ]+/;\n  var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\n  var bracketedEmail = /^<.*?>/;\n  var untilBracketedEmail = /^.*?(?=<.*>)/;\n\n  function styleForHeader(header) {\n    if (header === \"Subject\") return \"header\";\n    return \"string\";\n  }\n\n  function readToken(stream, state) {\n    if (stream.sol()) {\n      // From last line\n      state.inSeparator = false;\n\n      if (state.inHeader && stream.match(whitespace)) {\n        // Header folding\n        return null;\n      } else {\n        state.inHeader = false;\n        state.header = null;\n      }\n\n      if (stream.match(separator)) {\n        state.inHeaders = true;\n        state.inSeparator = true;\n        return \"atom\";\n      }\n\n      var match;\n      var emailPermitted = false;\n\n      if ((match = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n        state.inHeaders = true;\n        state.inHeader = true;\n        state.emailPermitted = emailPermitted;\n        state.header = match[1];\n        return \"atom\";\n      } // Use vim's heuristics: recognize custom headers only if the line is in a\n      // block of legitimate headers.\n\n\n      if (state.inHeaders && (match = stream.match(header))) {\n        state.inHeader = true;\n        state.emailPermitted = true;\n        state.header = match[1];\n        return \"atom\";\n      }\n\n      state.inHeaders = false;\n      stream.skipToEnd();\n      return null;\n    }\n\n    if (state.inSeparator) {\n      if (stream.match(email)) return \"link\";\n      if (stream.match(untilEmail)) return \"atom\";\n      stream.skipToEnd();\n      return \"atom\";\n    }\n\n    if (state.inHeader) {\n      var style = styleForHeader(state.header);\n\n      if (state.emailPermitted) {\n        if (stream.match(bracketedEmail)) return style + \" link\";\n        if (stream.match(untilBracketedEmail)) return style;\n      }\n\n      stream.skipToEnd();\n      return style;\n    }\n\n    stream.skipToEnd();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"mbox\", function () {\n    return {\n      startState: function startState() {\n        return {\n          // Is in a mbox separator\n          inSeparator: false,\n          // Is in a mail header\n          inHeader: false,\n          // If bracketed email is permitted. Only applicable when inHeader\n          emailPermitted: false,\n          // Name of current header\n          header: null,\n          // Is in a region of mail headers\n          inHeaders: false\n        };\n      },\n      token: readToken,\n      blankLine: function blankLine(state) {\n        state.inHeaders = state.inSeparator = state.inHeader = false;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/mbox/mbox.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","rfc2822","rfc2822NoEmail","registerHelper","concat","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","styleForHeader","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","defineMode","startState","token","blankLine","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nCodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nCodeMirror.defineMode(\"mbox\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in a mbox separator\n        inSeparator: false,\n        // Is in a mail header\n        inHeader: false,\n        // If bracketed email is permitted. Only applicable when inHeader\n        emailPermitted: false,\n        // Name of current header\n        header: null,\n        // Is in a region of mail headers\n        inHeaders: false\n      };\n    },\n    token: readToken,\n    blankLine: function(state) {\n      state.inHeaders = state.inSeparator = state.inHeader = false;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});\n"]},"metadata":{},"sourceType":"script"}