{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function Context(indented, column, type, info, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.info = info;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type, info) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\" && type != \"statement\") indent = state.context.indented;\n    return state.context = new Context(indent, col, type, info, null, state.context);\n  }\n\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  function typeBefore(stream, state, pos) {\n    if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n    if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n    if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n  }\n\n  function isTopScope(context) {\n    for (;;) {\n      if (!context || context.type == \"top\") return true;\n      if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n      context = context.prev;\n    }\n  }\n\n  CodeMirror.defineMode(\"clike\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        dontAlignCalls = parserConfig.dontAlignCalls,\n        keywords = parserConfig.keywords || {},\n        types = parserConfig.types || {},\n        builtin = parserConfig.builtin || {},\n        blockKeywords = parserConfig.blockKeywords || {},\n        defKeywords = parserConfig.defKeywords || {},\n        atoms = parserConfig.atoms || {},\n        hooks = parserConfig.hooks || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false,\n        indentSwitch = parserConfig.indentSwitch !== false,\n        namespaceSeparator = parserConfig.namespaceSeparator,\n        isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n        numberStart = parserConfig.numberStart || /[\\d\\.]/,\n        number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n        isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n        isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n        // An optional function that takes a {string} token and returns true if it\n    // should be treated as a builtin.\n    isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n    var curPunc, isDefKeyword;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (isPunctuationChar.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (numberStart.test(ch)) {\n        stream.backUp(1);\n        if (stream.match(number)) return \"number\";\n        stream.next();\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n\n        return \"operator\";\n      }\n\n      stream.eatWhile(isIdentifierChar);\n      if (namespaceSeparator) while (stream.match(namespaceSeparator)) {\n        stream.eatWhile(isIdentifierChar);\n      }\n      var cur = stream.current();\n\n      if (contains(keywords, cur)) {\n        if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n        if (contains(defKeywords, cur)) isDefKeyword = true;\n        return \"keyword\";\n      }\n\n      if (contains(types, cur)) return \"type\";\n\n      if (contains(builtin, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {\n        if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n        return \"builtin\";\n      }\n\n      if (contains(atoms, cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function maybeEOL(stream, state) {\n      if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context)) state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n          indented: 0,\n          startOfLine: true,\n          prevToken: null\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) {\n          maybeEOL(stream, state);\n          return null;\n        }\n\n        curPunc = isDefKeyword = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if (curPunc == \";\" || curPunc == \":\" || curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)) while (state.context.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\" || ctx.type == \"statement\" && curPunc == \"newstatement\")) {\n          pushContext(state, stream.column(), \"statement\", stream.current());\n        }\n        if (style == \"variable\" && (state.prevToken == \"def\" || parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\\s*\\(/, false))) style = \"def\";\n\n        if (hooks.token) {\n          var result = hooks.token(stream, state, style);\n          if (result !== undefined) style = result;\n        }\n\n        if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n        state.startOfLine = false;\n        state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n        maybeEOL(stream, state);\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        if (parserConfig.dontIndentStatements) while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info)) {\n          ctx = ctx.prev;\n        }\n\n        if (hooks.indent) {\n          var hook = hooks.indent(state, ctx, textAfter, indentUnit);\n          if (typeof hook == \"number\") return hook;\n        }\n\n        var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n\n        if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n          while (ctx.type != \"top\" && ctx.type != \"}\") {\n            ctx = ctx.prev;\n          }\n\n          return ctx.indented;\n        }\n\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n        if (ctx.align && (!dontAlignCalls || ctx.type != \")\")) return ctx.column + (closing ? 0 : 1);\n        if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n        return ctx.indented + (closing ? 0 : indentUnit) + (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n      },\n      electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n\n  var cKeywords = \"auto if break case register continue return default do sizeof \" + \"static else struct switch extern typedef union for goto while enum const \" + \"volatile inline restrict asm fortran\"; // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\n\n  var cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" + \"class compl concept constexpr const_cast decltype delete dynamic_cast \" + \"explicit export final friend import module mutable namespace new noexcept \" + \"not not_eq operator or or_eq override private protected public \" + \"reinterpret_cast requires static_assert static_cast template this \" + \"thread_local throw try typeid typename using virtual xor xor_eq\";\n  var objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" + \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" + \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" + \"@public @package @private @protected @required @optional @try @catch @finally @import \" + \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n  var objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" + \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" + \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" + \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"; // Do not use this. Use the cTypes function below. This is global just to avoid\n  // excessive calls when cTypes is being called multiple times during a parse.\n\n  var basicCTypes = words(\"int long char short double float unsigned signed \" + \"void bool\"); // Do not use this. Use the objCTypes function below. This is global just to avoid\n  // excessive calls when objCTypes is being called multiple times during a parse.\n\n  var basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\"); // Returns true if identifier is a \"C\" type.\n  // C type is defined as those that are reserved by the compiler (basicTypes),\n  // and those that end in _t (Reserved by POSIX for types)\n  // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\n\n  function cTypes(identifier) {\n    return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n  } // Returns true if identifier is a \"Objective C\" type.\n\n\n  function objCTypes(identifier) {\n    return cTypes(identifier) || contains(basicObjCTypes, identifier);\n  }\n\n  var cBlockKeywords = \"case do else for if switch while struct enum union\";\n  var cDefKeywords = \"struct enum union\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false;\n\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook;\n        break;\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break;\n      }\n\n      stream.next();\n    }\n\n    state.tokenize = next;\n    return \"meta\";\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"type\") return \"type\";\n    return false;\n  } // For C and C++ (and ObjC): identifiers starting with __\n  // or _ followed by a capital letter are reserved for the compiler.\n\n\n  function cIsReservedIdentifier(token) {\n    if (!token || token.length < 2) return false;\n    if (token[0] != '_') return false;\n    return token[1] == '_' || token[1] !== token[1].toLowerCase();\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1); // Raw strings.\n\n    if (stream.match(/(R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/\"([^\\s\\\\()]{0,16})\\(/);\n\n      if (!match) {\n        return false;\n      }\n\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    } // Unicode strings/chars.\n\n\n    if (stream.match(/(u8|u|U|L)/)) {\n      if (stream.match(/[\"']/,\n      /* eat */\n      false)) {\n        return \"string\";\n      }\n\n      return false;\n    } // Ignore this hook.\n\n\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  } // C#-style strings where \"\" escapes a quote.\n\n\n  function tokenAtString(stream, state) {\n    var next;\n\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n\n    return \"string\";\n  } // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n\n\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match) state.tokenize = null;else stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n\n    function add(obj) {\n      if (obj) for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) words.push(prop);\n      }\n    }\n\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i) {\n      CodeMirror.defineMIME(mimes[i], mode);\n    }\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    defKeywords: words(cDefKeywords),\n    typeFirstDefinitions: true,\n    atoms: words(\"NULL true false\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + cppKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords + \" class try catch\"),\n    defKeywords: words(cDefKeywords + \" class namespace\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false NULL nullptr\"),\n    dontIndentStatements: /^template$/,\n    isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function token(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" + \"do else enum extends final finally for goto if implements import \" + \"instanceof interface native new package private protected public \" + \"return static strictfp super switch synchronized this throw throws transient \" + \"try volatile while @interface\"),\n    types: words(\"byte short int long float double boolean char void Boolean Byte Character Double Float \" + \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface enum @interface\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function _(stream) {\n        // Don't match the @interface keyword.\n        if (stream.match('interface', false)) return false;\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    },\n    modeProps: {\n      fold: [\"brace\", \"import\"]\n    }\n  });\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" + \" default delegate do else enum event explicit extern finally fixed for\" + \" foreach goto if implicit in interface internal is lock namespace new\" + \" operator out override params private protected public readonly ref return sealed\" + \" sizeof stackalloc static struct switch this throw try typeof unchecked\" + \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" + \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" + \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" + \" UInt64 bool byte char decimal double short int long object\" + \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function _(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n\n    return \"string\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null;\n            break;\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      return \"comment\";\n    };\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n    /* scala */\n    \"abstract case catch class def do else extends final finally for forSome if \" + \"implicit import lazy match new null object override package private protected return \" + \"sealed super this throw trait try type val var while with yield _ \" +\n    /* package scala */\n    \"assert assume require print println printf readLine readBoolean readByte readShort \" + \"readChar readInt readLong readFloat readDouble\"),\n    types: words(\"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" + \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" + \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" + \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" + \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class enum def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function _(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function _(stream, state) {\n        var cx = state.context;\n\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);\n          return \"operator\";\n        } else {\n          return false;\n        }\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      }\n    },\n    modeProps: {\n      closeBrackets: {\n        pairs: '()[]{}\"\"',\n        triples: '\"'\n      }\n    }\n  });\n\n  function tokenKotlinString(tripleString) {\n    return function (stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"')) {\n          end = true;\n          break;\n        }\n\n        if (tripleString && stream.match('\"\"\"')) {\n          end = true;\n          break;\n        }\n\n        next = stream.next();\n        if (!escaped && next == \"$\" && stream.match('{')) stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n\n      if (end || !tripleString) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n    /*keywords*/\n    \"package as typealias class interface this super val operator \" + \"var fun for is in This throw return annotation \" + \"break continue object if else while do try when !in !is as? \" +\n    /*soft keywords*/\n    \"file import where by get set abstract enum open inner override private public internal \" + \"protected catch finally out final vararg reified dynamic companion constructor init \" + \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" + \"external annotation crossinline const operator infix suspend actual expect setparam\"),\n    types: words(\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" + \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" + \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '*': function _(_stream, state) {\n        return state.prevToken == '.' ? 'variable' : 'operator';\n      },\n      '\"': function _(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      },\n      indent: function indent(state, ctx, textAfter, indentUnit) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\") return state.indented;\n        if (state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\" || state.prevToken == \"variable\" && firstChar == \".\" || (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\") return indentUnit * 2 + ctx.indented;\n        if (ctx.align && ctx.type == \"}\") return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n      }\n    },\n    modeProps: {\n      closeBrackets: {\n        triples: '\"'\n      }\n    }\n  });\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" + \"sampler1DShadow sampler2DShadow \" + \"const attribute uniform varying \" + \"break continue discard return \" + \"for while do if else struct \" + \"in out inout\"),\n    types: words(\"float int bool void \" + \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" + \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" + \"pow exp log exp2 sqrt inversesqrt \" + \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" + \"length distance dot cross normalize ftransform faceforward \" + \"reflect refract matrixCompMult \" + \"lessThan lessThanEqual greaterThan greaterThanEqual \" + \"equal notEqual any all not \" + \"texture1D texture1DProj texture1DLod texture1DProjLod \" + \"texture2D texture2DProj texture2DLod texture2DProjLod \" + \"texture3D texture3DProj texture3DLod texture3DProjLod \" + \"textureCube textureCubeLod \" + \"shadow1D shadow2D shadow1DProj shadow2DProj \" + \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" + \"dFdx dFdy fwidth \" + \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" + \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" + \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" + \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" + \"gl_FogCoord gl_PointCoord \" + \"gl_Position gl_PointSize gl_ClipVertex \" + \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" + \"gl_TexCoord gl_FogFragCoord \" + \"gl_FragCoord gl_FrontFacing \" + \"gl_FragData gl_FragDepth \" + \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" + \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" + \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" + \"gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" + \"gl_ProjectionMatrixInverseTranspose \" + \"gl_ModelViewProjectionMatrixInverseTranspose \" + \"gl_TextureMatrixInverseTranspose \" + \"gl_NormalScale gl_DepthRange gl_ClipPlane \" + \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" + \"gl_FrontLightModelProduct gl_BackLightModelProduct \" + \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" + \"gl_FogParameters \" + \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" + \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" + \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" + \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" + \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" + \"implementation includes interface module new norace nx_struct nx_union post provides \" + \"signal task uses abstract extends\"),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    atoms: words(\"null true false\"),\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n    dontIndentStatements: /^@.*$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-objectivec++\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n    dontIndentStatements: /^@.*$|^template$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function token(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" + \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: cTypes,\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  }); // Ceylon Strings need to deal with interpolation\n\n  var stringTokenizer = null;\n\n  function tokenCeylonString(type) {\n    return function (stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') && (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n\n      if (end) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" + \" exists extends finally for function given if import in interface is let module new\" + \" nonempty object of out outer package return satisfies super switch then this throw\" + \" try value void while\"),\n    types: function types(word) {\n      // In Ceylon all identifiers that start with an uppercase are types\n      var first = word.charAt(0);\n      return first === first.toUpperCase() && first !== first.toLowerCase();\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" + \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function _(stream, state) {\n        state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n        return state.tokenize(stream, state);\n      },\n      '`': function _(stream, state) {\n        if (!stringTokenizer || !stream.match('`')) return false;\n        state.tokenize = stringTokenizer;\n        stringTokenizer = null;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function token(_stream, state, style) {\n        if ((style == \"variable\" || style == \"type\") && state.prevToken == \".\") {\n          return \"variable-2\";\n        }\n      }\n    },\n    modeProps: {\n      fold: [\"brace\", \"import\"],\n      closeBrackets: {\n        triples: '\"'\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/clike/clike.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Context","indented","column","type","info","align","prev","pushContext","state","col","indent","context","popContext","t","typeBefore","stream","pos","prevToken","test","string","slice","typeAtEndOfLine","indentation","isTopScope","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","keywords","types","builtin","blockKeywords","defKeywords","atoms","hooks","multiLineStrings","indentStatements","indentSwitch","namespaceSeparator","isPunctuationChar","numberStart","number","isOperatorChar","isIdentifierChar","isReservedIdentifier","curPunc","isDefKeyword","tokenBase","ch","next","result","tokenize","tokenString","backUp","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","contains","quote","escaped","end","maybeEnd","maybeEOL","typeFirstDefinitions","eol","startState","basecolumn","startOfLine","token","ctx","sol","eatSpace","style","start","undefined","styleDefs","textAfter","Pass","firstChar","charAt","closing","dontIndentStatements","hook","switchBlock","allmanIndentation","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","words","str","obj","split","i","length","word","propertyIsEnumerable","cKeywords","cppKeywords","objCKeywords","objCBuiltins","basicCTypes","basicObjCTypes","cTypes","identifier","objCTypes","cBlockKeywords","cDefKeywords","cppHook","peek","pointerHook","_stream","cIsReservedIdentifier","toLowerCase","cpp14Literal","cpp11StringHook","cpp11RawStringDelim","tokenRawString","cppLooksLikeConstructor","lastTwo","exec","tokenAtString","delim","replace","RegExp","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","name","modeProps","tokenTripleString","tokenNestedComment","depth","cx","closeBrackets","pairs","triples","tokenKotlinString","tripleString","skipTo","intendSwitch","stringTokenizer","tokenCeylonString","first","toUpperCase"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\" && type != \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\n\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\n\nCodeMirror.defineMode(\"clike\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      types = parserConfig.types || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      defKeywords = parserConfig.defKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false,\n      indentSwitch = parserConfig.indentSwitch !== false,\n      namespaceSeparator = parserConfig.namespaceSeparator,\n      isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n      numberStart = parserConfig.numberStart || /[\\d\\.]/,\n      number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n      isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n      isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n      // An optional function that takes a {string} token and returns true if it\n      // should be treated as a builtin.\n      isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n\n  var curPunc, isDefKeyword;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1)\n      if (stream.match(number)) return \"number\"\n      stream.next()\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(isIdentifierChar);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator))\n      stream.eatWhile(isIdentifierChar);\n\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"type\";\n    if (contains(builtin, cur)\n        || (isReservedIdentifier && isReservedIdentifier(cur))) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\n      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \";\" || curPunc == \":\" || (curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)))\n        while (state.context.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n\n      if (style == \"variable\" &&\n          ((state.prevToken == \"def\" ||\n            (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\n             isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\n        style = \"def\";\n\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements)\n        while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\n          ctx = ctx.prev\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter, indentUnit);\n        if (typeof hook == \"number\") return hook\n      }\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\n        return ctx.indented\n      }\n      if (ctx.type == \"statement\")\n        return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\n        return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing)\n        return ctx.indented + statementIndentUnit;\n\n      return ctx.indented + (closing ? 0 : indentUnit) +\n        (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n    },\n\n    electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n  var cKeywords = \"auto if break case register continue return default do sizeof \" +\n    \"static else struct switch extern typedef union for goto while enum const \" +\n    \"volatile inline restrict asm fortran\";\n\n  // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\n  var cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" +\n  \"class compl concept constexpr const_cast decltype delete dynamic_cast \" +\n  \"explicit export final friend import module mutable namespace new noexcept \" +\n  \"not not_eq operator or or_eq override private protected public \" +\n  \"reinterpret_cast requires static_assert static_cast template this \" +\n  \"thread_local throw try typeid typename using virtual xor xor_eq\";\n\n  var objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" +\n  \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" +\n  \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" +\n  \"@public @package @private @protected @required @optional @try @catch @finally @import \" +\n  \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n\n  var objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" +\n  \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" +\n  \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" +\n  \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"\n\n  // Do not use this. Use the cTypes function below. This is global just to avoid\n  // excessive calls when cTypes is being called multiple times during a parse.\n  var basicCTypes = words(\"int long char short double float unsigned signed \" +\n    \"void bool\");\n\n  // Do not use this. Use the objCTypes function below. This is global just to avoid\n  // excessive calls when objCTypes is being called multiple times during a parse.\n  var basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\");\n\n  // Returns true if identifier is a \"C\" type.\n  // C type is defined as those that are reserved by the compiler (basicTypes),\n  // and those that end in _t (Reserved by POSIX for types)\n  // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\n  function cTypes(identifier) {\n    return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n  }\n\n  // Returns true if identifier is a \"Objective C\" type.\n  function objCTypes(identifier) {\n    return cTypes(identifier) || contains(basicObjCTypes, identifier);\n  }\n\n  var cBlockKeywords = \"case do else for if switch while struct enum union\";\n  var cDefKeywords = \"struct enum union\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook\n        break\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break\n      }\n      stream.next()\n    }\n    state.tokenize = next\n    return \"meta\"\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"type\") return \"type\";\n    return false;\n  }\n\n  // For C and C++ (and ObjC): identifiers starting with __\n  // or _ followed by a capital letter are reserved for the compiler.\n  function cIsReservedIdentifier(token) {\n    if (!token || token.length < 2) return false;\n    if (token[0] != '_') return false;\n    return (token[1] == '_') || (token[1] !== token[1].toLowerCase());\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1);\n    // Raw strings.\n    if (stream.match(/(R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/\"([^\\s\\\\()]{0,16})\\(/);\n      if (!match) {\n        return false;\n      }\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    }\n    // Unicode strings/chars.\n    if (stream.match(/(u8|u|U|L)/)) {\n      if (stream.match(/[\"']/, /* eat */ false)) {\n        return \"string\";\n      }\n      return false;\n    }\n    // Ignore this hook.\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  }\n\n  // C#-style strings where \"\" escapes a quote.\n  function tokenAtString(stream, state) {\n    var next;\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"string\";\n  }\n\n  // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match)\n      state.tokenize = null;\n    else\n      stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    defKeywords: words(cDefKeywords),\n    typeFirstDefinitions: true,\n    atoms: words(\"NULL true false\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + cppKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords + \" class try catch\"),\n    defKeywords: words(cDefKeywords + \" class namespace\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false NULL nullptr\"),\n    dontIndentStatements: /^template$/,\n    isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" +\n                    \"do else enum extends final finally for goto if implements import \" +\n                    \"instanceof interface native new package private protected public \" +\n                    \"return static strictfp super switch synchronized this throw throws transient \" +\n                    \"try volatile while @interface\"),\n    types: words(\"byte short int long float double boolean char void Boolean Byte Character Double Float \" +\n                 \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface enum @interface\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function(stream) {\n        // Don't match the @interface keyword.\n        if (stream.match('interface', false)) return false;\n\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    },\n    modeProps: {fold: [\"brace\", \"import\"]}\n  });\n\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" +\n                    \" default delegate do else enum event explicit extern finally fixed for\" +\n                    \" foreach goto if implicit in interface internal is lock namespace new\" +\n                    \" operator out override params private protected public readonly ref return sealed\" +\n                    \" sizeof stackalloc static struct switch this throw try typeof unchecked\" +\n                    \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" +\n                    \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" +\n                 \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" +\n                 \" UInt64 bool byte char decimal double short int long object\"  +\n                 \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n    return \"string\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n      /* scala */\n      \"abstract case catch class def do else extends final finally for forSome if \" +\n      \"implicit import lazy match new null object override package private protected return \" +\n      \"sealed super this throw trait try type val var while with yield _ \" +\n\n      /* package scala */\n      \"assert assume require print println printf readLine readBoolean readByte readShort \" +\n      \"readChar readInt readLong readFloat readDouble\"\n    ),\n    types: words(\n      \"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" +\n      \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" +\n      \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" +\n      \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" +\n      \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n    ),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class enum def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function(stream, state) {\n        var cx = state.context\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev)\n          return \"operator\"\n        } else {\n          return false\n        }\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      }\n    },\n    modeProps: {closeBrackets: {pairs: '()[]{}\"\"', triples: '\"'}}\n  });\n\n  function tokenKotlinString(tripleString){\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"') ) {end = true; break;}\n        if (tripleString && stream.match('\"\"\"')) {end = true; break;}\n        next = stream.next();\n        if(!escaped && next == \"$\" && stream.match('{'))\n          stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n      if (end || !tripleString)\n        state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n      /*keywords*/\n      \"package as typealias class interface this super val operator \" +\n      \"var fun for is in This throw return annotation \" +\n      \"break continue object if else while do try when !in !is as? \" +\n\n      /*soft keywords*/\n      \"file import where by get set abstract enum open inner override private public internal \" +\n      \"protected catch finally out final vararg reified dynamic companion constructor init \" +\n      \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" +\n      \"external annotation crossinline const operator infix suspend actual expect setparam\"\n    ),\n    types: words(\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" +\n      \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" +\n      \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"\n    ),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '*': function(_stream, state) {\n        return state.prevToken == '.' ? 'variable' : 'operator';\n      },\n      '\"': function(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      },\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state)\n      },\n      indent: function(state, ctx, textAfter, indentUnit) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\")\n          return state.indented;\n        if ((state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\") ||\n          state.prevToken == \"variable\" && firstChar == \".\" ||\n          (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\")\n          return indentUnit * 2 + ctx.indented;\n        if (ctx.align && ctx.type == \"}\")\n          return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n      }\n    },\n    modeProps: {closeBrackets: {triples: '\"'}}\n  });\n\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" +\n                    \"sampler1DShadow sampler2DShadow \" +\n                    \"const attribute uniform varying \" +\n                    \"break continue discard return \" +\n                    \"for while do if else struct \" +\n                    \"in out inout\"),\n    types: words(\"float int bool void \" +\n                 \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n                 \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                    \"pow exp log exp2 sqrt inversesqrt \" +\n                    \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                    \"length distance dot cross normalize ftransform faceforward \" +\n                    \"reflect refract matrixCompMult \" +\n                    \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                    \"equal notEqual any all not \" +\n                    \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\n                    \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\n                    \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\n                    \"textureCube textureCubeLod \" +\n                    \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\n                    \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\n                    \"dFdx dFdy fwidth \" +\n                    \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" +\n                \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\n                \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\n                \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\n                \"gl_FogCoord gl_PointCoord \" +\n                \"gl_Position gl_PointSize gl_ClipVertex \" +\n                \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\n                \"gl_TexCoord gl_FogFragCoord \" +\n                \"gl_FragCoord gl_FrontFacing \" +\n                \"gl_FragData gl_FragDepth \" +\n                \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\n                \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\n                \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\n                \"gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\n                \"gl_ProjectionMatrixInverseTranspose \" +\n                \"gl_ModelViewProjectionMatrixInverseTranspose \" +\n                \"gl_TextureMatrixInverseTranspose \" +\n                \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\n                \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\n                \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\n                \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\n                \"gl_FogParameters \" +\n                \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\n                \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\n                \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\n                \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\n                \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" +\n                    \"implementation includes interface module new norace nx_struct nx_union post provides \" +\n                    \"signal task uses abstract extends\"),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    atoms: words(\"null true false\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n    dontIndentStatements: /^@.*$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec++\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n    dontIndentStatements: /^@.*$|^template$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" +\n                    \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: cTypes,\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  // Ceylon Strings need to deal with interpolation\n  var stringTokenizer = null;\n  function tokenCeylonString(type) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') &&\n              (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n      if (end)\n          state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" +\n                    \" exists extends finally for function given if import in interface is let module new\" +\n                    \" nonempty object of out outer package return satisfies super switch then this throw\" +\n                    \" try value void while\"),\n    types: function(word) {\n        // In Ceylon all identifiers that start with an uppercase are types\n        var first = word.charAt(0);\n        return (first === first.toUpperCase() && first !== first.toLowerCase());\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" +\n                   \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n          state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n          return state.tokenize(stream, state);\n        },\n      '`': function(stream, state) {\n          if (!stringTokenizer || !stream.match('`')) return false;\n          state.tokenize = stringTokenizer;\n          stringTokenizer = null;\n          return state.tokenize(stream, state);\n        },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function(_stream, state, style) {\n          if ((style == \"variable\" || style == \"type\") &&\n              state.prevToken == \".\") {\n            return \"variable-2\";\n          }\n        }\n    },\n    modeProps: {\n        fold: [\"brace\", \"import\"],\n        closeBrackets: {triples: '\"'}\n    }\n  });\n\n});\n"]},"metadata":{},"sourceType":"script"}