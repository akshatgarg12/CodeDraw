{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pascal\", function () {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n      return obj;\n    }\n\n    var keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n    var atoms = {\n      \"null\": true\n    };\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"#\" && state.startOfLine) {\n        stream.skipToEnd();\n        return \"meta\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"(\" && stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n\n      if (ch == \"{\") {\n        state.tokenize = tokenCommentBraces;\n        return tokenCommentBraces(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenCommentBraces(stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"}\") {\n          state.tokenize = null;\n          break;\n        }\n      }\n\n      return \"comment\";\n    } // Interface\n\n\n    return {\n      startState: function () {\n        return {\n          tokenize: null\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/pascal/pascal.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"]},"metadata":{},"sourceType":"script"}