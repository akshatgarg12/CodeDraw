{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n  var others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"]; // Collect all Dockerfile directives\n\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [// Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    }, // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    }, {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    }, {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    }, // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    }, {\n      regex: /./,\n      token: null\n    }],\n    from: [{\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    }, {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    }, {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    single: [{\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }],\n    double: [{\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }],\n    array: [{\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }],\n    expose: [{\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    }, {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\\d+/,\n      token: \"number\"\n    }, {\n      regex: /[^\\d]+/,\n      token: null\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    arguments: [{\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    }, {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    }, {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /[^#\"']+/,\n      token: null\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/dockerfile/dockerfile.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","others","instructions","concat","instructionRegex","instructionOnlyLine","instructionWithArguments","defineSimpleMode","start","regex","sol","token","next","single","pop","double","array","arguments","push","meta","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\n  var others = [\n    \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n    \"add\", \"copy\", \"volume\", \"user\",\n    \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n  ];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: fromRegex,\n        token: [null, \"keyword\"],\n        sol: true,\n        next: \"from\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: [null, \"keyword\", null, \"error\"],\n        sol: true\n      },\n      {\n        regex: shellsAsArrayRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"array\"\n      },\n      {\n        regex: exposeRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"expose\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    from: [\n      {\n        regex: /\\s*$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        // Line comment without instruction arguments is an error\n        regex: /(\\s*)(#.*)$/,\n        token: [null, \"error\"],\n        next: \"start\"\n      },\n      {\n        regex: /(\\s*\\S+\\s+)(as)/i,\n        token: [null, \"keyword\"],\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    single: [\n      {\n        regex: /(?:[^\\\\']|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    double: [\n      {\n        regex: /(?:[^\\\\\"]|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    array: [\n      {\n        regex: /\\]/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n        token: \"string\"\n      }\n    ],\n    expose: [\n      {\n        regex: /\\d+$/,\n        token: \"number\",\n        next: \"start\"\n      },\n      {\n        regex: /[^\\d]+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\\d+/,\n        token: \"number\"\n      },\n      {\n        regex: /[^\\d]+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    arguments: [\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        push: \"double\"\n      },\n      {\n        regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        push: \"single\"\n      },\n      {\n        regex: /[^#\"']+[\\\\`]$/,\n        token: null\n      },\n      {\n        regex: /[^#\"']+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /[^#\"']+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n"]},"metadata":{},"sourceType":"script"}