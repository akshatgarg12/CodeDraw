{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"d\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        blockKeywords = parserConfig.blockKeywords || {},\n        atoms = parserConfig.atoms || {},\n        hooks = parserConfig.hooks || {},\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"+\")) {\n          state.tokenize = tokenNestedComment;\n          return tokenNestedComment(stream, state);\n        }\n\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n\n      if (builtin.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"builtin\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenNestedComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"+\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" + \"out scope struct switch try union unittest version while with\";\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" + \"debug default delegate delete deprecated export extern final finally function goto immutable \" + \"import inout invariant is lazy macro module new nothrow override package pragma private \" + \"protected public pure ref return shared short static super synchronized template this \" + \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" + \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function _(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/d/d.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndentUnit","keywords","builtin","blockKeywords","atoms","hooks","multiLineStrings","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","result","tokenize","tokenString","test","eatWhile","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","words","str","obj","split","i","length","defineMIME","name","_state"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"d\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"+\")) {\n        state.tokenize = tokenNestedComment;\n        return tokenNestedComment(stream, state);\n      }\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"+\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n                      \"out scope struct switch try union unittest version while with\";\n\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                    \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                    \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                    \"protected public pure ref return shared short static super synchronized template this \" +\n                    \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                    blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                   \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n});\n"]},"metadata":{},"sourceType":"script"}