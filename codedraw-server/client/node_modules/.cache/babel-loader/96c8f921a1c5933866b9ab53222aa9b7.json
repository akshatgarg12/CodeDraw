{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  \"use strict\";\n\n  if (typeof exports === \"object\" && typeof module === \"object\") {\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/overlay\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../coffeescript/coffeescript\"), require(\"../css/css\"), require(\"../sass/sass\"), require(\"../stylus/stylus\"), require(\"../pug/pug\"), require(\"../handlebars/handlebars\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/overlay\", \"../xml/xml\", \"../javascript/javascript\", \"../coffeescript/coffeescript\", \"../css/css\", \"../sass/sass\", \"../stylus/stylus\", \"../pug/pug\", \"../handlebars/handlebars\"], mod);\n  } else {\n    // Plain browser env\n    mod(CodeMirror);\n  }\n})(function (CodeMirror) {\n  var tagLanguages = {\n    script: [[\"lang\", /coffee(script)?/, \"coffeescript\"], [\"type\", /^(?:text|application)\\/(?:x-)?coffee(?:script)?$/, \"coffeescript\"], [\"lang\", /^babel$/, \"javascript\"], [\"type\", /^text\\/babel$/, \"javascript\"], [\"type\", /^text\\/ecmascript-\\d+$/, \"javascript\"]],\n    style: [[\"lang\", /^stylus$/i, \"stylus\"], [\"lang\", /^sass$/i, \"sass\"], [\"lang\", /^less$/i, \"text/x-less\"], [\"lang\", /^scss$/i, \"text/x-scss\"], [\"type\", /^(text\\/)?(x-)?styl(us)?$/i, \"stylus\"], [\"type\", /^text\\/sass/i, \"sass\"], [\"type\", /^(text\\/)?(x-)?scss$/i, \"text/x-scss\"], [\"type\", /^(text\\/)?(x-)?less$/i, \"text/x-less\"]],\n    template: [[\"lang\", /^vue-template$/i, \"vue\"], [\"lang\", /^pug$/i, \"pug\"], [\"lang\", /^handlebars$/i, \"handlebars\"], [\"type\", /^(text\\/)?(x-)?pug$/i, \"pug\"], [\"type\", /^text\\/x-handlebars-template$/i, \"handlebars\"], [null, null, \"vue-template\"]]\n  };\n  CodeMirror.defineMode(\"vue-template\", function (config, parserConfig) {\n    var mustacheOverlay = {\n      token: function (stream) {\n        if (stream.match(/^\\{\\{.*?\\}\\}/)) return \"meta mustache\";\n\n        while (stream.next() && !stream.match(\"{{\", false)) {}\n\n        return null;\n      }\n    };\n    return CodeMirror.overlayMode(CodeMirror.getMode(config, parserConfig.backdrop || \"text/html\"), mustacheOverlay);\n  });\n  CodeMirror.defineMode(\"vue\", function (config) {\n    return CodeMirror.getMode(config, {\n      name: \"htmlmixed\",\n      tags: tagLanguages\n    });\n  }, \"htmlmixed\", \"xml\", \"javascript\", \"coffeescript\", \"css\", \"sass\", \"stylus\", \"pug\", \"handlebars\");\n  CodeMirror.defineMIME(\"script/x-vue\", \"vue\");\n  CodeMirror.defineMIME(\"text/x-vue\", \"vue\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/vue/vue.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","tagLanguages","script","style","template","defineMode","config","parserConfig","mustacheOverlay","token","stream","match","next","overlayMode","getMode","backdrop","name","tags","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  \"use strict\";\n  if (typeof exports === \"object\" && typeof module === \"object\") {// CommonJS\n    mod(require(\"../../lib/codemirror\"),\n        require(\"../../addon/mode/overlay\"),\n        require(\"../xml/xml\"),\n        require(\"../javascript/javascript\"),\n        require(\"../coffeescript/coffeescript\"),\n        require(\"../css/css\"),\n        require(\"../sass/sass\"),\n        require(\"../stylus/stylus\"),\n        require(\"../pug/pug\"),\n        require(\"../handlebars/handlebars\"));\n  } else if (typeof define === \"function\" && define.amd) { // AMD\n    define([\"../../lib/codemirror\",\n            \"../../addon/mode/overlay\",\n            \"../xml/xml\",\n            \"../javascript/javascript\",\n            \"../coffeescript/coffeescript\",\n            \"../css/css\",\n            \"../sass/sass\",\n            \"../stylus/stylus\",\n            \"../pug/pug\",\n            \"../handlebars/handlebars\"], mod);\n  } else { // Plain browser env\n    mod(CodeMirror);\n  }\n})(function (CodeMirror) {\n  var tagLanguages = {\n    script: [\n      [\"lang\", /coffee(script)?/, \"coffeescript\"],\n      [\"type\", /^(?:text|application)\\/(?:x-)?coffee(?:script)?$/, \"coffeescript\"],\n      [\"lang\", /^babel$/, \"javascript\"],\n      [\"type\", /^text\\/babel$/, \"javascript\"],\n      [\"type\", /^text\\/ecmascript-\\d+$/, \"javascript\"]\n    ],\n    style: [\n      [\"lang\", /^stylus$/i, \"stylus\"],\n      [\"lang\", /^sass$/i, \"sass\"],\n      [\"lang\", /^less$/i, \"text/x-less\"],\n      [\"lang\", /^scss$/i, \"text/x-scss\"],\n      [\"type\", /^(text\\/)?(x-)?styl(us)?$/i, \"stylus\"],\n      [\"type\", /^text\\/sass/i, \"sass\"],\n      [\"type\", /^(text\\/)?(x-)?scss$/i, \"text/x-scss\"],\n      [\"type\", /^(text\\/)?(x-)?less$/i, \"text/x-less\"]\n    ],\n    template: [\n      [\"lang\", /^vue-template$/i, \"vue\"],\n      [\"lang\", /^pug$/i, \"pug\"],\n      [\"lang\", /^handlebars$/i, \"handlebars\"],\n      [\"type\", /^(text\\/)?(x-)?pug$/i, \"pug\"],\n      [\"type\", /^text\\/x-handlebars-template$/i, \"handlebars\"],\n      [null, null, \"vue-template\"]\n    ]\n  };\n\n  CodeMirror.defineMode(\"vue-template\", function (config, parserConfig) {\n    var mustacheOverlay = {\n      token: function (stream) {\n        if (stream.match(/^\\{\\{.*?\\}\\}/)) return \"meta mustache\";\n        while (stream.next() && !stream.match(\"{{\", false)) {}\n        return null;\n      }\n    };\n    return CodeMirror.overlayMode(CodeMirror.getMode(config, parserConfig.backdrop || \"text/html\"), mustacheOverlay);\n  });\n\n  CodeMirror.defineMode(\"vue\", function (config) {\n    return CodeMirror.getMode(config, {name: \"htmlmixed\", tags: tagLanguages});\n  }, \"htmlmixed\", \"xml\", \"javascript\", \"coffeescript\", \"css\", \"sass\", \"stylus\", \"pug\", \"handlebars\");\n\n  CodeMirror.defineMIME(\"script/x-vue\", \"vue\");\n  CodeMirror.defineMIME(\"text/x-vue\", \"vue\");\n});\n"]},"metadata":{},"sourceType":"script"}