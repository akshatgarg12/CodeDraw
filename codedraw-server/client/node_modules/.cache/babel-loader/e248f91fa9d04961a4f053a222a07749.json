{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  }\n\n  ;\n  var keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\n  var keywords = wordRegexp(keywordArray);\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n  var identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null; // Handle one line Comments\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } // Handle Number Literals\n\n\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    } // Handle Strings\n\n\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n      return \"string\";\n    }\n\n    if (stream.match(/^'([^']|(''))*'/)) {\n      return \"string\";\n    } // Handle words\n\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    ; // Handle non-detected items\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"protobuf\", function () {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/protobuf/protobuf.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","keywordArray","keywords","registerHelper","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","defineMode","token","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  };\n\n  var keywordArray = [\n    \"package\", \"message\", \"import\", \"syntax\",\n    \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n    \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n    \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n    \"option\", \"service\", \"rpc\", \"returns\"\n  ];\n  var keywords = wordRegexp(keywordArray);\n\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n    }\n\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n    if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return \"keyword\"; }\n    if (stream.match(identifiers)) { return \"variable\"; } ;\n\n    // Handle non-detected items\n    stream.next();\n    return null;\n  };\n\n  CodeMirror.defineMode(\"protobuf\", function() {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n"]},"metadata":{},"sourceType":"script"}