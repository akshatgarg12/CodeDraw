{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next(); // start of unparsed string?\n\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      } // start of parsed string?\n      else if (ch == '\"') {\n          state.lastTokenWasBuiltin = false;\n\n          if (state.inString) {\n            state.inString = false;\n            return \"string\";\n          } else if (state.inParams) return chain(stream, state, tokenString(ch));\n        } // is it one of the special signs []{}().,;? Seperator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n              state.inParams = false;\n              state.lastTokenWasBuiltin = true;\n            }\n            return null;\n          } // start of a number value?\n          else if (/\\d/.test(ch)) {\n              state.lastTokenWasBuiltin = false;\n              stream.eatWhile(/[\\w\\.]/);\n              return \"number\";\n            } // multi line comment?\n            else if (ch == \"#\" && stream.eat(\"*\")) {\n                state.lastTokenWasBuiltin = false;\n                return chain(stream, state, tokenComment);\n              } // unparsed content?\n              else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n                  state.lastTokenWasBuiltin = false;\n                  return chain(stream, state, tokenUnparsed);\n                } // single line comment?\n                else if (ch == \"#\" && stream.eat(\"#\")) {\n                    state.lastTokenWasBuiltin = false;\n                    stream.skipToEnd();\n                    return \"comment\";\n                  } // variable?\n                  else if (ch == \"$\") {\n                      stream.eatWhile(/[\\w\\d\\$_\\.{}-]/); // is it one of the specials?\n\n                      if (specials && specials.propertyIsEnumerable(stream.current())) {\n                        return \"keyword\";\n                      } else {\n                        state.lastTokenWasBuiltin = true;\n                        state.beforeParams = true;\n                        return \"builtin\";\n                      }\n                    } // is it a operator?\n                    else if (isOperatorChar.test(ch)) {\n                        state.lastTokenWasBuiltin = false;\n                        stream.eatWhile(isOperatorChar);\n                        return \"operator\";\n                      } else {\n                        // get the whole word\n                        stream.eatWhile(/[\\w\\$_{}@]/);\n                        var word = stream.current(); // is it one of the listed keywords?\n\n                        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\"; // is it one of the listed functions?\n\n                        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                          state.beforeParams = true;\n                          state.lastTokenWasBuiltin = false;\n                          return \"keyword\";\n                        }\n\n                        if (state.inString) {\n                          state.lastTokenWasBuiltin = false;\n                          return \"string\";\n                        }\n\n                        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\"; // default: just a \"word\"\n\n                        state.lastTokenWasBuiltin = false;\n                        return null;\n                      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/velocity/velocity.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,EAAAA,UAAU,CAACC,UAAX,CAAsB,UAAtB,EAAkC,YAAW;AACzC,aAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrB,UAAIC,GAAG,GAAG,EAAV;AAAA,UAAcC,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkC,EAAED,CAApC;AAAuCH,QAAAA,GAAG,CAACC,KAAK,CAACE,CAAD,CAAN,CAAH,GAAgB,IAAhB;AAAvC;;AACA,aAAOH,GAAP;AACH;;AAED,QAAIK,QAAQ,GAAGP,UAAU,CAAC,qCACA,iCADD,CAAzB;AAEA,QAAIQ,SAAS,GAAGR,UAAU,CAAC,wEACA,sFADD,CAA1B;AAEA,QAAIS,QAAQ,GAAGT,UAAU,CAAC,kOAAD,CAAzB;AACA,QAAIU,cAAc,GAAG,mBAArB;;AAEA,aAASC,KAAT,CAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,CAA9B,EAAiC;AAC7BD,MAAAA,KAAK,CAACE,QAAN,GAAiBD,CAAjB;AACA,aAAOA,CAAC,CAACF,MAAD,EAASC,KAAT,CAAR;AACH;;AACD,aAASG,SAAT,CAAmBJ,MAAnB,EAA2BC,KAA3B,EAAkC;AAC9B,UAAII,YAAY,GAAGJ,KAAK,CAACI,YAAzB;AACAJ,MAAAA,KAAK,CAACI,YAAN,GAAqB,KAArB;AACA,UAAIC,EAAE,GAAGN,MAAM,CAACO,IAAP,EAAT,CAH8B,CAI9B;;AACA,UAAKD,EAAE,IAAI,GAAP,IAAe,CAACL,KAAK,CAACO,QAAtB,IAAkCP,KAAK,CAACQ,QAA5C,EAAsD;AAClDR,QAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,eAAOX,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBU,WAAW,CAACL,EAAD,CAA3B,CAAZ;AACH,OAHD,CAIA;AAJA,WAKK,IAAKA,EAAE,IAAI,GAAX,EAAiB;AAClBL,UAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;;AACA,cAAIT,KAAK,CAACO,QAAV,EAAoB;AAChBP,YAAAA,KAAK,CAACO,QAAN,GAAiB,KAAjB;AACA,mBAAO,QAAP;AACH,WAHD,MAIK,IAAIP,KAAK,CAACQ,QAAV,EACD,OAAOV,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBU,WAAW,CAACL,EAAD,CAA3B,CAAZ;AACP,SARI,CASL;AATK,aAUA,IAAI,mBAAmBM,IAAnB,CAAwBN,EAAxB,CAAJ,EAAiC;AAClC,gBAAIA,EAAE,IAAI,GAAN,IAAaD,YAAjB,EACIJ,KAAK,CAACQ,QAAN,GAAiB,IAAjB,CADJ,KAEK,IAAIH,EAAE,IAAI,GAAV,EAAe;AAChBL,cAAAA,KAAK,CAACQ,QAAN,GAAiB,KAAjB;AACAR,cAAAA,KAAK,CAACS,mBAAN,GAA4B,IAA5B;AACH;AACD,mBAAO,IAAP;AACH,WARI,CASL;AATK,eAUA,IAAI,KAAKE,IAAL,CAAUN,EAAV,CAAJ,EAAmB;AACpBL,cAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACAV,cAAAA,MAAM,CAACa,QAAP,CAAgB,QAAhB;AACA,qBAAO,QAAP;AACH,aAJI,CAKL;AALK,iBAMA,IAAIP,EAAE,IAAI,GAAN,IAAaN,MAAM,CAACc,GAAP,CAAW,GAAX,CAAjB,EAAkC;AACnCb,gBAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,uBAAOX,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBc,YAAhB,CAAZ;AACH,eAHI,CAIL;AAJK,mBAKA,IAAIT,EAAE,IAAI,GAAN,IAAaN,MAAM,CAACgB,KAAP,CAAa,UAAb,CAAjB,EAA2C;AAC5Cf,kBAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,yBAAOX,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBgB,aAAhB,CAAZ;AACH,iBAHI,CAIL;AAJK,qBAKA,IAAIX,EAAE,IAAI,GAAN,IAAaN,MAAM,CAACc,GAAP,CAAW,GAAX,CAAjB,EAAkC;AACnCb,oBAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACAV,oBAAAA,MAAM,CAACkB,SAAP;AACA,2BAAO,SAAP;AACH,mBAJI,CAKL;AALK,uBAMA,IAAIZ,EAAE,IAAI,GAAV,EAAe;AAChBN,sBAAAA,MAAM,CAACa,QAAP,CAAgB,gBAAhB,EADgB,CAEhB;;AACA,0BAAIhB,QAAQ,IAAIA,QAAQ,CAACsB,oBAAT,CAA8BnB,MAAM,CAACoB,OAAP,EAA9B,CAAhB,EAAiE;AAC7D,+BAAO,SAAP;AACH,uBAFD,MAGK;AACDnB,wBAAAA,KAAK,CAACS,mBAAN,GAA4B,IAA5B;AACAT,wBAAAA,KAAK,CAACI,YAAN,GAAqB,IAArB;AACA,+BAAO,SAAP;AACH;AACJ,qBAXI,CAYL;AAZK,yBAaA,IAAIP,cAAc,CAACc,IAAf,CAAoBN,EAApB,CAAJ,EAA6B;AAC9BL,wBAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACAV,wBAAAA,MAAM,CAACa,QAAP,CAAgBf,cAAhB;AACA,+BAAO,UAAP;AACH,uBAJI,MAKA;AACD;AACAE,wBAAAA,MAAM,CAACa,QAAP,CAAgB,YAAhB;AACA,4BAAIQ,IAAI,GAAGrB,MAAM,CAACoB,OAAP,EAAX,CAHC,CAID;;AACA,4BAAIzB,QAAQ,IAAIA,QAAQ,CAACwB,oBAAT,CAA8BE,IAA9B,CAAhB,EACI,OAAO,SAAP,CANH,CAOD;;AACA,4BAAIzB,SAAS,IAAIA,SAAS,CAACuB,oBAAV,CAA+BE,IAA/B,CAAb,IACKrB,MAAM,CAACoB,OAAP,GAAiBJ,KAAjB,CAAuB,oBAAvB,KAAgDhB,MAAM,CAACsB,IAAP,MAAe,GAAhE,IACC,EAAE1B,SAAS,IAAIA,SAAS,CAACuB,oBAAV,CAA+BE,IAAI,CAACE,WAAL,EAA/B,CAAf,CAFT,EAE6E;AACzEtB,0BAAAA,KAAK,CAACI,YAAN,GAAqB,IAArB;AACAJ,0BAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,iCAAO,SAAP;AACH;;AACD,4BAAIT,KAAK,CAACO,QAAV,EAAoB;AAChBP,0BAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,iCAAO,QAAP;AACH;;AACD,4BAAIV,MAAM,CAACwB,GAAP,GAAaH,IAAI,CAAC3B,MAAlB,IAA4BM,MAAM,CAACyB,MAAP,CAAcC,MAAd,CAAqB1B,MAAM,CAACwB,GAAP,GAAWH,IAAI,CAAC3B,MAAhB,GAAuB,CAA5C,KAAgD,GAA5E,IAAmFO,KAAK,CAACS,mBAA7F,EACI,OAAO,SAAP,CApBH,CAqBD;;AACAT,wBAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,+BAAO,IAAP;AACH;AACJ;;AAED,aAASC,WAAT,CAAqBgB,KAArB,EAA4B;AACxB,aAAO,UAAS3B,MAAT,EAAiBC,KAAjB,EAAwB;AAC3B,YAAI2B,OAAO,GAAG,KAAd;AAAA,YAAqBrB,IAArB;AAAA,YAA2BsB,GAAG,GAAG,KAAjC;;AACA,eAAO,CAACtB,IAAI,GAAGP,MAAM,CAACO,IAAP,EAAR,KAA0B,IAAjC,EAAuC;AACnC,cAAKA,IAAI,IAAIoB,KAAT,IAAmB,CAACC,OAAxB,EAAiC;AAC7BC,YAAAA,GAAG,GAAG,IAAN;AACA;AACH;;AACD,cAAIF,KAAK,IAAE,GAAP,IAAc3B,MAAM,CAACsB,IAAP,MAAiB,GAA/B,IAAsC,CAACM,OAA3C,EAAoD;AAChD3B,YAAAA,KAAK,CAACO,QAAN,GAAiB,IAAjB;AACAqB,YAAAA,GAAG,GAAG,IAAN;AACA;AACH;;AACDD,UAAAA,OAAO,GAAG,CAACA,OAAD,IAAYrB,IAAI,IAAI,IAA9B;AACH;;AACD,YAAIsB,GAAJ,EAAS5B,KAAK,CAACE,QAAN,GAAiBC,SAAjB;AACT,eAAO,QAAP;AACH,OAhBD;AAiBH;;AAED,aAASW,YAAT,CAAsBf,MAAtB,EAA8BC,KAA9B,EAAqC;AACjC,UAAI6B,QAAQ,GAAG,KAAf;AAAA,UAAsBxB,EAAtB;;AACA,aAAOA,EAAE,GAAGN,MAAM,CAACO,IAAP,EAAZ,EAA2B;AACvB,YAAID,EAAE,IAAI,GAAN,IAAawB,QAAjB,EAA2B;AACvB7B,UAAAA,KAAK,CAACE,QAAN,GAAiBC,SAAjB;AACA;AACH;;AACD0B,QAAAA,QAAQ,GAAIxB,EAAE,IAAI,GAAlB;AACH;;AACD,aAAO,SAAP;AACH;;AAED,aAASW,aAAT,CAAuBjB,MAAvB,EAA+BC,KAA/B,EAAsC;AAClC,UAAI6B,QAAQ,GAAG,CAAf;AAAA,UAAkBxB,EAAlB;;AACA,aAAOA,EAAE,GAAGN,MAAM,CAACO,IAAP,EAAZ,EAA2B;AACvB,YAAID,EAAE,IAAI,GAAN,IAAawB,QAAQ,IAAI,CAA7B,EAAgC;AAC5B7B,UAAAA,KAAK,CAACE,QAAN,GAAiBC,SAAjB;AACA;AACH;;AACD,YAAIE,EAAE,IAAI,GAAV,EACIwB,QAAQ,GADZ,KAEK,IAAIxB,EAAE,IAAI,GAAV,EACDwB,QAAQ,GAAG,CAAX;AACP;;AACD,aAAO,MAAP;AACH,KAhKwC,CAiKzC;;;AAEA,WAAO;AACHC,MAAAA,UAAU,EAAE,sBAAW;AACnB,eAAO;AACH5B,UAAAA,QAAQ,EAAEC,SADP;AAEHC,UAAAA,YAAY,EAAE,KAFX;AAGHI,UAAAA,QAAQ,EAAE,KAHP;AAIHD,UAAAA,QAAQ,EAAE,KAJP;AAKHE,UAAAA,mBAAmB,EAAE;AALlB,SAAP;AAOH,OATE;AAWHsB,MAAAA,KAAK,EAAE,eAAShC,MAAT,EAAiBC,KAAjB,EAAwB;AAC3B,YAAID,MAAM,CAACiC,QAAP,EAAJ,EAAuB,OAAO,IAAP;AACvB,eAAOhC,KAAK,CAACE,QAAN,CAAeH,MAAf,EAAuBC,KAAvB,CAAP;AACH,OAdE;AAeHiC,MAAAA,iBAAiB,EAAE,IAfhB;AAgBHC,MAAAA,eAAe,EAAE,IAhBd;AAiBHC,MAAAA,WAAW,EAAE,IAjBV;AAkBHC,MAAAA,IAAI,EAAE;AAlBH,KAAP;AAoBH,GAvLD;AAyLAnD,EAAAA,UAAU,CAACoD,UAAX,CAAsB,eAAtB,EAAuC,UAAvC;AAEC,CArMD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Seperator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"]},"metadata":{},"sourceType":"script"}