{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../../addon/mode/overlay\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function () {\n    var keywords = [\"and\", \"as\", \"assert\", \"autoescape\", \"block\", \"break\", \"class\", \"comment\", \"context\", \"continue\", \"datetime\", \"def\", \"del\", \"elif\", \"else\", \"end\", \"escape\", \"except\", \"exec\", \"extends\", \"false\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"in\", \"include\", \"is\", \"json_encode\", \"lambda\", \"length\", \"linkify\", \"load\", \"module\", \"none\", \"not\", \"or\", \"pass\", \"print\", \"put\", \"raise\", \"raw\", \"return\", \"self\", \"set\", \"squeeze\", \"super\", \"true\", \"try\", \"url_escape\", \"while\", \"with\", \"without\", \"xhtml_escape\", \"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n\n    function inTag(close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch == close && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"tornado\", function (config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/tornado/tornado.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","RegExp","join","tokenBase","stream","state","eatWhile","ch","next","eat","tokenize","inTag","close","match","startState","token","config","htmlBase","getMode","tornadoInner","overlayMode","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function() {\n    var keywords = [\"and\",\"as\",\"assert\",\"autoescape\",\"block\",\"break\",\"class\",\"comment\",\"context\",\n                    \"continue\",\"datetime\",\"def\",\"del\",\"elif\",\"else\",\"end\",\"escape\",\"except\",\n                    \"exec\",\"extends\",\"false\",\"finally\",\"for\",\"from\",\"global\",\"if\",\"import\",\"in\",\n                    \"include\",\"is\",\"json_encode\",\"lambda\",\"length\",\"linkify\",\"load\",\"module\",\n                    \"none\",\"not\",\"or\",\"pass\",\"print\",\"put\",\"raise\",\"raw\",\"return\",\"self\",\"set\",\n                    \"squeeze\",\"super\",\"true\",\"try\",\"url_escape\",\"while\",\"with\",\"without\",\"xhtml_escape\",\"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n    function inTag (close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n      return function (stream, state) {\n        var ch = stream.next();\n        if ((ch == close) && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"tornado\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});\n"]},"metadata":{},"sourceType":"script"}