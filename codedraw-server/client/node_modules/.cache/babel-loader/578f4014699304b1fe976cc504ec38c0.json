{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"rust\", {\n    start: [// string and byte string\n    {\n      regex: /b?\"/,\n      token: \"string\",\n      next: \"string\"\n    }, // raw string and raw byte string\n    {\n      regex: /b?r\"/,\n      token: \"string\",\n      next: \"string_raw\"\n    }, {\n      regex: /b?r#+\"/,\n      token: \"string\",\n      next: \"string_raw_hash\"\n    }, // character\n    {\n      regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/,\n      token: \"string-2\"\n    }, // byte\n    {\n      regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/,\n      token: \"string-2\"\n    }, {\n      regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n      token: \"number\"\n    }, {\n      regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n      token: \"keyword\"\n    }, {\n      regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/,\n      token: \"builtin\"\n    }, {\n      regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /#!?\\[.*\\]/,\n      token: \"meta\"\n    }, {\n      regex: /\\/\\/.*/,\n      token: \"comment\"\n    }, {\n      regex: /\\/\\*/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /[-+\\/*=<>!]+/,\n      token: \"operator\"\n    }, {\n      regex: /[a-zA-Z_]\\w*!/,\n      token: \"variable-3\"\n    }, {\n      regex: /[a-zA-Z_]\\w*/,\n      token: \"variable\"\n    }, {\n      regex: /[\\{\\[\\(]/,\n      indent: true\n    }, {\n      regex: /[\\}\\]\\)]/,\n      dedent: true\n    }],\n    string: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/,\n      token: \"string\"\n    }],\n    string_raw: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /[^\"]*/,\n      token: \"string\"\n    }],\n    string_raw_hash: [{\n      regex: /\"#+/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\"]|\"(?!#))*/,\n      token: \"string\"\n    }],\n    comment: [{\n      regex: /.*?\\*\\//,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: [\"comment\"],\n      electricInput: /^\\s*\\}$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\n  CodeMirror.defineMIME(\"text/rust\", \"rust\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/rust/rust.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","string","string_raw","string_raw_hash","comment","meta","dontIndentStates","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineSimpleMode(\"rust\",{\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    electricInput: /^\\s*\\}$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  }\n});\n\n\nCodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\nCodeMirror.defineMIME(\"text/rust\", \"rust\");\n});\n"]},"metadata":{},"sourceType":"script"}