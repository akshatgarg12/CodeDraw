{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts = parserConfig.otherConsts || {},\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n\n      if (ch == \"%\") {\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        if (ch == \"@\") {\n          if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n            return \"keyword\";\n          }\n        }\n\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur)) return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterQuote = stream.peek(); //look if the character after the quote is like the B in '10100010'B\n\n            if (afterQuote) {\n              afterQuote = afterQuote.toLowerCase();\n              if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n\n    function add(obj) {\n      if (obj) for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) words.push(prop);\n      }\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i) {\n      CodeMirror.defineMIME(mimes[i], mode);\n    }\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/ttcn/ttcn.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","builtin","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","types","visibilityModifiers","templateMatch","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","quote","escaped","end","afterQuote","peek","toLowerCase","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","words","str","obj","split","i","length","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n"]},"metadata":{},"sourceType":"script"}