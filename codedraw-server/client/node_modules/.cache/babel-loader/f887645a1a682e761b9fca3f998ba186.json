{"ast":null,"code":"var _jsxFileName = \"/Users/akshatgarg/Documents/codedraw/src/Components/CodeEditor.jsx\";\nimport CodeMirror from '@uiw/react-codemirror';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/addon/display/autorefresh';\nimport 'codemirror/addon/comment/comment';\nimport \"codemirror/lib/codemirror.css\";\nimport React, { useState } from 'react';\nexport default function CodeEditor() {\n  const [code, setCode] = useState('code...');\n  const [input, setInput] = useState();\n  const [language, setLanguage] = useState('c++');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"codeEditor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    name: \"language\",\n    id: \"language\",\n    value: language,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"c++\",\n    onSelect: e => {\n      setLanguage(e.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, \"C++\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"c\",\n    onSelect: e => {\n      console.log(e);\n      setLanguage(e.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, \"C\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"python\",\n    onSelect: e => {\n      setLanguage(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"python\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"javascript\",\n    onSelect: e => {\n      setLanguage(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, \"Javascript\")), /*#__PURE__*/React.createElement(CodeMirror, {\n    className: \"code\",\n    onChange: change => {\n      setCode(change.getValue());\n    },\n    height: \"70vh\",\n    width: \"70vh\",\n    options: {\n      readOnly: false,\n      theme: 'monokai',\n      tabSize: 2,\n      mode: {\n        language\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit\",\n    onClick: () => {\n      let codeJSON = JSON.stringify(code);\n      let inputJSON = JSON.stringify(input);\n      console.log(typeof language); // post this code to compiler APIs\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 1\n    }\n  }, \"submit\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"IO-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"input-area\",\n    rows: \"5\",\n    value: input,\n    onChange: e => {\n      setInput(e.target.value);\n    },\n    placeholder: \"Input:\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"output-area\",\n    rows: \"5\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/src/Components/CodeEditor.jsx"],"names":["CodeMirror","React","useState","CodeEditor","code","setCode","input","setInput","language","setLanguage","e","value","console","log","target","change","getValue","readOnly","theme","tabSize","mode","codeJSON","JSON","stringify","inputJSON"],"mappings":"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","sourcesContent":["import CodeMirror from '@uiw/react-codemirror';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/addon/display/autorefresh';\nimport 'codemirror/addon/comment/comment';\nimport \"codemirror/lib/codemirror.css\";\nimport React,{useState} from 'react'\n\nexport default function CodeEditor(){\n  const [code, setCode] = useState('code...');\n  const [input, setInput] = useState();\n  const [language, setLanguage]= useState('c++');\n  return <div className=\"codeEditor\">\n  <select name=\"language\" id=\"language\" value={language}>\n    <option value=\"c++\" onSelect={(e)=>{\n      setLanguage(e.value);\n    }}>C++</option>\n    <option value=\"c\" onSelect={(e)=>{\n      console.log(e);\n      setLanguage(e.value);\n    }}>C</option>\n    <option value=\"python\" onSelect={(e)=>{\n      setLanguage(e.target.value);\n    }}>python</option>\n    <option value=\"javascript\" onSelect={(e)=>{\n      setLanguage(e.target.value);\n    }}>Javascript</option>\n  </select>\n  <CodeMirror\n  className=\"code\"\n  onChange={(change)=>{\n    setCode(change.getValue())\n  }}\n  height=\"70vh\"\n  width=\"70vh\"\n  options={{\n    readOnly:false,\n    theme: 'monokai',\n    tabSize: 2,\n    mode:{language}\n  }}\n/>\n<button className=\"submit\" onClick={()=>{\n        let codeJSON = JSON.stringify(code);\n        let inputJSON = JSON.stringify(input);\n        console.log(typeof(language));\n        // post this code to compiler APIs\n      }}>submit</button>\n<div className=\"IO-box\">\n      <textarea className=\"input-area\" rows=\"5\" value={input} onChange={(e)=>{\n        setInput(e.target.value);\n      }} placeholder=\"Input:\"></textarea>\n      <textarea className=\"output-area\" rows=\"5\" readOnly></textarea>\n    </div>\n  </div>\n}"]},"metadata":{},"sourceType":"module"}