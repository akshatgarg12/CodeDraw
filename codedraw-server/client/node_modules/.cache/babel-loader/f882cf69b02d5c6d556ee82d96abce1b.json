{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fortran\", function () {\n    function words(array) {\n      var keys = {};\n\n      for (var i = 0; i < array.length; ++i) {\n        keys[array[i]] = true;\n      }\n\n      return keys;\n    }\n\n    var keywords = words([\"abstract\", \"accept\", \"allocatable\", \"allocate\", \"array\", \"assign\", \"asynchronous\", \"backspace\", \"bind\", \"block\", \"byte\", \"call\", \"case\", \"class\", \"close\", \"common\", \"contains\", \"continue\", \"cycle\", \"data\", \"deallocate\", \"decode\", \"deferred\", \"dimension\", \"do\", \"elemental\", \"else\", \"encode\", \"end\", \"endif\", \"entry\", \"enumerator\", \"equivalence\", \"exit\", \"external\", \"extrinsic\", \"final\", \"forall\", \"format\", \"function\", \"generic\", \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\", \"inquire\", \"intent\", \"interface\", \"intrinsic\", \"module\", \"namelist\", \"non_intrinsic\", \"non_overridable\", \"none\", \"nopass\", \"nullify\", \"open\", \"optional\", \"options\", \"parameter\", \"pass\", \"pause\", \"pointer\", \"print\", \"private\", \"program\", \"protected\", \"public\", \"pure\", \"read\", \"recursive\", \"result\", \"return\", \"rewind\", \"save\", \"select\", \"sequence\", \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\", \"use\", \"value\", \"volatile\", \"where\", \"while\", \"write\"]);\n    var builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\", \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\", \"all\", \"allocated\", \"alog\", \"amax\", \"amin\", \"amod\", \"and\", \"anint\", \"any\", \"asin\", \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\", \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\", \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\", \"clog\", \"cmplx\", \"command_argument_count\", \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\", \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\", \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\", \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\", \"c_alert\", \"c_backspace\", \"c_form_feed\", \"c_new_line\", \"c_carriage_return\", \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\", \"dacos\", \"dasin\", \"datan\", \"date_and_time\", \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\", \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\", \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\", \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\", \"dot_product\", \"dprod\", \"dsign\", \"dsinh\", \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\", \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\", \"exit\", \"exp\", \"exponent\", \"extends_type_of\", \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\", \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\", \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\", \"get_command\", \"get_command_argument\", \"get_environment_variable\", \"getcwd\", \"getenv\", \"getgid\", \"getlog\", \"getpid\", \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\", \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\", \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\", \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\", \"imagpart\", \"index\", \"int\", \"ior\", \"irand\", \"isatty\", \"ishft\", \"ishftc\", \"isign\", \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\", \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\", \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\", \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\", \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\", \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\", \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\", \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\", \"perror\", \"precision\", \"present\", \"product\", \"radix\", \"rand\", \"random_number\", \"random_seed\", \"range\", \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\", \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\", \"scan\", \"second\", \"selected_int_kind\", \"selected_real_kind\", \"set_exponent\", \"shape\", \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\", \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\", \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\", \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\", \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\", \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\", \"zlog\", \"zsin\", \"zsqrt\"]);\n    var dataTypes = words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\", \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\", \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\", \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\", \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\", \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\", \"c_intptr_t\", \"c_long\", \"c_long_double\", \"c_long_double_complex\", \"c_long_long\", \"c_ptr\", \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\n    var isOperatorChar = /[+\\-*&=<>\\/\\:]/;\n    var litOperator = new RegExp(\"(\\.and\\.|\\.or\\.|\\.eq\\.|\\.lt\\.|\\.le\\.|\\.gt\\.|\\.ge\\.|\\.ne\\.|\\.not\\.|\\.eqv\\.|\\.neqv\\.)\", \"i\");\n\n    function tokenBase(stream, state) {\n      if (stream.match(litOperator)) {\n        return 'operator';\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"!\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\),]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var word = stream.current().toLowerCase();\n\n      if (keywords.hasOwnProperty(word)) {\n        return 'keyword';\n      }\n\n      if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n        return 'builtin';\n      }\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fortran\", \"fortran\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/fortran/fortran.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","array","keys","i","length","keywords","builtins","dataTypes","isOperatorChar","litOperator","RegExp","tokenBase","stream","state","match","ch","next","skipToEnd","tokenize","tokenString","test","eatWhile","word","current","toLowerCase","hasOwnProperty","quote","escaped","end","startState","token","eatSpace","style","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fortran\", function() {\n  function words(array) {\n    var keys = {};\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i]] = true;\n    }\n    return keys;\n  }\n\n  var keywords = words([\n                  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\n                  \"array\", \"assign\", \"asynchronous\", \"backspace\",\n                  \"bind\", \"block\", \"byte\", \"call\", \"case\",\n                  \"class\", \"close\", \"common\", \"contains\",\n                  \"continue\", \"cycle\", \"data\", \"deallocate\",\n                  \"decode\", \"deferred\", \"dimension\", \"do\",\n                  \"elemental\", \"else\", \"encode\", \"end\",\n                  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\n                  \"exit\", \"external\", \"extrinsic\", \"final\",\n                  \"forall\", \"format\", \"function\", \"generic\",\n                  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\n                  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\n                  \"module\", \"namelist\", \"non_intrinsic\",\n                  \"non_overridable\", \"none\", \"nopass\",\n                  \"nullify\", \"open\", \"optional\", \"options\",\n                  \"parameter\", \"pass\", \"pause\", \"pointer\",\n                  \"print\", \"private\", \"program\", \"protected\",\n                  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\n                  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\n                  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\n                  \"use\", \"value\", \"volatile\", \"where\", \"while\",\n                  \"write\"]);\n  var builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\n                          \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\n                          \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\n                          \"amod\", \"and\", \"anint\", \"any\", \"asin\",\n                          \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\n                          \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\n                          \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\n                          \"clog\", \"cmplx\", \"command_argument_count\",\n                          \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\n                          \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\n                          \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\n                          \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\n                          \"c_alert\", \"c_backspace\", \"c_form_feed\",\n                          \"c_new_line\", \"c_carriage_return\",\n                          \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\n                          \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\n                          \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\n                          \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\n                          \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\n                          \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\n                          \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\n                          \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\n                          \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\n                          \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\n                          \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\n                          \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\n                          \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\n                          \"get_command\", \"get_command_argument\",\n                          \"get_environment_variable\", \"getcwd\",\n                          \"getenv\", \"getgid\", \"getlog\", \"getpid\",\n                          \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\n                          \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\n                          \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\n                          \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\n                          \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\n                          \"isatty\", \"ishft\", \"ishftc\", \"isign\",\n                          \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\n                          \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\n                          \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\n                          \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\n                          \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\n                          \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\n                          \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\n                          \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\n                          \"perror\", \"precision\", \"present\", \"product\", \"radix\",\n                          \"rand\", \"random_number\", \"random_seed\", \"range\",\n                          \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\n                          \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\n                          \"scan\", \"second\", \"selected_int_kind\",\n                          \"selected_real_kind\", \"set_exponent\", \"shape\",\n                          \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\n                          \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\n                          \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\n                          \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\n                          \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\n                          \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\n                          \"zlog\", \"zsin\", \"zsqrt\"]);\n\n    var dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\n                     \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\n                     \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\n                     \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\n                     \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\n                     \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\n                     \"c_intptr_t\", \"c_long\", \"c_long_double\",\n                     \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\n                     \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\n                     \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\n  var isOperatorChar = /[+\\-*&=<>\\/\\:]/;\n  var litOperator = new RegExp(\"(\\.and\\.|\\.or\\.|\\.eq\\.|\\.lt\\.|\\.le\\.|\\.gt\\.|\\.ge\\.|\\.ne\\.|\\.not\\.|\\.eqv\\.|\\.neqv\\.)\", \"i\");\n\n  function tokenBase(stream, state) {\n\n    if (stream.match(litOperator)){\n        return 'operator';\n    }\n\n    var ch = stream.next();\n    if (ch == \"!\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\),]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var word = stream.current().toLowerCase();\n\n    if (keywords.hasOwnProperty(word)){\n            return 'keyword';\n    }\n    if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n            return 'builtin';\n    }\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n            end = true;\n            break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fortran\", \"fortran\");\n\n});\n"]},"metadata":{},"sourceType":"script"}