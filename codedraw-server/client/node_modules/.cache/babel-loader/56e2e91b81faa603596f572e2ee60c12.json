{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function () {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"plural\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); //Comment\n\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n\n        return \"comment\"; //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        } //After sign\n\n\n        if (state.sign) {\n          state.sign = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n\n            if (stream.match(number)) {\n              return \"number\";\n            }\n\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n\n          return \"comment\"; //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n\n      stream.next();\n    }\n\n    ;\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/jinja2/jinja2.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","RegExp","join","tokenBase","stream","state","ch","peek","incomment","skipTo","skipToEnd","eatWhile","intag","match","instring","next","eat","sol","startState","tokenize","token","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"]},"metadata":{},"sourceType":"script"}