{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sass\", function (config) {\n    var cssMode = CodeMirror.mimeModes[\"text/css\"];\n    var propertyKeywords = cssMode.propertyKeywords || {},\n        colorKeywords = cssMode.colorKeywords || {},\n        valueKeywords = cssMode.valueKeywords || {},\n        fontProperties = cssMode.fontProperties || {};\n\n    function tokenRegexp(words) {\n      return new RegExp(\"^\" + words.join(\"|\"));\n    }\n\n    var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n    var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n    var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\", \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\", \"\\\\{\", \"\\\\}\", \":\"];\n    var opRegexp = tokenRegexp(operators);\n    var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n    var word;\n\n    function isEndLine(stream) {\n      return !stream.peek() || stream.match(/\\s+$/, false);\n    }\n\n    function urlTokens(stream, state) {\n      var ch = stream.peek();\n\n      if (ch === \")\") {\n        stream.next();\n        state.tokenizer = tokenBase;\n        return \"operator\";\n      } else if (ch === \"(\") {\n        stream.next();\n        stream.eatSpace();\n        return \"operator\";\n      } else if (ch === \"'\" || ch === '\"') {\n        state.tokenizer = buildStringTokenizer(stream.next());\n        return \"string\";\n      } else {\n        state.tokenizer = buildStringTokenizer(\")\", false);\n        return \"string\";\n      }\n    }\n\n    function comment(indentation, multiLine) {\n      return function (stream, state) {\n        if (stream.sol() && stream.indentation() <= indentation) {\n          state.tokenizer = tokenBase;\n          return tokenBase(stream, state);\n        }\n\n        if (multiLine && stream.skipTo(\"*/\")) {\n          stream.next();\n          stream.next();\n          state.tokenizer = tokenBase;\n        } else {\n          stream.skipToEnd();\n        }\n\n        return \"comment\";\n      };\n    }\n\n    function buildStringTokenizer(quote, greedy) {\n      if (greedy == null) {\n        greedy = true;\n      }\n\n      function stringTokenizer(stream, state) {\n        var nextChar = stream.next();\n        var peekChar = stream.peek();\n        var previousChar = stream.string.charAt(stream.pos - 2);\n        var endingString = nextChar !== \"\\\\\" && peekChar === quote || nextChar === quote && previousChar !== \"\\\\\";\n\n        if (endingString) {\n          if (nextChar !== quote && greedy) {\n            stream.next();\n          }\n\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          state.tokenizer = tokenBase;\n          return \"string\";\n        } else if (nextChar === \"#\" && peekChar === \"{\") {\n          state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n          stream.next();\n          return \"operator\";\n        } else {\n          return \"string\";\n        }\n      }\n\n      return stringTokenizer;\n    }\n\n    function buildInterpolationTokenizer(currentTokenizer) {\n      return function (stream, state) {\n        if (stream.peek() === \"}\") {\n          stream.next();\n          state.tokenizer = currentTokenizer;\n          return \"operator\";\n        } else {\n          return tokenBase(stream, state);\n        }\n      };\n    }\n\n    function indent(state) {\n      if (state.indentCount == 0) {\n        state.indentCount++;\n        var lastScopeOffset = state.scopes[0].offset;\n        var currentOffset = lastScopeOffset + config.indentUnit;\n        state.scopes.unshift({\n          offset: currentOffset\n        });\n      }\n    }\n\n    function dedent(state) {\n      if (state.scopes.length == 1) return;\n      state.scopes.shift();\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); // Comment\n\n      if (stream.match(\"/*\")) {\n        state.tokenizer = comment(stream.indentation(), true);\n        return state.tokenizer(stream, state);\n      }\n\n      if (stream.match(\"//\")) {\n        state.tokenizer = comment(stream.indentation(), false);\n        return state.tokenizer(stream, state);\n      } // Interpolation\n\n\n      if (stream.match(\"#{\")) {\n        state.tokenizer = buildInterpolationTokenizer(tokenBase);\n        return \"operator\";\n      } // Strings\n\n\n      if (ch === '\"' || ch === \"'\") {\n        stream.next();\n        state.tokenizer = buildStringTokenizer(ch);\n        return \"string\";\n      }\n\n      if (!state.cursorHalf) {\n        // state.cursorHalf === 0\n        // first half i.e. before : for key-value pairs\n        // including selectors\n        if (ch === \"-\") {\n          if (stream.match(/^-\\w+-/)) {\n            return \"meta\";\n          }\n        }\n\n        if (ch === \".\") {\n          stream.next();\n\n          if (stream.match(/^[\\w-]+/)) {\n            indent(state);\n            return \"qualifier\";\n          } else if (stream.peek() === \"#\") {\n            indent(state);\n            return \"tag\";\n          }\n        }\n\n        if (ch === \"#\") {\n          stream.next(); // ID selectors\n\n          if (stream.match(/^[\\w-]+/)) {\n            indent(state);\n            return \"builtin\";\n          }\n\n          if (stream.peek() === \"#\") {\n            indent(state);\n            return \"tag\";\n          }\n        } // Variables\n\n\n        if (ch === \"$\") {\n          stream.next();\n          stream.eatWhile(/[\\w-]/);\n          return \"variable-2\";\n        } // Numbers\n\n\n        if (stream.match(/^-?[0-9\\.]+/)) return \"number\"; // Units\n\n        if (stream.match(/^(px|em|in)\\b/)) return \"unit\";\n        if (stream.match(keywordsRegexp)) return \"keyword\";\n\n        if (stream.match(/^url/) && stream.peek() === \"(\") {\n          state.tokenizer = urlTokens;\n          return \"atom\";\n        }\n\n        if (ch === \"=\") {\n          // Match shortcut mixin definition\n          if (stream.match(/^=[\\w-]+/)) {\n            indent(state);\n            return \"meta\";\n          }\n        }\n\n        if (ch === \"+\") {\n          // Match shortcut mixin definition\n          if (stream.match(/^\\+[\\w-]+/)) {\n            return \"variable-3\";\n          }\n        }\n\n        if (ch === \"@\") {\n          if (stream.match(/@extend/)) {\n            if (!stream.match(/\\s*[\\w]/)) dedent(state);\n          }\n        } // Indent Directives\n\n\n        if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n          indent(state);\n          return \"def\";\n        } // Other Directives\n\n\n        if (ch === \"@\") {\n          stream.next();\n          stream.eatWhile(/[\\w-]/);\n          return \"def\";\n        }\n\n        if (stream.eatWhile(/[\\w-]/)) {\n          if (stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/, false)) {\n            word = stream.current().toLowerCase();\n            var prop = state.prevProp + \"-\" + word;\n\n            if (propertyKeywords.hasOwnProperty(prop)) {\n              return \"property\";\n            } else if (propertyKeywords.hasOwnProperty(word)) {\n              state.prevProp = word;\n              return \"property\";\n            } else if (fontProperties.hasOwnProperty(word)) {\n              return \"property\";\n            }\n\n            return \"tag\";\n          } else if (stream.match(/ *:/, false)) {\n            indent(state);\n            state.cursorHalf = 1;\n            state.prevProp = stream.current().toLowerCase();\n            return \"property\";\n          } else if (stream.match(/ *,/, false)) {\n            return \"tag\";\n          } else {\n            indent(state);\n            return \"tag\";\n          }\n        }\n\n        if (ch === \":\") {\n          if (stream.match(pseudoElementsRegexp)) {\n            // could be a pseudo-element\n            return \"variable-3\";\n          }\n\n          stream.next();\n          state.cursorHalf = 1;\n          return \"operator\";\n        }\n      } // cursorHalf===0 ends here\n      else {\n          if (ch === \"#\") {\n            stream.next(); // Hex numbers\n\n            if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)) {\n              if (isEndLine(stream)) {\n                state.cursorHalf = 0;\n              }\n\n              return \"number\";\n            }\n          } // Numbers\n\n\n          if (stream.match(/^-?[0-9\\.]+/)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"number\";\n          } // Units\n\n\n          if (stream.match(/^(px|em|in)\\b/)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"unit\";\n          }\n\n          if (stream.match(keywordsRegexp)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"keyword\";\n          }\n\n          if (stream.match(/^url/) && stream.peek() === \"(\") {\n            state.tokenizer = urlTokens;\n\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"atom\";\n          } // Variables\n\n\n          if (ch === \"$\") {\n            stream.next();\n            stream.eatWhile(/[\\w-]/);\n\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"variable-2\";\n          } // bang character for !important, !default, etc.\n\n\n          if (ch === \"!\") {\n            stream.next();\n            state.cursorHalf = 0;\n            return stream.match(/^[\\w]+/) ? \"keyword\" : \"operator\";\n          }\n\n          if (stream.match(opRegexp)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"operator\";\n          } // attributes\n\n\n          if (stream.eatWhile(/[\\w-]/)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            word = stream.current().toLowerCase();\n\n            if (valueKeywords.hasOwnProperty(word)) {\n              return \"atom\";\n            } else if (colorKeywords.hasOwnProperty(word)) {\n              return \"keyword\";\n            } else if (propertyKeywords.hasOwnProperty(word)) {\n              state.prevProp = stream.current().toLowerCase();\n              return \"property\";\n            } else {\n              return \"tag\";\n            }\n          } //stream.eatSpace();\n\n\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n            return null;\n          }\n        } // else ends here\n\n\n      if (stream.match(opRegexp)) return \"operator\"; // If we haven't returned by now, we move 1 character\n      // and return an error\n\n      stream.next();\n      return null;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.indentCount = 0;\n      var style = state.tokenizer(stream, state);\n      var current = stream.current();\n\n      if (current === \"@return\" || current === \"}\") {\n        dedent(state);\n      }\n\n      if (style !== null) {\n        var startOfToken = stream.pos - current.length;\n        var withCurrentIndent = startOfToken + config.indentUnit * state.indentCount;\n        var newScopes = [];\n\n        for (var i = 0; i < state.scopes.length; i++) {\n          var scope = state.scopes[i];\n          if (scope.offset <= withCurrentIndent) newScopes.push(scope);\n        }\n\n        state.scopes = newScopes;\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenizer: tokenBase,\n          scopes: [{\n            offset: 0,\n            type: \"sass\"\n          }],\n          indentCount: 0,\n          cursorHalf: 0,\n          // cursor half tells us if cursor lies after (1)\n          // or before (0) colon (well... more or less)\n          definedVars: [],\n          definedMixins: []\n        };\n      },\n      token: function (stream, state) {\n        var style = tokenLexer(stream, state);\n        state.lastToken = {\n          style: style,\n          content: stream.current()\n        };\n        return style;\n      },\n      indent: function (state) {\n        return state.scopes[0].offset;\n      }\n    };\n  }, \"css\");\n  CodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/sass/sass.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","cssMode","mimeModes","propertyKeywords","colorKeywords","valueKeywords","fontProperties","tokenRegexp","words","RegExp","join","keywords","keywordsRegexp","operators","opRegexp","pseudoElementsRegexp","word","isEndLine","stream","peek","match","urlTokens","state","ch","next","tokenizer","tokenBase","eatSpace","buildStringTokenizer","comment","indentation","multiLine","sol","skipTo","skipToEnd","quote","greedy","stringTokenizer","nextChar","peekChar","previousChar","string","charAt","pos","endingString","cursorHalf","buildInterpolationTokenizer","currentTokenizer","indent","indentCount","lastScopeOffset","scopes","offset","currentOffset","indentUnit","unshift","dedent","length","shift","eatWhile","current","toLowerCase","prop","prevProp","hasOwnProperty","tokenLexer","style","startOfToken","withCurrentIndent","newScopes","i","scope","push","startState","type","definedVars","definedMixins","token","lastToken","content","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../css/css\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../css/css\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sass\", function(config) {\n  var cssMode = CodeMirror.mimeModes[\"text/css\"];\n  var propertyKeywords = cssMode.propertyKeywords || {},\n      colorKeywords = cssMode.colorKeywords || {},\n      valueKeywords = cssMode.valueKeywords || {},\n      fontProperties = cssMode.fontProperties || {};\n\n  function tokenRegexp(words) {\n    return new RegExp(\"^\" + words.join(\"|\"));\n  }\n\n  var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n  var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n\n  var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\",\n                   \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\",\"\\\\{\",\"\\\\}\",\":\"];\n  var opRegexp = tokenRegexp(operators);\n\n  var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n\n  var word;\n\n  function isEndLine(stream) {\n    return !stream.peek() || stream.match(/\\s+$/, false);\n  }\n\n  function urlTokens(stream, state) {\n    var ch = stream.peek();\n\n    if (ch === \")\") {\n      stream.next();\n      state.tokenizer = tokenBase;\n      return \"operator\";\n    } else if (ch === \"(\") {\n      stream.next();\n      stream.eatSpace();\n\n      return \"operator\";\n    } else if (ch === \"'\" || ch === '\"') {\n      state.tokenizer = buildStringTokenizer(stream.next());\n      return \"string\";\n    } else {\n      state.tokenizer = buildStringTokenizer(\")\", false);\n      return \"string\";\n    }\n  }\n  function comment(indentation, multiLine) {\n    return function(stream, state) {\n      if (stream.sol() && stream.indentation() <= indentation) {\n        state.tokenizer = tokenBase;\n        return tokenBase(stream, state);\n      }\n\n      if (multiLine && stream.skipTo(\"*/\")) {\n        stream.next();\n        stream.next();\n        state.tokenizer = tokenBase;\n      } else {\n        stream.skipToEnd();\n      }\n\n      return \"comment\";\n    };\n  }\n\n  function buildStringTokenizer(quote, greedy) {\n    if (greedy == null) { greedy = true; }\n\n    function stringTokenizer(stream, state) {\n      var nextChar = stream.next();\n      var peekChar = stream.peek();\n      var previousChar = stream.string.charAt(stream.pos-2);\n\n      var endingString = ((nextChar !== \"\\\\\" && peekChar === quote) || (nextChar === quote && previousChar !== \"\\\\\"));\n\n      if (endingString) {\n        if (nextChar !== quote && greedy) { stream.next(); }\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        state.tokenizer = tokenBase;\n        return \"string\";\n      } else if (nextChar === \"#\" && peekChar === \"{\") {\n        state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n        stream.next();\n        return \"operator\";\n      } else {\n        return \"string\";\n      }\n    }\n\n    return stringTokenizer;\n  }\n\n  function buildInterpolationTokenizer(currentTokenizer) {\n    return function(stream, state) {\n      if (stream.peek() === \"}\") {\n        stream.next();\n        state.tokenizer = currentTokenizer;\n        return \"operator\";\n      } else {\n        return tokenBase(stream, state);\n      }\n    };\n  }\n\n  function indent(state) {\n    if (state.indentCount == 0) {\n      state.indentCount++;\n      var lastScopeOffset = state.scopes[0].offset;\n      var currentOffset = lastScopeOffset + config.indentUnit;\n      state.scopes.unshift({ offset:currentOffset });\n    }\n  }\n\n  function dedent(state) {\n    if (state.scopes.length == 1) return;\n\n    state.scopes.shift();\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek();\n\n    // Comment\n    if (stream.match(\"/*\")) {\n      state.tokenizer = comment(stream.indentation(), true);\n      return state.tokenizer(stream, state);\n    }\n    if (stream.match(\"//\")) {\n      state.tokenizer = comment(stream.indentation(), false);\n      return state.tokenizer(stream, state);\n    }\n\n    // Interpolation\n    if (stream.match(\"#{\")) {\n      state.tokenizer = buildInterpolationTokenizer(tokenBase);\n      return \"operator\";\n    }\n\n    // Strings\n    if (ch === '\"' || ch === \"'\") {\n      stream.next();\n      state.tokenizer = buildStringTokenizer(ch);\n      return \"string\";\n    }\n\n    if(!state.cursorHalf){// state.cursorHalf === 0\n    // first half i.e. before : for key-value pairs\n    // including selectors\n\n      if (ch === \"-\") {\n        if (stream.match(/^-\\w+-/)) {\n          return \"meta\";\n        }\n      }\n\n      if (ch === \".\") {\n        stream.next();\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"qualifier\";\n        } else if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if (ch === \"#\") {\n        stream.next();\n        // ID selectors\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"builtin\";\n        }\n        if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"variable-2\";\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/))\n        return \"number\";\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/))\n        return \"unit\";\n\n      if (stream.match(keywordsRegexp))\n        return \"keyword\";\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        return \"atom\";\n      }\n\n      if (ch === \"=\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^=[\\w-]+/)) {\n          indent(state);\n          return \"meta\";\n        }\n      }\n\n      if (ch === \"+\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^\\+[\\w-]+/)){\n          return \"variable-3\";\n        }\n      }\n\n      if(ch === \"@\"){\n        if(stream.match(/@extend/)){\n          if(!stream.match(/\\s*[\\w]/))\n            dedent(state);\n        }\n      }\n\n\n      // Indent Directives\n      if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n        indent(state);\n        return \"def\";\n      }\n\n      // Other Directives\n      if (ch === \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"def\";\n      }\n\n      if (stream.eatWhile(/[\\w-]/)){\n        if(stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/,false)){\n          word = stream.current().toLowerCase();\n          var prop = state.prevProp + \"-\" + word;\n          if (propertyKeywords.hasOwnProperty(prop)) {\n            return \"property\";\n          } else if (propertyKeywords.hasOwnProperty(word)) {\n            state.prevProp = word;\n            return \"property\";\n          } else if (fontProperties.hasOwnProperty(word)) {\n            return \"property\";\n          }\n          return \"tag\";\n        }\n        else if(stream.match(/ *:/,false)){\n          indent(state);\n          state.cursorHalf = 1;\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        }\n        else if(stream.match(/ *,/,false)){\n          return \"tag\";\n        }\n        else{\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if(ch === \":\"){\n        if (stream.match(pseudoElementsRegexp)){ // could be a pseudo-element\n          return \"variable-3\";\n        }\n        stream.next();\n        state.cursorHalf=1;\n        return \"operator\";\n      }\n\n    } // cursorHalf===0 ends here\n    else{\n\n      if (ch === \"#\") {\n        stream.next();\n        // Hex numbers\n        if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)){\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n          return \"number\";\n        }\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"number\";\n      }\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"unit\";\n      }\n\n      if (stream.match(keywordsRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"keyword\";\n      }\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"atom\";\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"variable-2\";\n      }\n\n      // bang character for !important, !default, etc.\n      if (ch === \"!\") {\n        stream.next();\n        state.cursorHalf = 0;\n        return stream.match(/^[\\w]+/) ? \"keyword\": \"operator\";\n      }\n\n      if (stream.match(opRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"operator\";\n      }\n\n      // attributes\n      if (stream.eatWhile(/[\\w-]/)) {\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        word = stream.current().toLowerCase();\n        if (valueKeywords.hasOwnProperty(word)) {\n          return \"atom\";\n        } else if (colorKeywords.hasOwnProperty(word)) {\n          return \"keyword\";\n        } else if (propertyKeywords.hasOwnProperty(word)) {\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        } else {\n          return \"tag\";\n        }\n      }\n\n      //stream.eatSpace();\n      if (isEndLine(stream)) {\n        state.cursorHalf = 0;\n        return null;\n      }\n\n    } // else ends here\n\n    if (stream.match(opRegexp))\n      return \"operator\";\n\n    // If we haven't returned by now, we move 1 character\n    // and return an error\n    stream.next();\n    return null;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) state.indentCount = 0;\n    var style = state.tokenizer(stream, state);\n    var current = stream.current();\n\n    if (current === \"@return\" || current === \"}\"){\n      dedent(state);\n    }\n\n    if (style !== null) {\n      var startOfToken = stream.pos - current.length;\n\n      var withCurrentIndent = startOfToken + (config.indentUnit * state.indentCount);\n\n      var newScopes = [];\n\n      for (var i = 0; i < state.scopes.length; i++) {\n        var scope = state.scopes[i];\n\n        if (scope.offset <= withCurrentIndent)\n          newScopes.push(scope);\n      }\n\n      state.scopes = newScopes;\n    }\n\n\n    return style;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenizer: tokenBase,\n        scopes: [{offset: 0, type: \"sass\"}],\n        indentCount: 0,\n        cursorHalf: 0,  // cursor half tells us if cursor lies after (1)\n                        // or before (0) colon (well... more or less)\n        definedVars: [],\n        definedMixins: []\n      };\n    },\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state);\n\n      state.lastToken = { style: style, content: stream.current() };\n\n      return style;\n    },\n\n    indent: function(state) {\n      return state.scopes[0].offset;\n    }\n  };\n}, \"css\");\n\nCodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n\n});\n"]},"metadata":{},"sourceType":"script"}