{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var paramData = {\n    noEndTag: true,\n    soyState: \"param-def\"\n  };\n  var tags = {\n    \"alias\": {\n      noEndTag: true\n    },\n    \"delpackage\": {\n      noEndTag: true\n    },\n    \"namespace\": {\n      noEndTag: true,\n      soyState: \"namespace-def\"\n    },\n    \"@param\": paramData,\n    \"@param?\": paramData,\n    \"@inject\": paramData,\n    \"@inject?\": paramData,\n    \"@state\": paramData,\n    \"template\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"literal\": {},\n    \"msg\": {},\n    \"fallbackmsg\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"select\": {},\n    \"plural\": {},\n    \"let\": {\n      soyState: \"var-def\"\n    },\n    \"if\": {},\n    \"elseif\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"else\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"switch\": {},\n    \"case\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"default\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"foreach\": {\n      variableScope: true,\n      soyState: \"for-loop\"\n    },\n    \"ifempty\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"for\": {\n      variableScope: true,\n      soyState: \"for-loop\"\n    },\n    \"call\": {\n      soyState: \"templ-ref\"\n    },\n    \"param\": {\n      soyState: \"param-ref\"\n    },\n    \"print\": {\n      noEndTag: true\n    },\n    \"deltemplate\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"delcall\": {\n      soyState: \"templ-ref\"\n    },\n    \"log\": {},\n    \"element\": {\n      variableScope: true\n    }\n  };\n  var indentingTags = Object.keys(tags).filter(function (tag) {\n    return !tags[tag].noEndTag || tags[tag].reduceIndent;\n  });\n  CodeMirror.defineMode(\"soy\", function (config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {\n        name: \"text/html\",\n        multilineTagIndentFactor: 2,\n        multilineTagIndentPastTag: false\n      }),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {\n        name: \"text/javascript\",\n        statementIndent: 2 * config.indentUnit\n      })\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n\n        if (indent) return null;\n      }\n\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n\n      var result = stream.hideFirstChars(state.indent, function () {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n\n    function popcontext(state) {\n      if (!state.context) return;\n\n      if (state.context.scope) {\n        state.variables = state.context.scope;\n      }\n\n      state.context = state.context.previousContext;\n    } // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n\n\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : loose ? \"variable\" : \"variable-2 error\";\n    } // Data for an open soy tag.\n\n\n    function Context(previousContext, tag, scope) {\n      this.previousContext = previousContext;\n      this.tag = tag;\n      this.kind = null;\n      this.scope = scope;\n    }\n\n    function expression(stream, state) {\n      var match;\n\n      if (stream.match(/[[]/)) {\n        state.soyState.push(\"list-literal\");\n        state.context = new Context(state.context, \"list-literal\", state.variables);\n        state.lookupVariables = false;\n        return null;\n      } else if (stream.match(/map\\b/)) {\n        state.soyState.push(\"map-literal\");\n        return \"keyword\";\n      } else if (stream.match(/record\\b/)) {\n        state.soyState.push(\"record-literal\");\n        return \"keyword\";\n      } else if (stream.match(/([\\w]+)(?=\\()/)) {\n        return \"variable callee\";\n      } else if (match = stream.match(/^[\"']/)) {\n        state.soyState.push(\"string\");\n        state.quoteKind = match[0];\n        return \"string\";\n      } else if (stream.match(/^[(]/)) {\n        state.soyState.push(\"open-parentheses\");\n        return null;\n      } else if (stream.match(/(null|true|false)(?!\\w)/) || stream.match(/0x([0-9a-fA-F]{2,})/) || stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {\n        return \"atom\";\n      } else if (stream.match(/(\\||[+\\-*\\/%]|[=!]=|\\?:|[<>]=?)/)) {\n        // Tokenize filter, binary, null propagator, and equality operators.\n        return \"operator\";\n      } else if (match = stream.match(/^\\$([\\w]+)/)) {\n        return ref(state.variables, match[1], !state.lookupVariables);\n      } else if (match = stream.match(/^\\w+/)) {\n        return /^(?:as|and|or|not|in|if)$/.test(match[0]) ? \"keyword\" : null;\n      }\n\n      stream.next();\n      return null;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          soyState: [],\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          context: null,\n          lookupVariables: true,\n          // Is unknown variables considered an error\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          tag: state.tag,\n          // Last seen Soy tag.\n          soyState: state.soyState.concat([]),\n          variables: state.variables,\n          context: state.context,\n          indent: state.indent,\n          // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          lookupVariables: state.lookupVariables,\n          localStates: state.localStates.map(function (localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n      token: function token(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n\n            if (!state.context || !state.context.scope) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n\n              for (var match; match = paramRe.exec(current);) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n\n            return \"comment\";\n\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n\n            return \"string\";\n        }\n\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop(); // If the first character is '.', it can only be a local template.\n\n              if (match[0][0] == '.') {\n                return \"variable-2\";\n              } // Otherwise\n\n\n              return \"variable\";\n            }\n\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.soyState.pop();\n              return ref(state.variables, match[1], !state.lookupVariables);\n            }\n\n            stream.next();\n            return null;\n\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"open-parentheses\":\n            if (stream.match(/[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            return expression(stream, state);\n\n          case \"param-type\":\n            var peekChar = stream.peek();\n\n            if (\"}]=>,\".indexOf(peekChar) != -1) {\n              state.soyState.pop();\n              return null;\n            } else if (peekChar == \"[\") {\n              state.soyState.push('param-type-record');\n              return null;\n            } else if (peekChar == \"(\") {\n              state.soyState.push('param-type-template');\n              return null;\n            } else if (peekChar == \"<\") {\n              state.soyState.push('param-type-parameter');\n              return null;\n            } else if (match = stream.match(/^([\\w]+|[?])/)) {\n              return \"type\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type-record\":\n            var peekChar = stream.peek();\n\n            if (peekChar == \"]\") {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"property\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type-parameter\":\n            if (stream.match(/^[>]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/^[<,]/)) {\n              state.soyState.push('param-type');\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type-template\":\n            if (stream.match(/[>]/)) {\n              state.soyState.pop();\n              state.soyState.push('param-type');\n              return null;\n            }\n\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"for-loop\":\n            if (stream.match(/\\bin\\b/)) {\n              state.soyState.pop();\n              return \"keyword\";\n            }\n\n            if (stream.peek() == \"$\") {\n              state.soyState.push('var-def');\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"record-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"record-key\");\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"map-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"map-value\");\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"list-literal\":\n            if (stream.match(/\\]/)) {\n              state.soyState.pop();\n              state.lookupVariables = true;\n              popcontext(state);\n              return null;\n            }\n\n            if (stream.match(/\\bfor\\b/)) {\n              state.lookupVariables = true;\n              state.soyState.push('for-loop');\n              return \"keyword\";\n            }\n\n            return expression(stream, state);\n\n          case \"record-key\":\n            if (stream.match(/[\\w]+/)) {\n              return \"property\";\n            }\n\n            if (stream.match(/^[:]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"map-value\":\n            if (stream.peek() == \")\" || stream.peek() == \",\" || stream.match(/^[:)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            return expression(stream, state);\n\n          case \"import\":\n            if (stream.eat(\";\")) {\n              state.soyState.pop();\n              state.indent -= 2 * config.indentUnit;\n              return null;\n            }\n\n            if (stream.match(/\\w+(?=\\s+as)/)) {\n              return \"variable\";\n            }\n\n            if (match = stream.match(/\\w+/)) {\n              return /(from|as)/.test(match[0]) ? \"keyword\" : \"def\";\n            }\n\n            if (match = stream.match(/^[\"']/)) {\n              state.soyState.push(\"string\");\n              state.quoteKind = match[0];\n              return \"string\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"tag\":\n            var endTag = state.tag[0] == \"/\";\n            var tagName = endTag ? state.tag.substring(1) : state.tag;\n            var tag = tags[tagName];\n\n            if (stream.match(/^\\/?}/)) {\n              var selfClosed = stream.current() == \"/}\";\n\n              if (selfClosed && !endTag) {\n                popcontext(state);\n              }\n\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                state.indent -= config.indentUnit * (selfClosed || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (state.context && state.context.tag == tagName && stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.context.kind = kind;\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\", \"\");\n                }\n\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n\n              return \"attribute\";\n            }\n\n            return expression(stream, state);\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n        }\n\n        if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          state.context = new Context(state.context, \"literal\", state.variables);\n          return \"keyword\"; // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          var prevTag = state.tag;\n          state.tag = match[1];\n          var endTag = state.tag[0] == \"/\";\n          var indentingTag = !!tags[state.tag];\n          var tagName = endTag ? state.tag.substring(1) : state.tag;\n          var tag = tags[tagName];\n          if (state.tag != \"/switch\") state.indent += ((endTag || tag && tag.reduceIndent) && prevTag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.soyState.push(\"tag\");\n          var tagError = false;\n\n          if (tag) {\n            if (!endTag) {\n              if (tag.soyState) state.soyState.push(tag.soyState);\n            } // If a new tag, open a new context.\n\n\n            if (!tag.noEndTag && (indentingTag || !endTag)) {\n              state.context = new Context(state.context, state.tag, tag.variableScope ? state.variables : null); // Otherwise close the current context.\n            } else if (endTag) {\n              if (!state.context || state.context.tag != tagName) {\n                tagError = true;\n              } else if (state.context) {\n                if (state.context.kind) {\n                  state.localStates.pop();\n                  var localState = last(state.localStates);\n\n                  if (localState.mode.indent) {\n                    state.indent -= localState.mode.indent(localState.state, \"\", \"\");\n                  }\n                }\n\n                popcontext(state);\n              }\n            }\n          } else if (endTag) {\n            // Assume all tags with a closing tag are defined in the config.\n            tagError = true;\n          }\n\n          return (tagError ? \"error \" : \"\") + \"keyword\"; // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        } else if (!state.context && stream.match(/\\bimport\\b/)) {\n          state.soyState.push(\"import\");\n          state.indent += 2 * config.indentUnit;\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n      indent: function indent(state, textAfter, line) {\n        var indent = state.indent,\n            top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n\n        var localState = last(state.localStates);\n\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter, line);\n        }\n\n        return indent;\n      },\n      innerMode: function innerMode(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;else return last(state.localStates);\n      },\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", Object.keys(tags).concat([\"css\", \"debugger\"]));\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/soy/soy.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","paramData","noEndTag","soyState","tags","variableScope","reduceIndent","indentingTags","Object","keys","filter","tag","defineMode","config","textMode","getMode","modes","html","name","multilineTagIndentFactor","multilineTagIndentPastTag","attributes","text","uri","trusted_resource_uri","css","js","statementIndent","indentUnit","last","array","length","tokenUntil","stream","state","untilRegExp","sol","indent","eat","oldString","string","match","exec","substr","pos","index","result","hideFirstChars","localState","localStates","mode","token","contains","list","element","next","prepend","popcontext","context","scope","variables","previousContext","ref","loose","Context","kind","expression","push","lookupVariables","quoteKind","test","startState","scopes","copyState","concat","map","pop","skipToEnd","paramRe","current","peekChar","peek","indexOf","endTag","tagName","substring","selfClosed","prevTag","indentingTag","tagError","textAfter","line","top","Pass","innerMode","electricInput","lineComment","blockCommentStart","blockCommentEnd","blockCommentContinue","useInnerComments","fold","registerHelper","defineMIME"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,EAAkCA,OAAO,CAAC,wBAAD,CAAzC,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,EAAyB,wBAAzB,CAAD,EAAqDJ,GAArD,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACtB;;AAEA,MAAIC,SAAS,GAAG;AAAEC,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GAAhB;AACA,MAAIC,IAAI,GAAG;AACT,aAAS;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KADA;AAET,kBAAc;AAAEA,MAAAA,QAAQ,EAAE;AAAZ,KAFL;AAGT,iBAAa;AAAEA,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAHJ;AAIT,cAAUF,SAJD;AAKT,eAAWA,SALF;AAMT,eAAWA,SANF;AAOT,gBAAYA,SAPH;AAQT,cAAUA,SARD;AAST,gBAAY;AAAEE,MAAAA,QAAQ,EAAE,WAAZ;AAAyBE,MAAAA,aAAa,EAAE;AAAxC,KATH;AAUT,eAAW,EAVF;AAWT,WAAO,EAXE;AAYT,mBAAe;AAAEH,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KAZN;AAaT,cAAU,EAbD;AAcT,cAAU,EAdD;AAeT,WAAO;AAAEH,MAAAA,QAAQ,EAAE;AAAZ,KAfE;AAgBT,UAAM,EAhBG;AAiBT,cAAU;AAAED,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KAjBD;AAkBT,YAAQ;AAAEJ,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KAlBC;AAmBT,cAAU,EAnBD;AAoBT,YAAQ;AAAEJ,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KApBC;AAqBT,eAAW;AAAEJ,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KArBF;AAsBT,eAAW;AAAED,MAAAA,aAAa,EAAE,IAAjB;AAAuBF,MAAAA,QAAQ,EAAE;AAAjC,KAtBF;AAuBT,eAAW;AAAED,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA,YAAY,EAAE;AAAhC,KAvBF;AAwBT,WAAO;AAAED,MAAAA,aAAa,EAAE,IAAjB;AAAuBF,MAAAA,QAAQ,EAAE;AAAjC,KAxBE;AAyBT,YAAQ;AAAEA,MAAAA,QAAQ,EAAE;AAAZ,KAzBC;AA0BT,aAAS;AAAEA,MAAAA,QAAQ,EAAE;AAAZ,KA1BA;AA2BT,aAAS;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KA3BA;AA4BT,mBAAe;AAAEC,MAAAA,QAAQ,EAAE,WAAZ;AAAyBE,MAAAA,aAAa,EAAE;AAAxC,KA5BN;AA6BT,eAAW;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KA7BF;AA8BT,WAAO,EA9BE;AA+BT,eAAW;AAAEE,MAAAA,aAAa,EAAE;AAAjB;AA/BF,GAAX;AAkCA,MAAIE,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,CAAyB,UAASC,GAAT,EAAc;AACzD,WAAO,CAACP,IAAI,CAACO,GAAD,CAAJ,CAAUT,QAAX,IAAuBE,IAAI,CAACO,GAAD,CAAJ,CAAUL,YAAxC;AACD,GAFmB,CAApB;AAIAN,EAAAA,UAAU,CAACY,UAAX,CAAsB,KAAtB,EAA6B,UAASC,MAAT,EAAiB;AAC5C,QAAIC,QAAQ,GAAGd,UAAU,CAACe,OAAX,CAAmBF,MAAnB,EAA2B,YAA3B,CAAf;AACA,QAAIG,KAAK,GAAG;AACVC,MAAAA,IAAI,EAAEjB,UAAU,CAACe,OAAX,CAAmBF,MAAnB,EAA2B;AAACK,QAAAA,IAAI,EAAE,WAAP;AAAoBC,QAAAA,wBAAwB,EAAE,CAA9C;AAAiDC,QAAAA,yBAAyB,EAAE;AAA5E,OAA3B,CADI;AAEVC,MAAAA,UAAU,EAAEP,QAFF;AAGVQ,MAAAA,IAAI,EAAER,QAHI;AAIVS,MAAAA,GAAG,EAAET,QAJK;AAKVU,MAAAA,oBAAoB,EAAEV,QALZ;AAMVW,MAAAA,GAAG,EAAEzB,UAAU,CAACe,OAAX,CAAmBF,MAAnB,EAA2B,UAA3B,CANK;AAOVa,MAAAA,EAAE,EAAE1B,UAAU,CAACe,OAAX,CAAmBF,MAAnB,EAA2B;AAACK,QAAAA,IAAI,EAAE,iBAAP;AAA0BS,QAAAA,eAAe,EAAE,IAAId,MAAM,CAACe;AAAtD,OAA3B;AAPM,KAAZ;;AAUA,aAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,aAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,aAASC,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,WAAnC,EAAgD;AAC9C,UAAIF,MAAM,CAACG,GAAP,EAAJ,EAAkB;AAChB,aAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,KAAK,CAACG,MAApC,EAA4CA,MAAM,EAAlD,EAAsD;AACpD,cAAI,CAACJ,MAAM,CAACK,GAAP,CAAW,IAAX,CAAL,EAAuB;AACxB;;AACD,YAAID,MAAJ,EAAY,OAAO,IAAP;AACb;;AACD,UAAIE,SAAS,GAAGN,MAAM,CAACO,MAAvB;AACA,UAAIC,KAAK,GAAGN,WAAW,CAACO,IAAZ,CAAiBH,SAAS,CAACI,MAAV,CAAiBV,MAAM,CAACW,GAAxB,CAAjB,CAAZ;;AACA,UAAIH,KAAJ,EAAW;AACT;AACA;AACAR,QAAAA,MAAM,CAACO,MAAP,GAAgBD,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoBV,MAAM,CAACW,GAAP,GAAaH,KAAK,CAACI,KAAvC,CAAhB;AACD;;AACD,UAAIC,MAAM,GAAGb,MAAM,CAACc,cAAP,CAAsBb,KAAK,CAACG,MAA5B,EAAoC,YAAW;AAC1D,YAAIW,UAAU,GAAGnB,IAAI,CAACK,KAAK,CAACe,WAAP,CAArB;AACA,eAAOD,UAAU,CAACE,IAAX,CAAgBC,KAAhB,CAAsBlB,MAAtB,EAA8Be,UAAU,CAACd,KAAzC,CAAP;AACD,OAHY,CAAb;AAIAD,MAAAA,MAAM,CAACO,MAAP,GAAgBD,SAAhB;AACA,aAAOO,MAAP;AACD;;AAED,aAASM,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AAC/B,aAAOD,IAAP,EAAa;AACX,YAAIA,IAAI,CAACC,OAAL,KAAiBA,OAArB,EAA8B,OAAO,IAAP;AAC9BD,QAAAA,IAAI,GAAGA,IAAI,CAACE,IAAZ;AACD;;AACD,aAAO,KAAP;AACD;;AAED,aAASC,OAAT,CAAiBH,IAAjB,EAAuBC,OAAvB,EAAgC;AAC9B,aAAO;AACLA,QAAAA,OAAO,EAAEA,OADJ;AAELC,QAAAA,IAAI,EAAEF;AAFD,OAAP;AAID;;AAED,aAASI,UAAT,CAAoBvB,KAApB,EAA2B;AACzB,UAAI,CAACA,KAAK,CAACwB,OAAX,EAAoB;;AACpB,UAAIxB,KAAK,CAACwB,OAAN,CAAcC,KAAlB,EAAyB;AACvBzB,QAAAA,KAAK,CAAC0B,SAAN,GAAkB1B,KAAK,CAACwB,OAAN,CAAcC,KAAhC;AACD;;AACDzB,MAAAA,KAAK,CAACwB,OAAN,GAAgBxB,KAAK,CAACwB,OAAN,CAAcG,eAA9B;AACD,KA3D2C,CA6D5C;AACA;;;AACA,aAASC,GAAT,CAAaT,IAAb,EAAmBnC,IAAnB,EAAyB6C,KAAzB,EAAgC;AAC9B,aAAOX,QAAQ,CAACC,IAAD,EAAOnC,IAAP,CAAR,GAAuB,YAAvB,GAAuC6C,KAAK,GAAG,UAAH,GAAgB,kBAAnE;AACD,KAjE2C,CAmE5C;;;AACA,aAASC,OAAT,CAAiBH,eAAjB,EAAkClD,GAAlC,EAAuCgD,KAAvC,EAA8C;AAC5C,WAAKE,eAAL,GAAuBA,eAAvB;AACA,WAAKlD,GAAL,GAAWA,GAAX;AACA,WAAKsD,IAAL,GAAY,IAAZ;AACA,WAAKN,KAAL,GAAaA,KAAb;AACD;;AAED,aAASO,UAAT,CAAoBjC,MAApB,EAA4BC,KAA5B,EAAmC;AACjC,UAAIO,KAAJ;;AACA,UAAIR,MAAM,CAACQ,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACvBP,QAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,cAApB;AACAjC,QAAAA,KAAK,CAACwB,OAAN,GAAgB,IAAIM,OAAJ,CAAY9B,KAAK,CAACwB,OAAlB,EAA2B,cAA3B,EAA2CxB,KAAK,CAAC0B,SAAjD,CAAhB;AACA1B,QAAAA,KAAK,CAACkC,eAAN,GAAwB,KAAxB;AACA,eAAO,IAAP;AACD,OALD,MAKO,IAAInC,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAJ,EAA2B;AAChCP,QAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,aAApB;AACA,eAAO,SAAP;AACD,OAHM,MAGA,IAAIlC,MAAM,CAACQ,KAAP,CAAa,UAAb,CAAJ,EAA8B;AACnCP,QAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,gBAApB;AACA,eAAO,SAAP;AACD,OAHM,MAGA,IAAIlC,MAAM,CAACQ,KAAP,CAAa,eAAb,CAAJ,EAAmC;AACxC,eAAO,iBAAP;AACD,OAFM,MAEA,IAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAZ,EAAmC;AACxCP,QAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,QAApB;AACAjC,QAAAA,KAAK,CAACmC,SAAN,GAAkB5B,KAAK,CAAC,CAAD,CAAvB;AACA,eAAO,QAAP;AACD,OAJM,MAIA,IAAIR,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AAC/BP,QAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,kBAApB;AACA,eAAO,IAAP;AACD,OAHM,MAGA,IAAIlC,MAAM,CAACQ,KAAP,CAAa,yBAAb,KACPR,MAAM,CAACQ,KAAP,CAAa,qBAAb,CADO,IAEPR,MAAM,CAACQ,KAAP,CAAa,gCAAb,CAFG,EAE6C;AAClD,eAAO,MAAP;AACD,OAJM,MAIA,IAAIR,MAAM,CAACQ,KAAP,CAAa,iCAAb,CAAJ,EAAqD;AAC1D;AACA,eAAO,UAAP;AACD,OAHM,MAGA,IAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,YAAb,CAAZ,EAAwC;AAC7C,eAAOqB,GAAG,CAAC5B,KAAK,CAAC0B,SAAP,EAAkBnB,KAAK,CAAC,CAAD,CAAvB,EAA4B,CAACP,KAAK,CAACkC,eAAnC,CAAV;AACD,OAFM,MAEA,IAAI3B,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAZ,EAAkC;AACvC,eAAO,4BAA4B6B,IAA5B,CAAiC7B,KAAK,CAAC,CAAD,CAAtC,IAA6C,SAA7C,GAAyD,IAAhE;AACD;;AAEDR,MAAAA,MAAM,CAACsB,IAAP;AACA,aAAO,IAAP;AACD;;AAED,WAAO;AACLgB,MAAAA,UAAU,EAAE,sBAAW;AACrB,eAAO;AACLpE,UAAAA,QAAQ,EAAE,EADL;AAELyD,UAAAA,SAAS,EAAEJ,OAAO,CAAC,IAAD,EAAO,IAAP,CAFb;AAGLgB,UAAAA,MAAM,EAAE,IAHH;AAILnC,UAAAA,MAAM,EAAE,CAJH;AAKLgC,UAAAA,SAAS,EAAE,IALN;AAMLX,UAAAA,OAAO,EAAE,IANJ;AAOLU,UAAAA,eAAe,EAAE,IAPZ;AAOkB;AACvBnB,UAAAA,WAAW,EAAE,CAAC;AACZC,YAAAA,IAAI,EAAElC,KAAK,CAACC,IADA;AAEZiB,YAAAA,KAAK,EAAElC,UAAU,CAACuE,UAAX,CAAsBvD,KAAK,CAACC,IAA5B;AAFK,WAAD;AARR,SAAP;AAaD,OAfI;AAiBLwD,MAAAA,SAAS,EAAE,mBAASvC,KAAT,EAAgB;AACzB,eAAO;AACLvB,UAAAA,GAAG,EAAEuB,KAAK,CAACvB,GADN;AACW;AAChBR,UAAAA,QAAQ,EAAE+B,KAAK,CAAC/B,QAAN,CAAeuE,MAAf,CAAsB,EAAtB,CAFL;AAGLd,UAAAA,SAAS,EAAE1B,KAAK,CAAC0B,SAHZ;AAILF,UAAAA,OAAO,EAAExB,KAAK,CAACwB,OAJV;AAKLrB,UAAAA,MAAM,EAAEH,KAAK,CAACG,MALT;AAKiB;AACtBgC,UAAAA,SAAS,EAAEnC,KAAK,CAACmC,SANZ;AAOLD,UAAAA,eAAe,EAAElC,KAAK,CAACkC,eAPlB;AAQLnB,UAAAA,WAAW,EAAEf,KAAK,CAACe,WAAN,CAAkB0B,GAAlB,CAAsB,UAAS3B,UAAT,EAAqB;AACtD,mBAAO;AACLE,cAAAA,IAAI,EAAEF,UAAU,CAACE,IADZ;AAELhB,cAAAA,KAAK,EAAElC,UAAU,CAACyE,SAAX,CAAqBzB,UAAU,CAACE,IAAhC,EAAsCF,UAAU,CAACd,KAAjD;AAFF,aAAP;AAID,WALY;AARR,SAAP;AAeD,OAjCI;AAmCLiB,MAAAA,KAAK,EAAE,eAASlB,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAIO,KAAJ;;AAEA,gBAAQZ,IAAI,CAACK,KAAK,CAAC/B,QAAP,CAAZ;AACE,eAAK,SAAL;AACE,gBAAI8B,MAAM,CAACQ,KAAP,CAAa,UAAb,CAAJ,EAA8B;AAC5BP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACD,aAFD,MAEO;AACL3C,cAAAA,MAAM,CAAC4C,SAAP;AACD;;AACD,gBAAI,CAAC3C,KAAK,CAACwB,OAAP,IAAkB,CAACxB,KAAK,CAACwB,OAAN,CAAcC,KAArC,EAA4C;AAC1C,kBAAImB,OAAO,GAAG,oBAAd;AACA,kBAAIC,OAAO,GAAG9C,MAAM,CAAC8C,OAAP,EAAd;;AACA,mBAAK,IAAItC,KAAT,EAAiBA,KAAK,GAAGqC,OAAO,CAACpC,IAAR,CAAaqC,OAAb,CAAzB,GAAmD;AACjD7C,gBAAAA,KAAK,CAAC0B,SAAN,GAAkBJ,OAAO,CAACtB,KAAK,CAAC0B,SAAP,EAAkBnB,KAAK,CAAC,CAAD,CAAvB,CAAzB;AACD;AACF;;AACD,mBAAO,SAAP;;AAEF,eAAK,QAAL;AACE,gBAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,qBAAb,CAAZ;;AACA,gBAAI,CAACA,KAAL,EAAY;AACVR,cAAAA,MAAM,CAAC4C,SAAP;AACD,aAFD,MAEO,IAAIpC,KAAK,CAAC,CAAD,CAAL,IAAYP,KAAK,CAACmC,SAAtB,EAAiC;AACtCnC,cAAAA,KAAK,CAACmC,SAAN,GAAkB,IAAlB;AACAnC,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACD;;AACD,mBAAO,QAAP;AAxBJ;;AA2BA,YAAI,CAAC1C,KAAK,CAAC/B,QAAN,CAAe4B,MAAhB,IAA0BF,IAAI,CAACK,KAAK,CAAC/B,QAAP,CAAJ,IAAwB,SAAtD,EAAiE;AAC/D,cAAI8B,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzBP,YAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,SAApB;AACA,mBAAO,SAAP;AACD,WAHD,MAGO,IAAIlC,MAAM,CAACQ,KAAP,CAAaR,MAAM,CAACG,GAAP,KAAe,YAAf,GAA8B,YAA3C,CAAJ,EAA8D;AACnE,mBAAO,SAAP;AACD;AACF;;AAED,gBAAQP,IAAI,CAACK,KAAK,CAAC/B,QAAP,CAAZ;AACE,eAAK,WAAL;AACE,gBAAIsC,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,yBAAb,CAAZ,EAAqD;AACnDP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,KAAP;AACD;;AACD3C,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,WAAL;AACE,gBAAId,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,8BAAb,CAAZ,EAA0D;AACxDP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf,GADwD,CAExD;;AACA,kBAAInC,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,KAAe,GAAnB,EAAwB;AACtB,uBAAO,YAAP;AACD,eALuD,CAMxD;;;AACA,qBAAO,UAAP;AACD;;AACD,gBAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,YAAb,CAAZ,EAAwC;AACtCP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAOd,GAAG,CAAC5B,KAAK,CAAC0B,SAAP,EAAkBnB,KAAK,CAAC,CAAD,CAAvB,EAA4B,CAACP,KAAK,CAACkC,eAAnC,CAAV;AACD;;AAEDnC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,eAAL;AACE,gBAAId,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,eAAb,CAAZ,EAA2C;AACzCP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,UAAP;AACD;;AACD3C,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,WAAL;AACE,gBAAId,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAZ,EAAkC;AAChCP,cAAAA,KAAK,CAAC0B,SAAN,GAAkBJ,OAAO,CAACtB,KAAK,CAAC0B,SAAP,EAAkBnB,KAAK,CAAC,CAAD,CAAvB,CAAzB;AACAP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA1C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,KAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,WAAL;AACE,gBAAId,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAZ,EAAkC;AAChCP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,UAAP;AACD;;AACD3C,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,kBAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACvBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,mBAAOV,UAAU,CAACjC,MAAD,EAASC,KAAT,CAAjB;;AAEF,eAAK,YAAL;AACE,gBAAI8C,QAAQ,GAAG/C,MAAM,CAACgD,IAAP,EAAf;;AACA,gBAAI,QAAQC,OAAR,CAAgBF,QAAhB,KAA6B,CAAC,CAAlC,EAAqC;AACnC9C,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD,aAHD,MAGO,IAAII,QAAQ,IAAI,GAAhB,EAAqB;AAC1B9C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,mBAApB;AACA,qBAAO,IAAP;AACD,aAHM,MAGA,IAAIa,QAAQ,IAAI,GAAhB,EAAqB;AAC1B9C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,qBAApB;AACA,qBAAO,IAAP;AACD,aAHM,MAGA,IAAIa,QAAQ,IAAI,GAAhB,EAAqB;AAC1B9C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,sBAApB;AACA,qBAAO,IAAP;AACD,aAHM,MAGA,IAAI1B,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,cAAb,CAAZ,EAA0C;AAC/C,qBAAO,MAAP;AACD;;AACDR,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,mBAAL;AACE,gBAAIyB,QAAQ,GAAG/C,MAAM,CAACgD,IAAP,EAAf;;AACA,gBAAID,QAAQ,IAAI,GAAhB,EAAqB;AACnB9C,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,gBAAI3C,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,UAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,sBAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,gBAAI3C,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzBP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,IAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,qBAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACvBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA1C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,IAAP;AACD;;AACD,gBAAIlC,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,KAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,SAAL;AACE,gBAAId,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,YAAb,CAAZ,EAAwC;AACtCP,cAAAA,KAAK,CAAC0B,SAAN,GAAkBJ,OAAO,CAACtB,KAAK,CAAC0B,SAAP,EAAkBnB,KAAK,CAAC,CAAD,CAAvB,CAAzB;AACAP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,KAAP;AACD;;AACD3C,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,UAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAC1BP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,SAAP;AACD;;AACD,gBAAI3C,MAAM,CAACgD,IAAP,MAAiB,GAArB,EAA0B;AACxB/C,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,SAApB;AACA,qBAAO,IAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,gBAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,gBAAI3C,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,WAApB;AACAjC,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,YAApB;AACA,qBAAO,IAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,aAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,gBAAI3C,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,WAApB;AACAjC,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,WAApB;AACA,qBAAO,IAAP;AACD;;AACDlC,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,cAAL;AACE,gBAAItB,MAAM,CAACQ,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA1C,cAAAA,KAAK,CAACkC,eAAN,GAAwB,IAAxB;AACAX,cAAAA,UAAU,CAACvB,KAAD,CAAV;AACA,qBAAO,IAAP;AACD;;AACD,gBAAID,MAAM,CAACQ,KAAP,CAAa,SAAb,CAAJ,EAA6B;AAC3BP,cAAAA,KAAK,CAACkC,eAAN,GAAwB,IAAxB;AACAlC,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,UAApB;AACA,qBAAO,SAAP;AACD;;AACD,mBAAOD,UAAU,CAACjC,MAAD,EAASC,KAAT,CAAjB;;AAEF,eAAK,YAAL;AACE,gBAAID,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,qBAAO,UAAP;AACD;;AACD,gBAAIR,MAAM,CAACQ,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACxBP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD3C,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,WAAL;AACE,gBAAItB,MAAM,CAACgD,IAAP,MAAiB,GAAjB,IAAwBhD,MAAM,CAACgD,IAAP,MAAiB,GAAzC,IAAgDhD,MAAM,CAACQ,KAAP,CAAa,OAAb,CAApD,EAA2E;AACzEP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,IAAP;AACD;;AACD,mBAAOV,UAAU,CAACjC,MAAD,EAASC,KAAT,CAAjB;;AAEF,eAAK,QAAL;AACE,gBAAID,MAAM,CAACK,GAAP,CAAW,GAAX,CAAJ,EAAqB;AACnBJ,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA1C,cAAAA,KAAK,CAACG,MAAN,IAAgB,IAAIxB,MAAM,CAACe,UAA3B;AACA,qBAAO,IAAP;AACD;;AACD,gBAAIK,MAAM,CAACQ,KAAP,CAAa,cAAb,CAAJ,EAAkC;AAChC,qBAAO,UAAP;AACD;;AACD,gBAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,KAAb,CAAZ,EAAiC;AAC/B,qBAAO,YAAY6B,IAAZ,CAAiB7B,KAAK,CAAC,CAAD,CAAtB,IAA6B,SAA7B,GAAyC,KAAhD;AACD;;AACD,gBAAIA,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAZ,EAAmC;AACjCP,cAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,QAApB;AACAjC,cAAAA,KAAK,CAACmC,SAAN,GAAkB5B,KAAK,CAAC,CAAD,CAAvB;AACA,qBAAO,QAAP;AACD;;AACDR,YAAAA,MAAM,CAACsB,IAAP;AACA,mBAAO,IAAP;;AAEF,eAAK,KAAL;AACE,gBAAI4B,MAAM,GAAGjD,KAAK,CAACvB,GAAN,CAAU,CAAV,KAAgB,GAA7B;AACA,gBAAIyE,OAAO,GAAGD,MAAM,GAAGjD,KAAK,CAACvB,GAAN,CAAU0E,SAAV,CAAoB,CAApB,CAAH,GAA4BnD,KAAK,CAACvB,GAAtD;AACA,gBAAIA,GAAG,GAAGP,IAAI,CAACgF,OAAD,CAAd;;AACA,gBAAInD,MAAM,CAACQ,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,kBAAI6C,UAAU,GAAGrD,MAAM,CAAC8C,OAAP,MAAoB,IAArC;;AACA,kBAAIO,UAAU,IAAI,CAACH,MAAnB,EAA2B;AACzB1B,gBAAAA,UAAU,CAACvB,KAAD,CAAV;AACD;;AACD,kBAAIA,KAAK,CAACvB,GAAN,IAAa,WAAb,IAA4BuB,KAAK,CAACvB,GAAN,IAAa,cAA7C,EAA6D;AAC3DuB,gBAAAA,KAAK,CAAC0B,SAAN,GAAkBJ,OAAO,CAAC,IAAD,EAAO,IAAP,CAAzB;AACAtB,gBAAAA,KAAK,CAACG,MAAN,GAAe,CAAf;AACD,eAHD,MAGO;AACLH,gBAAAA,KAAK,CAACG,MAAN,IAAgBxB,MAAM,CAACe,UAAP,IACX0D,UAAU,IAAI/E,aAAa,CAAC2E,OAAd,CAAsBhD,KAAK,CAACvB,GAA5B,KAAoC,CAAC,CAAnD,GAAuD,CAAvD,GAA2D,CADhD,CAAhB;AAED;;AACDuB,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,SAAP;AACD,aAdD,MAcO,IAAI3C,MAAM,CAACQ,KAAP,CAAa,gBAAb,CAAJ,EAAoC;AACzC,kBAAIP,KAAK,CAACwB,OAAN,IAAiBxB,KAAK,CAACwB,OAAN,CAAc/C,GAAd,IAAqByE,OAAtC,IAAiDnD,MAAM,CAAC8C,OAAP,MAAoB,MAArE,KAAgFtC,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,YAAb,EAA2B,KAA3B,CAAxF,CAAJ,EAAgI;AAC9H,oBAAIwB,IAAI,GAAGxB,KAAK,CAAC,CAAD,CAAhB;AACAP,gBAAAA,KAAK,CAACwB,OAAN,CAAcO,IAAd,GAAqBA,IAArB;AACA,oBAAIf,IAAI,GAAGlC,KAAK,CAACiD,IAAD,CAAL,IAAejD,KAAK,CAACC,IAAhC;AACA,oBAAI+B,UAAU,GAAGnB,IAAI,CAACK,KAAK,CAACe,WAAP,CAArB;;AACA,oBAAID,UAAU,CAACE,IAAX,CAAgBb,MAApB,EAA4B;AAC1BH,kBAAAA,KAAK,CAACG,MAAN,IAAgBW,UAAU,CAACE,IAAX,CAAgBb,MAAhB,CAAuBW,UAAU,CAACd,KAAlC,EAAyC,EAAzC,EAA6C,EAA7C,CAAhB;AACD;;AACDA,gBAAAA,KAAK,CAACe,WAAN,CAAkBkB,IAAlB,CAAuB;AACrBjB,kBAAAA,IAAI,EAAEA,IADe;AAErBhB,kBAAAA,KAAK,EAAElC,UAAU,CAACuE,UAAX,CAAsBrB,IAAtB;AAFc,iBAAvB;AAID;;AACD,qBAAO,WAAP;AACD;;AACD,mBAAOgB,UAAU,CAACjC,MAAD,EAASC,KAAT,CAAjB;;AAEF,eAAK,SAAL;AACE,gBAAID,MAAM,CAACQ,KAAP,CAAa,mBAAb,CAAJ,EAAuC;AACrCP,cAAAA,KAAK,CAAC/B,QAAN,CAAeyE,GAAf;AACA,qBAAO,KAAKzB,KAAL,CAAWlB,MAAX,EAAmBC,KAAnB,CAAP;AACD;;AACD,mBAAOF,UAAU,CAACC,MAAD,EAASC,KAAT,EAAgB,cAAhB,CAAjB;AAlQJ;;AAqQA,YAAID,MAAM,CAACQ,KAAP,CAAa,aAAb,CAAJ,EAAiC;AAC/BP,UAAAA,KAAK,CAACG,MAAN,IAAgBxB,MAAM,CAACe,UAAvB;AACAM,UAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,SAApB;AACAjC,UAAAA,KAAK,CAACwB,OAAN,GAAgB,IAAIM,OAAJ,CAAY9B,KAAK,CAACwB,OAAlB,EAA2B,SAA3B,EAAsCxB,KAAK,CAAC0B,SAA5C,CAAhB;AACA,iBAAO,SAAP,CAJ+B,CAMjC;AACC,SAPD,MAOO,IAAInB,KAAK,GAAGR,MAAM,CAACQ,KAAP,CAAa,sCAAb,CAAZ,EAAkE;AACvE,cAAI8C,OAAO,GAAGrD,KAAK,CAACvB,GAApB;AACAuB,UAAAA,KAAK,CAACvB,GAAN,GAAY8B,KAAK,CAAC,CAAD,CAAjB;AACA,cAAI0C,MAAM,GAAGjD,KAAK,CAACvB,GAAN,CAAU,CAAV,KAAgB,GAA7B;AACA,cAAI6E,YAAY,GAAG,CAAC,CAACpF,IAAI,CAAC8B,KAAK,CAACvB,GAAP,CAAzB;AACA,cAAIyE,OAAO,GAAGD,MAAM,GAAGjD,KAAK,CAACvB,GAAN,CAAU0E,SAAV,CAAoB,CAApB,CAAH,GAA4BnD,KAAK,CAACvB,GAAtD;AACA,cAAIA,GAAG,GAAGP,IAAI,CAACgF,OAAD,CAAd;AACA,cAAIlD,KAAK,CAACvB,GAAN,IAAa,SAAjB,EACEuB,KAAK,CAACG,MAAN,IAAgB,CAAC,CAAC8C,MAAM,IAAIxE,GAAG,IAAIA,GAAG,CAACL,YAAtB,KAAuCiF,OAAO,IAAI,QAAlD,GAA6D,CAA7D,GAAiE,CAAlE,IAAuE1E,MAAM,CAACe,UAA9F;AAEFM,UAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,KAApB;AACA,cAAIsB,QAAQ,GAAG,KAAf;;AACA,cAAI9E,GAAJ,EAAS;AACP,gBAAI,CAACwE,MAAL,EAAa;AACX,kBAAIxE,GAAG,CAACR,QAAR,EAAkB+B,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoBxD,GAAG,CAACR,QAAxB;AACnB,aAHM,CAIP;;;AACA,gBAAI,CAACQ,GAAG,CAACT,QAAL,KAAkBsF,YAAY,IAAI,CAACL,MAAnC,CAAJ,EAAgD;AAC9CjD,cAAAA,KAAK,CAACwB,OAAN,GAAgB,IAAIM,OAAJ,CAAY9B,KAAK,CAACwB,OAAlB,EAA2BxB,KAAK,CAACvB,GAAjC,EAAsCA,GAAG,CAACN,aAAJ,GAAoB6B,KAAK,CAAC0B,SAA1B,GAAsC,IAA5E,CAAhB,CAD8C,CAEhD;AACC,aAHD,MAGO,IAAIuB,MAAJ,EAAY;AACjB,kBAAI,CAACjD,KAAK,CAACwB,OAAP,IAAkBxB,KAAK,CAACwB,OAAN,CAAc/C,GAAd,IAAqByE,OAA3C,EAAoD;AAClDK,gBAAAA,QAAQ,GAAG,IAAX;AACD,eAFD,MAEO,IAAIvD,KAAK,CAACwB,OAAV,EAAmB;AACxB,oBAAIxB,KAAK,CAACwB,OAAN,CAAcO,IAAlB,EAAwB;AACtB/B,kBAAAA,KAAK,CAACe,WAAN,CAAkB2B,GAAlB;AACA,sBAAI5B,UAAU,GAAGnB,IAAI,CAACK,KAAK,CAACe,WAAP,CAArB;;AACA,sBAAID,UAAU,CAACE,IAAX,CAAgBb,MAApB,EAA4B;AAC1BH,oBAAAA,KAAK,CAACG,MAAN,IAAgBW,UAAU,CAACE,IAAX,CAAgBb,MAAhB,CAAuBW,UAAU,CAACd,KAAlC,EAAyC,EAAzC,EAA6C,EAA7C,CAAhB;AACD;AACF;;AACDuB,gBAAAA,UAAU,CAACvB,KAAD,CAAV;AACD;AACF;AACF,WAtBD,MAsBO,IAAIiD,MAAJ,EAAY;AACjB;AACAM,YAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,iBAAO,CAACA,QAAQ,GAAG,QAAH,GAAc,EAAvB,IAA6B,SAApC,CAtCuE,CAwCzE;AACC,SAzCM,MAyCA,IAAIxD,MAAM,CAACK,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1BJ,UAAAA,KAAK,CAACvB,GAAN,GAAY,OAAZ;AACAuB,UAAAA,KAAK,CAACG,MAAN,IAAgB,IAAIxB,MAAM,CAACe,UAA3B;AACAM,UAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,KAApB;AACA,iBAAO,SAAP;AACD,SALM,MAKA,IAAI,CAACjC,KAAK,CAACwB,OAAP,IAAkBzB,MAAM,CAACQ,KAAP,CAAa,YAAb,CAAtB,EAAkD;AACvDP,UAAAA,KAAK,CAAC/B,QAAN,CAAegE,IAAf,CAAoB,QAApB;AACAjC,UAAAA,KAAK,CAACG,MAAN,IAAgB,IAAIxB,MAAM,CAACe,UAA3B;AACA,iBAAO,SAAP;AACD;;AAED,eAAOI,UAAU,CAACC,MAAD,EAASC,KAAT,EAAgB,iBAAhB,CAAjB;AACD,OA3YI;AA6YLG,MAAAA,MAAM,EAAE,gBAASH,KAAT,EAAgBwD,SAAhB,EAA2BC,IAA3B,EAAiC;AACvC,YAAItD,MAAM,GAAGH,KAAK,CAACG,MAAnB;AAAA,YAA2BuD,GAAG,GAAG/D,IAAI,CAACK,KAAK,CAAC/B,QAAP,CAArC;AACA,YAAIyF,GAAG,IAAI,SAAX,EAAsB,OAAO5F,UAAU,CAAC6F,IAAlB;;AAEtB,YAAID,GAAG,IAAI,SAAX,EAAsB;AACpB,cAAI,gBAAgBtB,IAAhB,CAAqBoB,SAArB,CAAJ,EAAqCrD,MAAM,IAAIxB,MAAM,CAACe,UAAjB;AACtC,SAFD,MAEO;AACL,cAAI,mCAAmC0C,IAAnC,CAAwCoB,SAAxC,CAAJ,EAAwD,OAAO,CAAP;AACxD,cAAI,8CAA8CpB,IAA9C,CAAmDoB,SAAnD,CAAJ,EAAmErD,MAAM,IAAIxB,MAAM,CAACe,UAAjB;AACnE,cAAIM,KAAK,CAACvB,GAAN,IAAa,QAAb,IAAyB,sBAAsB2D,IAAtB,CAA2BoB,SAA3B,CAA7B,EAAoErD,MAAM,IAAIxB,MAAM,CAACe,UAAjB;AACpE,cAAI,gBAAgB0C,IAAhB,CAAqBoB,SAArB,CAAJ,EAAqCrD,MAAM,IAAIxB,MAAM,CAACe,UAAjB;AACtC;;AACD,YAAIoB,UAAU,GAAGnB,IAAI,CAACK,KAAK,CAACe,WAAP,CAArB;;AACA,YAAIZ,MAAM,IAAIW,UAAU,CAACE,IAAX,CAAgBb,MAA9B,EAAsC;AACpCA,UAAAA,MAAM,IAAIW,UAAU,CAACE,IAAX,CAAgBb,MAAhB,CAAuBW,UAAU,CAACd,KAAlC,EAAyCwD,SAAzC,EAAoDC,IAApD,CAAV;AACD;;AACD,eAAOtD,MAAP;AACD,OA9ZI;AAgaLyD,MAAAA,SAAS,EAAE,mBAAS5D,KAAT,EAAgB;AACzB,YAAIA,KAAK,CAAC/B,QAAN,CAAe4B,MAAf,IAAyBF,IAAI,CAACK,KAAK,CAAC/B,QAAP,CAAJ,IAAwB,SAArD,EAAgE,OAAO,IAAP,CAAhE,KACK,OAAO0B,IAAI,CAACK,KAAK,CAACe,WAAP,CAAX;AACN,OAnaI;AAqaL8C,MAAAA,aAAa,EAAE,wGAraV;AAsaLC,MAAAA,WAAW,EAAE,IAtaR;AAuaLC,MAAAA,iBAAiB,EAAE,IAvad;AAwaLC,MAAAA,eAAe,EAAE,IAxaZ;AAyaLC,MAAAA,oBAAoB,EAAE,KAzajB;AA0aLC,MAAAA,gBAAgB,EAAE,KA1ab;AA2aLC,MAAAA,IAAI,EAAE;AA3aD,KAAP;AA6aD,GA/hBD,EA+hBG,WA/hBH;AAiiBArG,EAAAA,UAAU,CAACsG,cAAX,CAA0B,WAA1B,EAAuC,KAAvC,EAA8C,OAA9C;AAEAtG,EAAAA,UAAU,CAACsG,cAAX,CAA0B,WAA1B,EAAuC,KAAvC,EAA8C9F,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBsE,MAAlB,CAC1C,CAAC,KAAD,EAAQ,UAAR,CAD0C,CAA9C;AAGA1E,EAAAA,UAAU,CAACuG,UAAX,CAAsB,YAAtB,EAAoC,KAApC;AACD,CAxlBD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var paramData = { noEndTag: true, soyState: \"param-def\" };\n  var tags = {\n    \"alias\": { noEndTag: true },\n    \"delpackage\": { noEndTag: true },\n    \"namespace\": { noEndTag: true, soyState: \"namespace-def\" },\n    \"@param\": paramData,\n    \"@param?\": paramData,\n    \"@inject\": paramData,\n    \"@inject?\": paramData,\n    \"@state\": paramData,\n    \"template\": { soyState: \"templ-def\", variableScope: true},\n    \"literal\": { },\n    \"msg\": {},\n    \"fallbackmsg\": { noEndTag: true, reduceIndent: true},\n    \"select\": {},\n    \"plural\": {},\n    \"let\": { soyState: \"var-def\" },\n    \"if\": {},\n    \"elseif\": { noEndTag: true, reduceIndent: true},\n    \"else\": { noEndTag: true, reduceIndent: true},\n    \"switch\": {},\n    \"case\": { noEndTag: true, reduceIndent: true},\n    \"default\": { noEndTag: true, reduceIndent: true},\n    \"foreach\": { variableScope: true, soyState: \"for-loop\" },\n    \"ifempty\": { noEndTag: true, reduceIndent: true},\n    \"for\": { variableScope: true, soyState: \"for-loop\" },\n    \"call\": { soyState: \"templ-ref\" },\n    \"param\": { soyState: \"param-ref\"},\n    \"print\": { noEndTag: true },\n    \"deltemplate\": { soyState: \"templ-def\", variableScope: true},\n    \"delcall\": { soyState: \"templ-ref\" },\n    \"log\": {},\n    \"element\": { variableScope: true },\n  };\n\n  var indentingTags = Object.keys(tags).filter(function(tag) {\n    return !tags[tag].noEndTag || tags[tag].reduceIndent;\n  });\n\n  CodeMirror.defineMode(\"soy\", function(config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {name: \"text/html\", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false}),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {name: \"text/javascript\", statementIndent: 2 * config.indentUnit})\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n        if (indent) return null;\n      }\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n      var result = stream.hideFirstChars(state.indent, function() {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n\n    function popcontext(state) {\n      if (!state.context) return;\n      if (state.context.scope) {\n        state.variables = state.context.scope;\n      }\n      state.context = state.context.previousContext;\n    }\n\n    // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : (loose ? \"variable\" : \"variable-2 error\");\n    }\n\n    // Data for an open soy tag.\n    function Context(previousContext, tag, scope) {\n      this.previousContext = previousContext;\n      this.tag = tag;\n      this.kind = null;\n      this.scope = scope;\n    }\n\n    function expression(stream, state) {\n      var match;\n      if (stream.match(/[[]/)) {\n        state.soyState.push(\"list-literal\");\n        state.context = new Context(state.context, \"list-literal\", state.variables);\n        state.lookupVariables = false;\n        return null;\n      } else if (stream.match(/map\\b/)) {\n        state.soyState.push(\"map-literal\");\n        return \"keyword\";\n      } else if (stream.match(/record\\b/)) {\n        state.soyState.push(\"record-literal\");\n        return \"keyword\";\n      } else if (stream.match(/([\\w]+)(?=\\()/)) {\n        return \"variable callee\";\n      } else if (match = stream.match(/^[\"']/)) {\n        state.soyState.push(\"string\");\n        state.quoteKind = match[0];\n        return \"string\";\n      } else if (stream.match(/^[(]/)) {\n        state.soyState.push(\"open-parentheses\");\n        return null;\n      } else if (stream.match(/(null|true|false)(?!\\w)/) ||\n          stream.match(/0x([0-9a-fA-F]{2,})/) ||\n          stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {\n        return \"atom\";\n      } else if (stream.match(/(\\||[+\\-*\\/%]|[=!]=|\\?:|[<>]=?)/)) {\n        // Tokenize filter, binary, null propagator, and equality operators.\n        return \"operator\";\n      } else if (match = stream.match(/^\\$([\\w]+)/)) {\n        return ref(state.variables, match[1], !state.lookupVariables);\n      } else if (match = stream.match(/^\\w+/)) {\n        return /^(?:as|and|or|not|in|if)$/.test(match[0]) ? \"keyword\" : null;\n      }\n\n      stream.next();\n      return null;\n    }\n\n    return {\n      startState: function() {\n        return {\n          soyState: [],\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          context: null,\n          lookupVariables: true, // Is unknown variables considered an error\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          tag: state.tag, // Last seen Soy tag.\n          soyState: state.soyState.concat([]),\n          variables: state.variables,\n          context: state.context,\n          indent: state.indent, // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          lookupVariables: state.lookupVariables,\n          localStates: state.localStates.map(function(localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n\n      token: function(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n            if (!state.context || !state.context.scope) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n              for (var match; (match = paramRe.exec(current)); ) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n            return \"comment\";\n\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n            return \"string\";\n        }\n\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop();\n              // If the first character is '.', it can only be a local template.\n              if (match[0][0] == '.') {\n                return \"variable-2\"\n              }\n              // Otherwise\n              return \"variable\";\n            }\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.soyState.pop();\n              return ref(state.variables, match[1], !state.lookupVariables);\n            }\n\n            stream.next();\n            return null;\n\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n            stream.next();\n            return null;\n\n          case \"open-parentheses\":\n            if (stream.match(/[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            return expression(stream, state);\n\n          case \"param-type\":\n            var peekChar = stream.peek();\n            if (\"}]=>,\".indexOf(peekChar) != -1) {\n              state.soyState.pop();\n              return null;\n            } else if (peekChar == \"[\") {\n              state.soyState.push('param-type-record');\n              return null;\n            } else if (peekChar == \"(\") {\n              state.soyState.push('param-type-template');\n              return null;\n            } else if (peekChar == \"<\") {\n              state.soyState.push('param-type-parameter');\n              return null;\n            } else if (match = stream.match(/^([\\w]+|[?])/)) {\n              return \"type\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-type-record\":\n            var peekChar = stream.peek();\n            if (peekChar == \"]\") {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"property\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-type-parameter\":\n            if (stream.match(/^[>]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/^[<,]/)) {\n              state.soyState.push('param-type');\n              return null;\n            }\n            stream.next();\n            return null;\n\n          case \"param-type-template\":\n            if (stream.match(/[>]/)) {\n              state.soyState.pop();\n              state.soyState.push('param-type');\n              return null;\n            }\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"for-loop\":\n            if (stream.match(/\\bin\\b/)) {\n              state.soyState.pop();\n              return \"keyword\";\n            }\n            if (stream.peek() == \"$\") {\n              state.soyState.push('var-def');\n              return null;\n            }\n            stream.next();\n            return null;\n\n          case \"record-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\")\n              state.soyState.push(\"record-key\")\n              return null;\n            }\n            stream.next()\n            return null;\n\n          case \"map-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\")\n              state.soyState.push(\"map-value\")\n              return null;\n            }\n            stream.next()\n            return null;\n\n          case \"list-literal\":\n            if (stream.match(/\\]/)) {\n              state.soyState.pop();\n              state.lookupVariables = true;\n              popcontext(state);\n              return null;\n            }\n            if (stream.match(/\\bfor\\b/)) {\n              state.lookupVariables = true;\n              state.soyState.push('for-loop');\n              return \"keyword\";\n            }\n            return expression(stream, state);\n\n          case \"record-key\":\n            if (stream.match(/[\\w]+/)) {\n              return \"property\";\n            }\n            if (stream.match(/^[:]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            stream.next();\n            return null;\n\n          case \"map-value\":\n            if (stream.peek() == \")\" || stream.peek() == \",\" || stream.match(/^[:)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            return expression(stream, state);\n\n          case \"import\":\n            if (stream.eat(\";\")) {\n              state.soyState.pop();\n              state.indent -= 2 * config.indentUnit;\n              return null;\n            }\n            if (stream.match(/\\w+(?=\\s+as)/)) {\n              return \"variable\";\n            }\n            if (match = stream.match(/\\w+/)) {\n              return /(from|as)/.test(match[0]) ? \"keyword\" : \"def\";\n            }\n            if (match = stream.match(/^[\"']/)) {\n              state.soyState.push(\"string\");\n              state.quoteKind = match[0];\n              return \"string\";\n            }\n            stream.next();\n            return null;\n\n          case \"tag\":\n            var endTag = state.tag[0] == \"/\";\n            var tagName = endTag ? state.tag.substring(1) : state.tag;\n            var tag = tags[tagName];\n            if (stream.match(/^\\/?}/)) {\n              var selfClosed = stream.current() == \"/}\";\n              if (selfClosed && !endTag) {\n                popcontext(state);\n              }\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                state.indent -= config.indentUnit *\n                    (selfClosed || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (state.context && state.context.tag == tagName && stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.context.kind = kind;\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\", \"\");\n                }\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n              return \"attribute\";\n            }\n            return expression(stream, state);\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n        }\n\n        if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          state.context = new Context(state.context, \"literal\", state.variables);\n          return \"keyword\";\n\n        // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          var prevTag = state.tag;\n          state.tag = match[1];\n          var endTag = state.tag[0] == \"/\";\n          var indentingTag = !!tags[state.tag];\n          var tagName = endTag ? state.tag.substring(1) : state.tag;\n          var tag = tags[tagName];\n          if (state.tag != \"/switch\")\n            state.indent += ((endTag || tag && tag.reduceIndent) && prevTag != \"switch\" ? 1 : 2) * config.indentUnit;\n\n          state.soyState.push(\"tag\");\n          var tagError = false;\n          if (tag) {\n            if (!endTag) {\n              if (tag.soyState) state.soyState.push(tag.soyState);\n            }\n            // If a new tag, open a new context.\n            if (!tag.noEndTag && (indentingTag || !endTag)) {\n              state.context = new Context(state.context, state.tag, tag.variableScope ? state.variables : null);\n            // Otherwise close the current context.\n            } else if (endTag) {\n              if (!state.context || state.context.tag != tagName) {\n                tagError = true;\n              } else if (state.context) {\n                if (state.context.kind) {\n                  state.localStates.pop();\n                  var localState = last(state.localStates);\n                  if (localState.mode.indent) {\n                    state.indent -= localState.mode.indent(localState.state, \"\", \"\");\n                  }\n                }\n                popcontext(state);\n              }\n            }\n          } else if (endTag) {\n            // Assume all tags with a closing tag are defined in the config.\n            tagError = true;\n          }\n          return (tagError ? \"error \" : \"\") + \"keyword\";\n\n        // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        } else if (!state.context && stream.match(/\\bimport\\b/)) {\n          state.soyState.push(\"import\");\n          state.indent += 2 * config.indentUnit;\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n\n      indent: function(state, textAfter, line) {\n        var indent = state.indent, top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n        var localState = last(state.localStates);\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter, line);\n        }\n        return indent;\n      },\n\n      innerMode: function(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;\n        else return last(state.localStates);\n      },\n\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", Object.keys(tags).concat(\n      [\"css\", \"debugger\"]));\n\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});\n"]},"metadata":{},"sourceType":"script"}