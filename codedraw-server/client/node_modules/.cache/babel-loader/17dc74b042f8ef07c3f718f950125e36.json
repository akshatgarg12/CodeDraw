{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"julia\", function (config, parserConf) {\n    function wordRegexp(words, end) {\n      if (typeof end === \"undefined\") {\n        end = \"\\\\b\";\n      }\n\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n    }\n\n    var octChar = \"\\\\\\\\[0-7]{1,3}\";\n    var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n    var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n    var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n    var operators = parserConf.operators || wordRegexp([\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n    var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n    var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n    var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\n    var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n    var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\n    var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n    CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n    var openers = wordRegexp(openersList);\n    var closers = wordRegexp(closersList);\n    var keywords = wordRegexp(keywordsList);\n    var builtins = wordRegexp(builtinsList);\n    var macro = /^@[_A-Za-z][\\w]*/;\n    var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n    var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n    function inArray(state) {\n      return state.nestedArrays > 0;\n    }\n\n    function inGenerator(state) {\n      return state.nestedGenerators > 0;\n    }\n\n    function currentScope(state, n) {\n      if (typeof n === \"undefined\") {\n        n = 0;\n      }\n\n      if (state.scopes.length <= n) {\n        return null;\n      }\n\n      return state.scopes[state.scopes.length - (n + 1)];\n    } // tokenizers\n\n\n    function tokenBase(stream, state) {\n      // Handle multiline comments\n      if (stream.match(/^#=/, false)) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      } // Handle scope changes\n\n\n      var leavingExpr = state.leavingExpr;\n\n      if (stream.sol()) {\n        leavingExpr = false;\n      }\n\n      state.leavingExpr = false;\n\n      if (leavingExpr) {\n        if (stream.match(/^'+/)) {\n          return \"operator\";\n        }\n      }\n\n      if (stream.match(/\\.{4,}/)) {\n        return \"error\";\n      } else if (stream.match(/\\.{1,3}/)) {\n        return \"operator\";\n      }\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle single line comments\n\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch === '[') {\n        state.scopes.push('[');\n        state.nestedArrays++;\n      }\n\n      if (ch === '(') {\n        state.scopes.push('(');\n        state.nestedGenerators++;\n      }\n\n      if (inArray(state) && ch === ']') {\n        while (state.scopes.length && currentScope(state) !== \"[\") {\n          state.scopes.pop();\n        }\n\n        state.scopes.pop();\n        state.nestedArrays--;\n        state.leavingExpr = true;\n      }\n\n      if (inGenerator(state) && ch === ')') {\n        while (state.scopes.length && currentScope(state) !== \"(\") {\n          state.scopes.pop();\n        }\n\n        state.scopes.pop();\n        state.nestedGenerators--;\n        state.leavingExpr = true;\n      }\n\n      if (inArray(state)) {\n        if (state.lastToken == \"end\" && stream.match(/^:/)) {\n          return \"operator\";\n        }\n\n        if (stream.match(/^end/)) {\n          return \"number\";\n        }\n      }\n\n      var match;\n\n      if (match = stream.match(openers, false)) {\n        state.scopes.push(match[0]);\n      }\n\n      if (stream.match(closers, false)) {\n        state.scopes.pop();\n      } // Handle type annotations\n\n\n      if (stream.match(/^::(?![:\\$])/)) {\n        state.tokenize = tokenAnnotation;\n        return state.tokenize(stream, state);\n      } // Handle symbols\n\n\n      if (!leavingExpr && stream.match(symbol) || stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n        return \"builtin\";\n      } // Handle parametric types\n      //if (stream.match(/^{[^}]*}(?=\\()/)) {\n      //  return \"builtin\";\n      //}\n      // Handle operators and Delimiters\n\n\n      if (stream.match(operators)) {\n        return \"operator\";\n      } // Handle Number Literals\n\n\n      if (stream.match(/^\\.?\\d/, false)) {\n        var imMatcher = RegExp(/^im\\b/);\n        var numberLiteral = false;\n\n        if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n          numberLiteral = true;\n        } // Integers\n\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) {\n          numberLiteral = true;\n        } // Hex\n\n\n        if (stream.match(/^0b[01_]+/i)) {\n          numberLiteral = true;\n        } // Binary\n\n\n        if (stream.match(/^0o[0-7_]+/i)) {\n          numberLiteral = true;\n        } // Octal\n        // Floats\n\n\n        if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n          numberLiteral = true;\n        }\n\n        if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n          numberLiteral = true;\n        } // Decimal\n\n\n        if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n        }\n      } // Handle Chars\n\n\n      if (stream.match(/^'/)) {\n        state.tokenize = tokenChar;\n        return state.tokenize(stream, state);\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n\n      if (stream.match(macro)) {\n        return \"meta\";\n      }\n\n      if (stream.match(delimiters)) {\n        return null;\n      }\n\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n\n      if (stream.match(builtins)) {\n        return \"builtin\";\n      }\n\n      var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n      if (stream.match(identifiers)) {\n        if (isDefinition) {\n          if (stream.peek() === '.') {\n            state.isDefinition = true;\n            return \"variable\";\n          }\n\n          state.isDefinition = false;\n          return \"def\";\n        }\n\n        if (stream.match(/^({[^}]*})*\\(/, false)) {\n          state.tokenize = tokenCallOrDef;\n          return state.tokenize(stream, state);\n        }\n\n        state.leavingExpr = true;\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return \"error\";\n    }\n\n    function tokenCallOrDef(stream, state) {\n      var match = stream.match(/^(\\(\\s*)/);\n\n      if (match) {\n        if (state.firstParenPos < 0) state.firstParenPos = state.scopes.length;\n        state.scopes.push('(');\n        state.charsAdvanced += match[1].length;\n      }\n\n      if (currentScope(state) == '(' && stream.match(/^\\)/)) {\n        state.scopes.pop();\n        state.charsAdvanced += 1;\n\n        if (state.scopes.length <= state.firstParenPos) {\n          var isDefinition = stream.match(/^(\\s*where\\s+[^\\s=]+)*\\s*?=(?!=)/, false);\n          stream.backUp(state.charsAdvanced);\n          state.firstParenPos = -1;\n          state.charsAdvanced = 0;\n          state.tokenize = tokenBase;\n          if (isDefinition) return \"def\";\n          return \"builtin\";\n        }\n      } // Unfortunately javascript does not support multiline strings, so we have\n      // to undo anything done upto here if a function call or definition splits\n      // over two or more lines.\n\n\n      if (stream.match(/^$/g, false)) {\n        stream.backUp(state.charsAdvanced);\n\n        while (state.scopes.length > state.firstParenPos) state.scopes.pop();\n\n        state.firstParenPos = -1;\n        state.charsAdvanced = 0;\n        state.tokenize = tokenBase;\n        return \"builtin\";\n      }\n\n      state.charsAdvanced += stream.match(/^([^()]*)/)[1].length;\n      return state.tokenize(stream, state);\n    }\n\n    function tokenAnnotation(stream, state) {\n      stream.match(/.*?(?=,|;|{|}|\\(|\\)|=|$|\\s)/);\n\n      if (stream.match(/^{/)) {\n        state.nestedParameters++;\n      } else if (stream.match(/^}/) && state.nestedParameters > 0) {\n        state.nestedParameters--;\n      }\n\n      if (state.nestedParameters > 0) {\n        stream.match(/.*?(?={|})/) || stream.next();\n      } else if (state.nestedParameters == 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return \"builtin\";\n    }\n\n    function tokenComment(stream, state) {\n      if (stream.match(/^#=/)) {\n        state.nestedComments++;\n      }\n\n      if (!stream.match(/.*?(?=(#=|=#))/)) {\n        stream.skipToEnd();\n      }\n\n      if (stream.match(/^=#/)) {\n        state.nestedComments--;\n        if (state.nestedComments == 0) state.tokenize = tokenBase;\n      }\n\n      return \"comment\";\n    }\n\n    function tokenChar(stream, state) {\n      var isChar = false,\n          match;\n\n      if (stream.match(chars)) {\n        isChar = true;\n      } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n        var value = parseInt(match[1], 16);\n\n        if (value <= 55295 || value >= 57344) {\n          // (U+0,U+D7FF), (U+E000,U+FFFF)\n          isChar = true;\n          stream.next();\n        }\n      } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n        var value = parseInt(match[1], 16);\n\n        if (value <= 1114111) {\n          // U+10FFFF\n          isChar = true;\n          stream.next();\n        }\n      }\n\n      if (isChar) {\n        state.leavingExpr = true;\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n\n      if (!stream.match(/^[^']+(?=')/)) {\n        stream.skipToEnd();\n      }\n\n      if (stream.match(/^'/)) {\n        state.tokenize = tokenBase;\n      }\n\n      return \"error\";\n    }\n\n    function tokenStringFactory(delimiter) {\n      if (delimiter.substr(-3) === '\"\"\"') {\n        delimiter = '\"\"\"';\n      } else if (delimiter.substr(-1) === '\"') {\n        delimiter = '\"';\n      }\n\n      function tokenString(stream, state) {\n        if (stream.eat('\\\\')) {\n          stream.next();\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          state.leavingExpr = true;\n          return \"string\";\n        } else {\n          stream.eat(/[`\"]/);\n        }\n\n        stream.eatWhile(/[^\\\\`\"]/);\n        return \"string\";\n      }\n\n      return tokenString;\n    }\n\n    var external = {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          scopes: [],\n          lastToken: null,\n          leavingExpr: false,\n          isDefinition: false,\n          nestedArrays: 0,\n          nestedComments: 0,\n          nestedGenerators: 0,\n          nestedParameters: 0,\n          charsAdvanced: 0,\n          firstParenPos: -1\n        };\n      },\n      token: function (stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        if (current && style) {\n          state.lastToken = current;\n        }\n\n        return style;\n      },\n      indent: function (state, textAfter) {\n        var delta = 0;\n\n        if (textAfter === ']' || textAfter === ')' || /^end/.test(textAfter) || /^else/.test(textAfter) || /^catch/.test(textAfter) || /^elseif/.test(textAfter) || /^finally/.test(textAfter)) {\n          delta = -1;\n        }\n\n        return (state.scopes.length + delta) * config.indentUnit;\n      },\n      electricInput: /\\b(end|else|catch|finally)\\b/,\n      blockCommentStart: \"#=\",\n      blockCommentEnd: \"=#\",\n      lineComment: \"#\",\n      closeBrackets: \"()[]{}\\\"\\\"\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/julia/julia.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConf","wordRegexp","words","end","RegExp","join","octChar","hexChar","sChar","uChar","operators","delimiters","identifiers","chars","openersList","closersList","keywordsList","builtinsList","registerHelper","concat","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","inArray","state","nestedArrays","inGenerator","nestedGenerators","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","pop","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","tokenStringFactory","current","isDefinition","tokenCallOrDef","next","firstParenPos","charsAdvanced","backUp","nestedParameters","nestedComments","isChar","value","parseInt","delimiter","substr","tokenString","eat","eatWhile","external","startState","token","style","indent","textAfter","delta","test","indentUnit","electricInput","blockCommentStart","blockCommentEnd","lineComment","closeBrackets","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"julia\", function(config, parserConf) {\n  function wordRegexp(words, end) {\n    if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n  }\n\n  var octChar = \"\\\\\\\\[0-7]{1,3}\";\n  var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n  var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n  var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\n  var operators = parserConf.operators || wordRegexp([\n        \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\",\n        \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n        \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n        \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n        \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n        \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n  var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n  var identifiers = parserConf.identifiers ||\n        /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\n  var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\n  var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n        \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n        \"finally\", \"catch\", \"do\"];\n\n  var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\n  var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n        \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n        \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n        \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n        \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n        \"bitstype\"];\n\n  var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n\n  var openers = wordRegexp(openersList);\n  var closers = wordRegexp(closersList);\n  var keywords = wordRegexp(keywordsList);\n  var builtins = wordRegexp(builtinsList);\n\n  var macro = /^@[_A-Za-z][\\w]*/;\n  var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n  var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n  function inArray(state) {\n    return (state.nestedArrays > 0);\n  }\n\n  function inGenerator(state) {\n    return (state.nestedGenerators > 0);\n  }\n\n  function currentScope(state, n) {\n    if (typeof(n) === \"undefined\") { n = 0; }\n    if (state.scopes.length <= n) {\n      return null;\n    }\n    return state.scopes[state.scopes.length - (n + 1)];\n  }\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle multiline comments\n    if (stream.match(/^#=/, false)) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle scope changes\n    var leavingExpr = state.leavingExpr;\n    if (stream.sol()) {\n      leavingExpr = false;\n    }\n    state.leavingExpr = false;\n\n    if (leavingExpr) {\n      if (stream.match(/^'+/)) {\n        return \"operator\";\n      }\n    }\n\n    if (stream.match(/\\.{4,}/)) {\n      return \"error\";\n    } else if (stream.match(/\\.{1,3}/)) {\n      return \"operator\";\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle single line comments\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch === '[') {\n      state.scopes.push('[');\n      state.nestedArrays++;\n    }\n\n    if (ch === '(') {\n      state.scopes.push('(');\n      state.nestedGenerators++;\n    }\n\n    if (inArray(state) && ch === ']') {\n      while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedArrays--;\n      state.leavingExpr = true;\n    }\n\n    if (inGenerator(state) && ch === ')') {\n      while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedGenerators--;\n      state.leavingExpr = true;\n    }\n\n    if (inArray(state)) {\n      if (state.lastToken == \"end\" && stream.match(/^:/)) {\n        return \"operator\";\n      }\n      if (stream.match(/^end/)) {\n        return \"number\";\n      }\n    }\n\n    var match;\n    if (match = stream.match(openers, false)) {\n      state.scopes.push(match[0]);\n    }\n\n    if (stream.match(closers, false)) {\n      state.scopes.pop();\n    }\n\n    // Handle type annotations\n    if (stream.match(/^::(?![:\\$])/)) {\n      state.tokenize = tokenAnnotation;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle symbols\n    if (!leavingExpr && stream.match(symbol) ||\n        stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n      return \"builtin\";\n    }\n\n    // Handle parametric types\n    //if (stream.match(/^{[^}]*}(?=\\()/)) {\n    //  return \"builtin\";\n    //}\n\n    // Handle operators and Delimiters\n    if (stream.match(operators)) {\n      return \"operator\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^\\.?\\d/, false)) {\n      var imMatcher = RegExp(/^im\\b/);\n      var numberLiteral = false;\n      if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n      // Integers\n      if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n      if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n      if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n      // Floats\n      if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n      if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n      if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n      }\n    }\n\n    // Handle Chars\n    if (stream.match(/^'/)) {\n      state.tokenize = tokenChar;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(macro)) {\n      return \"meta\";\n    }\n\n    if (stream.match(delimiters)) {\n      return null;\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(builtins)) {\n      return \"builtin\";\n    }\n\n    var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n                       state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n                       state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n    if (stream.match(identifiers)) {\n      if (isDefinition) {\n        if (stream.peek() === '.') {\n          state.isDefinition = true;\n          return \"variable\";\n        }\n        state.isDefinition = false;\n        return \"def\";\n      }\n      if (stream.match(/^({[^}]*})*\\(/, false)) {\n        state.tokenize = tokenCallOrDef;\n        return state.tokenize(stream, state);\n      }\n      state.leavingExpr = true;\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n  }\n\n  function tokenCallOrDef(stream, state) {\n    var match = stream.match(/^(\\(\\s*)/);\n    if (match) {\n      if (state.firstParenPos < 0)\n        state.firstParenPos = state.scopes.length;\n      state.scopes.push('(');\n      state.charsAdvanced += match[1].length;\n    }\n    if (currentScope(state) == '(' && stream.match(/^\\)/)) {\n      state.scopes.pop();\n      state.charsAdvanced += 1;\n      if (state.scopes.length <= state.firstParenPos) {\n        var isDefinition = stream.match(/^(\\s*where\\s+[^\\s=]+)*\\s*?=(?!=)/, false);\n        stream.backUp(state.charsAdvanced);\n        state.firstParenPos = -1;\n        state.charsAdvanced = 0;\n        state.tokenize = tokenBase;\n        if (isDefinition)\n          return \"def\";\n        return \"builtin\";\n      }\n    }\n    // Unfortunately javascript does not support multiline strings, so we have\n    // to undo anything done upto here if a function call or definition splits\n    // over two or more lines.\n    if (stream.match(/^$/g, false)) {\n      stream.backUp(state.charsAdvanced);\n      while (state.scopes.length > state.firstParenPos)\n        state.scopes.pop();\n      state.firstParenPos = -1;\n      state.charsAdvanced = 0;\n      state.tokenize = tokenBase;\n      return \"builtin\";\n    }\n    state.charsAdvanced += stream.match(/^([^()]*)/)[1].length;\n    return state.tokenize(stream, state);\n  }\n\n  function tokenAnnotation(stream, state) {\n    stream.match(/.*?(?=,|;|{|}|\\(|\\)|=|$|\\s)/);\n    if (stream.match(/^{/)) {\n      state.nestedParameters++;\n    } else if (stream.match(/^}/) && state.nestedParameters > 0) {\n      state.nestedParameters--;\n    }\n    if (state.nestedParameters > 0) {\n      stream.match(/.*?(?={|})/) || stream.next();\n    } else if (state.nestedParameters == 0) {\n      state.tokenize = tokenBase;\n    }\n    return \"builtin\";\n  }\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^#=/)) {\n      state.nestedComments++;\n    }\n    if (!stream.match(/.*?(?=(#=|=#))/)) {\n      stream.skipToEnd();\n    }\n    if (stream.match(/^=#/)) {\n      state.nestedComments--;\n      if (state.nestedComments == 0)\n        state.tokenize = tokenBase;\n    }\n    return \"comment\";\n  }\n\n  function tokenChar(stream, state) {\n    var isChar = false, match;\n    if (stream.match(chars)) {\n      isChar = true;\n    } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n        isChar = true;\n        stream.next();\n      }\n    } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 1114111) { // U+10FFFF\n        isChar = true;\n        stream.next();\n      }\n    }\n    if (isChar) {\n      state.leavingExpr = true;\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n    if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n    if (stream.match(/^'/)) { state.tokenize = tokenBase; }\n    return \"error\";\n  }\n\n  function tokenStringFactory(delimiter) {\n    if (delimiter.substr(-3) === '\"\"\"') {\n      delimiter = '\"\"\"';\n    } else if (delimiter.substr(-1) === '\"') {\n      delimiter = '\"';\n    }\n    function tokenString(stream, state) {\n      if (stream.eat('\\\\')) {\n        stream.next();\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        state.leavingExpr = true;\n        return \"string\";\n      } else {\n        stream.eat(/[`\"]/);\n      }\n      stream.eatWhile(/[^\\\\`\"]/);\n      return \"string\";\n    }\n    return tokenString;\n  }\n\n  var external = {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [],\n        lastToken: null,\n        leavingExpr: false,\n        isDefinition: false,\n        nestedArrays: 0,\n        nestedComments: 0,\n        nestedGenerators: 0,\n        nestedParameters: 0,\n        charsAdvanced: 0,\n        firstParenPos: -1\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      if (current && style) {\n        state.lastToken = current;\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var delta = 0;\n      if ( textAfter === ']' || textAfter === ')' || /^end/.test(textAfter) ||\n           /^else/.test(textAfter) || /^catch/.test(textAfter) || /^elseif/.test(textAfter) ||\n           /^finally/.test(textAfter) ) {\n        delta = -1;\n      }\n      return (state.scopes.length + delta) * config.indentUnit;\n    },\n\n    electricInput: /\\b(end|else|catch|finally)\\b/,\n    blockCommentStart: \"#=\",\n    blockCommentEnd: \"=#\",\n    lineComment: \"#\",\n    closeBrackets: \"()[]{}\\\"\\\"\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n\nCodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n\n});\n"]},"metadata":{},"sourceType":"script"}