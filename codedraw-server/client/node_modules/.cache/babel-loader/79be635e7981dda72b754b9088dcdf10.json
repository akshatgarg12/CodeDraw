{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatibility with old, cumbersome config system)\n\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n    var myKeywords = commonKeywords,\n        myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n    if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins); // tokenizers\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\";\n      if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset) pushPyScope(state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null; // Handle Comments\n\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^[\\d_]+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++) if (stream.match(operators[i])) return \"operator\";\n\n      if (stream.match(delimiters)) return \"punctuation\";\n      if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n      if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n      if (stream.match(builtins)) return \"builtin\";\n      if (stream.match(/^(self|cls)\\b/)) return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return inFormat ? null : ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function (stream, state) {\n          var inner = tokenBaseInner(stream, state, true);\n\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1);\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n            }\n          }\n\n          return inner;\n        };\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0);\n            if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop();\n\n      state.scopes.push({\n        offset: top(state).offset + conf.indentUnit,\n        type: \"py\",\n        align: null\n      });\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1;\n      state.scopes.push({\n        offset: state.indent + hangingIndent,\n        type: type,\n        align: align\n      });\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle decorators\n\n      if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n      if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n      if (current == \"pass\" || current == \"return\") state.dedent += 1;\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\") pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n        delimiter_index = \"])}\".indexOf(current);\n\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent;else return ERRORCLASS;\n        }\n      }\n\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function (basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{\n            offset: basecolumn || 0,\n            type: \"py\",\n            align: null\n          }],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n      token: function (stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n        if (stream.eol() && state.lambda) state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n        var scope = top(state),\n            closing = scope.type == textAfter.charAt(0);\n        if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent : 0);\n      },\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function (str) {\n    return str.split(\" \");\n  };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n  });\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw/node_modules/@uiw/react-codemirror/node_modules/codemirror/mode/python/python.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","top","state","scopes","length","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","extra_keywords","undefined","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","external","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACtB;;AAEA,WAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,WAAO,IAAIC,MAAJ,CAAW,QAAQD,KAAK,CAACE,IAAN,CAAW,KAAX,CAAR,GAA4B,OAAvC,CAAP;AACD;;AAED,MAAIC,aAAa,GAAGJ,UAAU,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,CAAD,CAA9B;AACA,MAAIK,cAAc,GAAG,CAAC,IAAD,EAAO,QAAP,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,UAAnC,EACC,KADD,EACQ,KADR,EACe,MADf,EACuB,MADvB,EAC+B,QAD/B,EACyC,SADzC,EAEC,KAFD,EAEQ,MAFR,EAEgB,QAFhB,EAE0B,IAF1B,EAEgC,QAFhC,EAGC,QAHD,EAGW,MAHX,EAGmB,OAHnB,EAG4B,QAH5B,EAIC,KAJD,EAIQ,OAJR,EAIiB,MAJjB,EAIyB,OAJzB,EAIkC,IAJlC,CAArB;AAKA,MAAIC,cAAc,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,WAArC,EAAkD,UAAlD,EAA8D,KAA9D,EACC,aADD,EACgB,SADhB,EAC2B,SAD3B,EACsC,SADtC,EACiD,MADjD,EACyD,KADzD,EACgE,QADhE,EAEC,WAFD,EAEc,MAFd,EAEsB,QAFtB,EAEgC,OAFhC,EAEyC,QAFzC,EAEmD,WAFnD,EAGC,SAHD,EAGY,SAHZ,EAGuB,SAHvB,EAGkC,MAHlC,EAG0C,MAH1C,EAGkD,KAHlD,EAGyD,IAHzD,EAIC,OAJD,EAIU,KAJV,EAIiB,YAJjB,EAI+B,YAJ/B,EAI6C,MAJ7C,EAIqD,KAJrD,EAKC,MALD,EAKS,QALT,EAKmB,KALnB,EAK0B,KAL1B,EAKiC,YALjC,EAK+C,KAL/C,EAKsD,MALtD,EAMC,QAND,EAMW,KANX,EAMkB,MANlB,EAM0B,KAN1B,EAMiC,KANjC,EAMwC,UANxC,EAMoD,OANpD,EAOC,MAPD,EAOS,UAPT,EAOqB,OAPrB,EAO8B,KAP9B,EAOqC,SAPrC,EAOgD,OAPhD,EAQC,QARD,EAQW,cARX,EAQ2B,KAR3B,EAQkC,KARlC,EAQyC,OARzC,EAQkD,OARlD,EASC,MATD,EASS,MATT,EASiB,KATjB,EASwB,YATxB,EASsC,gBATtC,EAUC,UAVD,EAUa,WAVb,CAArB;AAWAP,EAAAA,UAAU,CAACQ,cAAX,CAA0B,WAA1B,EAAuC,QAAvC,EAAiDF,cAAc,CAACG,MAAf,CAAsBF,cAAtB,CAAjD;;AAEA,WAASG,GAAT,CAAaC,KAAb,EAAoB;AAClB,WAAOA,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAAnC,CAAP;AACD;;AAEDb,EAAAA,UAAU,CAACc,UAAX,CAAsB,QAAtB,EAAgC,UAASC,IAAT,EAAeC,UAAf,EAA2B;AACzD,QAAIC,UAAU,GAAG,OAAjB;AAEA,QAAIC,UAAU,GAAGF,UAAU,CAACE,UAAX,IAAyBF,UAAU,CAACG,gBAApC,IAAwD,2BAAzE,CAHyD,CAIzD;;AACA,QAAIC,SAAS,GAAG,CAACJ,UAAU,CAACK,eAAZ,EAA6BL,UAAU,CAACM,eAAxC,EAAyDN,UAAU,CAACO,gBAApE,EAAsFP,UAAU,CAACQ,gBAAjG,EACCR,UAAU,CAACI,SAAX,IAAwB,wDADzB,CAAhB;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACP,MAA9B,EAAsCY,CAAC,EAAvC,EAA2C,IAAI,CAACL,SAAS,CAACK,CAAD,CAAd,EAAmBL,SAAS,CAACM,MAAV,CAAiBD,CAAC,EAAlB,EAAsB,CAAtB;;AAE9D,QAAIE,aAAa,GAAGX,UAAU,CAACW,aAAX,IAA4BZ,IAAI,CAACa,UAArD;AAEA,QAAIC,UAAU,GAAGvB,cAAjB;AAAA,QAAiCwB,UAAU,GAAGvB,cAA9C;AACA,QAAIS,UAAU,CAACe,cAAX,IAA6BC,SAAjC,EACEH,UAAU,GAAGA,UAAU,CAACpB,MAAX,CAAkBO,UAAU,CAACe,cAA7B,CAAb;AAEF,QAAIf,UAAU,CAACiB,cAAX,IAA6BD,SAAjC,EACEF,UAAU,GAAGA,UAAU,CAACrB,MAAX,CAAkBO,UAAU,CAACiB,cAA7B,CAAb;AAEF,QAAIC,GAAG,GAAG,EAAElB,UAAU,CAACmB,OAAX,IAAsBC,MAAM,CAACpB,UAAU,CAACmB,OAAZ,CAAN,GAA6B,CAArD,CAAV;;AACA,QAAID,GAAJ,EAAS;AACP;AACA,UAAIG,WAAW,GAAGrB,UAAU,CAACqB,WAAX,IAAyB,mDAA3C;AACAR,MAAAA,UAAU,GAAGA,UAAU,CAACpB,MAAX,CAAkB,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,EAA8B,MAA9B,EAAsC,OAAtC,EAA+C,OAA/C,CAAlB,CAAb;AACAqB,MAAAA,UAAU,GAAGA,UAAU,CAACrB,MAAX,CAAkB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,OAA3B,CAAlB,CAAb;AACA,UAAI6B,cAAc,GAAG,IAAInC,MAAJ,CAAW,0CAAX,EAAuD,GAAvD,CAArB;AACD,KAND,MAMO;AACL,UAAIkC,WAAW,GAAGrB,UAAU,CAACqB,WAAX,IAAyB,yBAA3C;AACAR,MAAAA,UAAU,GAAGA,UAAU,CAACpB,MAAX,CAAkB,CAAC,MAAD,EAAS,OAAT,CAAlB,CAAb;AACAqB,MAAAA,UAAU,GAAGA,UAAU,CAACrB,MAAX,CAAkB,CAAC,OAAD,EAAU,YAAV,EAAwB,QAAxB,EAAkC,KAAlC,EAAyC,QAAzC,EAAmD,UAAnD,EACC,MADD,EACS,QADT,EACmB,MADnB,EAC2B,WAD3B,EACwC,QADxC,EACkD,QADlD,EAEC,QAFD,EAEW,SAFX,EAEsB,QAFtB,EAEgC,OAFhC,EAEyC,MAFzC,EAEiD,MAFjD,CAAlB,CAAb;AAGA,UAAI6B,cAAc,GAAG,IAAInC,MAAJ,CAAW,0CAAX,EAAuD,GAAvD,CAArB;AACD;;AACD,QAAIoC,QAAQ,GAAGtC,UAAU,CAAC4B,UAAD,CAAzB;AACA,QAAIW,QAAQ,GAAGvC,UAAU,CAAC6B,UAAD,CAAzB,CAlCyD,CAoCzD;;AACA,aAASW,SAAT,CAAmBC,MAAnB,EAA2B/B,KAA3B,EAAkC;AAChC,UAAIgC,GAAG,GAAGD,MAAM,CAACC,GAAP,MAAgBhC,KAAK,CAACiC,SAAN,IAAmB,IAA7C;AACA,UAAID,GAAJ,EAAShC,KAAK,CAACkC,MAAN,GAAeH,MAAM,CAACI,WAAP,EAAf,CAFuB,CAGhC;;AACA,UAAIH,GAAG,IAAIjC,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmB,IAA9B,EAAoC;AAClC,YAAIC,WAAW,GAAGtC,GAAG,CAACC,KAAD,CAAH,CAAWsC,MAA7B;;AACA,YAAIP,MAAM,CAACQ,QAAP,EAAJ,EAAuB;AACrB,cAAIC,UAAU,GAAGT,MAAM,CAACI,WAAP,EAAjB;AACA,cAAIK,UAAU,GAAGH,WAAjB,EACEI,WAAW,CAACzC,KAAD,CAAX,CADF,KAEK,IAAIwC,UAAU,GAAGH,WAAb,IAA4BK,MAAM,CAACX,MAAD,EAAS/B,KAAT,CAAlC,IAAqD+B,MAAM,CAACY,IAAP,MAAiB,GAA1E,EACH3C,KAAK,CAAC4C,UAAN,GAAmB,IAAnB;AACF,iBAAO,IAAP;AACD,SAPD,MAOO;AACL,cAAIC,KAAK,GAAGC,cAAc,CAACf,MAAD,EAAS/B,KAAT,CAA1B;AACA,cAAIqC,WAAW,GAAG,CAAd,IAAmBK,MAAM,CAACX,MAAD,EAAS/B,KAAT,CAA7B,EACE6C,KAAK,IAAI,MAAMvC,UAAf;AACF,iBAAOuC,KAAP;AACD;AACF;;AACD,aAAOC,cAAc,CAACf,MAAD,EAAS/B,KAAT,CAArB;AACD;;AAED,aAAS8C,cAAT,CAAwBf,MAAxB,EAAgC/B,KAAhC,EAAuC+C,QAAvC,EAAiD;AAC/C,UAAIhB,MAAM,CAACQ,QAAP,EAAJ,EAAuB,OAAO,IAAP,CADwB,CAG/C;;AACA,UAAI,CAACQ,QAAD,IAAahB,MAAM,CAACiB,KAAP,CAAa,MAAb,CAAjB,EAAuC,OAAO,SAAP,CAJQ,CAM/C;;AACA,UAAIjB,MAAM,CAACiB,KAAP,CAAa,UAAb,EAAyB,KAAzB,CAAJ,EAAqC;AACnC,YAAIC,YAAY,GAAG,KAAnB,CADmC,CAEnC;;AACA,YAAIlB,MAAM,CAACiB,KAAP,CAAa,6BAAb,CAAJ,EAAiD;AAAEC,UAAAA,YAAY,GAAG,IAAf;AAAsB;;AACzE,YAAIlB,MAAM,CAACiB,KAAP,CAAa,cAAb,CAAJ,EAAkC;AAAEC,UAAAA,YAAY,GAAG,IAAf;AAAsB;;AAC1D,YAAIlB,MAAM,CAACiB,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAAEC,UAAAA,YAAY,GAAG,IAAf;AAAsB;;AACpD,YAAIA,YAAJ,EAAkB;AAChB;AACAlB,UAAAA,MAAM,CAACmB,GAAP,CAAW,IAAX;AACA,iBAAO,QAAP;AACD,SAVkC,CAWnC;;;AACA,YAAIC,UAAU,GAAG,KAAjB,CAZmC,CAanC;;AACA,YAAIpB,MAAM,CAACiB,KAAP,CAAa,gBAAb,CAAJ,EAAoCG,UAAU,GAAG,IAAb,CAdD,CAenC;;AACA,YAAIpB,MAAM,CAACiB,KAAP,CAAa,YAAb,CAAJ,EAAgCG,UAAU,GAAG,IAAb,CAhBG,CAiBnC;;AACA,YAAIpB,MAAM,CAACiB,KAAP,CAAa,aAAb,CAAJ,EAAiCG,UAAU,GAAG,IAAb,CAlBE,CAmBnC;;AACA,YAAIpB,MAAM,CAACiB,KAAP,CAAa,+BAAb,CAAJ,EAAmD;AACjD;AACAjB,UAAAA,MAAM,CAACmB,GAAP,CAAW,IAAX,EAFiD,CAGjD;;AACAC,UAAAA,UAAU,GAAG,IAAb;AACD,SAzBkC,CA0BnC;;;AACA,YAAIpB,MAAM,CAACiB,KAAP,CAAa,cAAb,CAAJ,EAAkCG,UAAU,GAAG,IAAb;;AAClC,YAAIA,UAAJ,EAAgB;AACd;AACApB,UAAAA,MAAM,CAACmB,GAAP,CAAW,IAAX;AACA,iBAAO,QAAP;AACD;AACF,OAxC8C,CA0C/C;;;AACA,UAAInB,MAAM,CAACiB,KAAP,CAAarB,cAAb,CAAJ,EAAkC;AAChC,YAAIyB,WAAW,GAAGrB,MAAM,CAACsB,OAAP,GAAiBC,WAAjB,GAA+BC,OAA/B,CAAuC,GAAvC,MAAgD,CAAC,CAAnE;;AACA,YAAI,CAACH,WAAL,EAAkB;AAChBpD,UAAAA,KAAK,CAACwD,QAAN,GAAiBC,kBAAkB,CAAC1B,MAAM,CAACsB,OAAP,EAAD,EAAmBrD,KAAK,CAACwD,QAAzB,CAAnC;AACA,iBAAOxD,KAAK,CAACwD,QAAN,CAAezB,MAAf,EAAuB/B,KAAvB,CAAP;AACD,SAHD,MAGO;AACLA,UAAAA,KAAK,CAACwD,QAAN,GAAiBE,mBAAmB,CAAC3B,MAAM,CAACsB,OAAP,EAAD,EAAmBrD,KAAK,CAACwD,QAAzB,CAApC;AACA,iBAAOxD,KAAK,CAACwD,QAAN,CAAezB,MAAf,EAAuB/B,KAAvB,CAAP;AACD;AACF;;AAED,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACP,MAA9B,EAAsCY,CAAC,EAAvC,EACE,IAAIiB,MAAM,CAACiB,KAAP,CAAavC,SAAS,CAACK,CAAD,CAAtB,CAAJ,EAAgC,OAAO,UAAP;;AAElC,UAAIiB,MAAM,CAACiB,KAAP,CAAazC,UAAb,CAAJ,EAA8B,OAAO,aAAP;AAE9B,UAAIP,KAAK,CAACiC,SAAN,IAAmB,GAAnB,IAA0BF,MAAM,CAACiB,KAAP,CAAatB,WAAb,CAA9B,EACE,OAAO,UAAP;AAEF,UAAIK,MAAM,CAACiB,KAAP,CAAapB,QAAb,KAA0BG,MAAM,CAACiB,KAAP,CAAatD,aAAb,CAA9B,EACE,OAAO,SAAP;AAEF,UAAIqC,MAAM,CAACiB,KAAP,CAAanB,QAAb,CAAJ,EACE,OAAO,SAAP;AAEF,UAAIE,MAAM,CAACiB,KAAP,CAAa,eAAb,CAAJ,EACE,OAAO,YAAP;;AAEF,UAAIjB,MAAM,CAACiB,KAAP,CAAatB,WAAb,CAAJ,EAA+B;AAC7B,YAAI1B,KAAK,CAACiC,SAAN,IAAmB,KAAnB,IAA4BjC,KAAK,CAACiC,SAAN,IAAmB,OAAnD,EACE,OAAO,KAAP;AACF,eAAO,UAAP;AACD,OA3E8C,CA6E/C;;;AACAF,MAAAA,MAAM,CAAC4B,IAAP;AACA,aAAOZ,QAAQ,GAAG,IAAH,GAASzC,UAAxB;AACD;;AAED,aAASoD,mBAAT,CAA6BE,SAA7B,EAAwCC,UAAxC,EAAoD;AAClD,aAAO,OAAON,OAAP,CAAeK,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBR,WAApB,EAAf,KAAqD,CAA5D,EACEM,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,CAAjB,CAAZ;;AAEF,UAAIC,UAAU,GAAGJ,SAAS,CAAC1D,MAAV,IAAoB,CAArC;AACA,UAAI+D,QAAQ,GAAG,QAAf;;AAEA,eAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,eAAO,UAASpC,MAAT,EAAiB/B,KAAjB,EAAwB;AAC7B,cAAIoE,KAAK,GAAGtB,cAAc,CAACf,MAAD,EAAS/B,KAAT,EAAgB,IAAhB,CAA1B;;AACA,cAAIoE,KAAK,IAAI,aAAb,EAA4B;AAC1B,gBAAIrC,MAAM,CAACsB,OAAP,MAAoB,GAAxB,EAA6B;AAC3BrD,cAAAA,KAAK,CAACwD,QAAN,GAAiBU,eAAe,CAACC,KAAK,GAAG,CAAT,CAAhC;AACD,aAFD,MAEO,IAAIpC,MAAM,CAACsB,OAAP,MAAoB,GAAxB,EAA6B;AAClC,kBAAIc,KAAK,GAAG,CAAZ,EAAenE,KAAK,CAACwD,QAAN,GAAiBU,eAAe,CAACC,KAAK,GAAG,CAAT,CAAhC,CAAf,KACKnE,KAAK,CAACwD,QAAN,GAAiBa,WAAjB;AACN;AACF;;AACD,iBAAOD,KAAP;AACD,SAXD;AAYD;;AAED,eAASC,WAAT,CAAqBtC,MAArB,EAA6B/B,KAA7B,EAAoC;AAClC,eAAO,CAAC+B,MAAM,CAACuC,GAAP,EAAR,EAAsB;AACpBvC,UAAAA,MAAM,CAACwC,QAAP,CAAgB,aAAhB;;AACA,cAAIxC,MAAM,CAACmB,GAAP,CAAW,IAAX,CAAJ,EAAsB;AACpBnB,YAAAA,MAAM,CAAC4B,IAAP;AACA,gBAAIK,UAAU,IAAIjC,MAAM,CAACuC,GAAP,EAAlB,EACE,OAAOL,QAAP;AACH,WAJD,MAIO,IAAIlC,MAAM,CAACiB,KAAP,CAAaY,SAAb,CAAJ,EAA6B;AAClC5D,YAAAA,KAAK,CAACwD,QAAN,GAAiBK,UAAjB;AACA,mBAAOI,QAAP;AACD,WAHM,MAGA,IAAIlC,MAAM,CAACiB,KAAP,CAAa,IAAb,CAAJ,EAAwB;AAC7B;AACA,mBAAOiB,QAAP;AACD,WAHM,MAGA,IAAIlC,MAAM,CAACiB,KAAP,CAAa,GAAb,EAAkB,KAAlB,CAAJ,EAA8B;AACnC;AACAhD,YAAAA,KAAK,CAACwD,QAAN,GAAiBU,eAAe,CAAC,CAAD,CAAhC;AACA,gBAAInC,MAAM,CAACsB,OAAP,EAAJ,EAAsB,OAAOY,QAAP,CAAtB,KACK,OAAOjE,KAAK,CAACwD,QAAN,CAAezB,MAAf,EAAuB/B,KAAvB,CAAP;AACN,WALM,MAKA,IAAI+B,MAAM,CAACiB,KAAP,CAAa,IAAb,CAAJ,EAAwB;AAC7B,mBAAOiB,QAAP;AACD,WAFM,MAEA,IAAIlC,MAAM,CAACiB,KAAP,CAAa,GAAb,CAAJ,EAAuB;AAC5B;AACA,mBAAO1C,UAAP;AACD,WAHM,MAGA;AACLyB,YAAAA,MAAM,CAACmB,GAAP,CAAW,MAAX;AACD;AACF;;AACD,YAAIc,UAAJ,EAAgB;AACd,cAAI3D,UAAU,CAACmE,sBAAf,EACE,OAAOlE,UAAP,CADF,KAGEN,KAAK,CAACwD,QAAN,GAAiBK,UAAjB;AACH;;AACD,eAAOI,QAAP;AACD;;AACDI,MAAAA,WAAW,CAACI,QAAZ,GAAuB,IAAvB;AACA,aAAOJ,WAAP;AACD;;AAED,aAASZ,kBAAT,CAA4BG,SAA5B,EAAuCC,UAAvC,EAAmD;AACjD,aAAO,OAAON,OAAP,CAAeK,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBR,WAApB,EAAf,KAAqD,CAA5D,EACEM,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,CAAjB,CAAZ;;AAEF,UAAIC,UAAU,GAAGJ,SAAS,CAAC1D,MAAV,IAAoB,CAArC;AACA,UAAI+D,QAAQ,GAAG,QAAf;;AAEA,eAASI,WAAT,CAAqBtC,MAArB,EAA6B/B,KAA7B,EAAoC;AAClC,eAAO,CAAC+B,MAAM,CAACuC,GAAP,EAAR,EAAsB;AACpBvC,UAAAA,MAAM,CAACwC,QAAP,CAAgB,SAAhB;;AACA,cAAIxC,MAAM,CAACmB,GAAP,CAAW,IAAX,CAAJ,EAAsB;AACpBnB,YAAAA,MAAM,CAAC4B,IAAP;AACA,gBAAIK,UAAU,IAAIjC,MAAM,CAACuC,GAAP,EAAlB,EACE,OAAOL,QAAP;AACH,WAJD,MAIO,IAAIlC,MAAM,CAACiB,KAAP,CAAaY,SAAb,CAAJ,EAA6B;AAClC5D,YAAAA,KAAK,CAACwD,QAAN,GAAiBK,UAAjB;AACA,mBAAOI,QAAP;AACD,WAHM,MAGA;AACLlC,YAAAA,MAAM,CAACmB,GAAP,CAAW,MAAX;AACD;AACF;;AACD,YAAIc,UAAJ,EAAgB;AACd,cAAI3D,UAAU,CAACmE,sBAAf,EACE,OAAOlE,UAAP,CADF,KAGEN,KAAK,CAACwD,QAAN,GAAiBK,UAAjB;AACH;;AACD,eAAOI,QAAP;AACD;;AACDI,MAAAA,WAAW,CAACI,QAAZ,GAAuB,IAAvB;AACA,aAAOJ,WAAP;AACD;;AAED,aAAS5B,WAAT,CAAqBzC,KAArB,EAA4B;AAC1B,aAAOD,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmB,IAA1B,EAAgCpC,KAAK,CAACC,MAAN,CAAayE,GAAb;;AAChC1E,MAAAA,KAAK,CAACC,MAAN,CAAa0E,IAAb,CAAkB;AAACrC,QAAAA,MAAM,EAAEvC,GAAG,CAACC,KAAD,CAAH,CAAWsC,MAAX,GAAoBlC,IAAI,CAACa,UAAlC;AACCmB,QAAAA,IAAI,EAAE,IADP;AAECwC,QAAAA,KAAK,EAAE;AAFR,OAAlB;AAGD;;AAED,aAASC,gBAAT,CAA0B9C,MAA1B,EAAkC/B,KAAlC,EAAyCoC,IAAzC,EAA+C;AAC7C,UAAIwC,KAAK,GAAG7C,MAAM,CAACiB,KAAP,CAAa,qBAAb,EAAoC,KAApC,IAA6C,IAA7C,GAAoDjB,MAAM,CAAC+C,MAAP,KAAkB,CAAlF;AACA9E,MAAAA,KAAK,CAACC,MAAN,CAAa0E,IAAb,CAAkB;AAACrC,QAAAA,MAAM,EAAEtC,KAAK,CAACkC,MAAN,GAAelB,aAAxB;AACCoB,QAAAA,IAAI,EAAEA,IADP;AAECwC,QAAAA,KAAK,EAAEA;AAFR,OAAlB;AAGD;;AAED,aAASlC,MAAT,CAAgBX,MAAhB,EAAwB/B,KAAxB,EAA+B;AAC7B,UAAI+E,QAAQ,GAAGhD,MAAM,CAACI,WAAP,EAAf;;AACA,aAAOnC,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAAtB,IAA2BH,GAAG,CAACC,KAAD,CAAH,CAAWsC,MAAX,GAAoByC,QAAtD,EAAgE;AAC9D,YAAIhF,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmB,IAAvB,EAA6B,OAAO,IAAP;AAC7BpC,QAAAA,KAAK,CAACC,MAAN,CAAayE,GAAb;AACD;;AACD,aAAO3E,GAAG,CAACC,KAAD,CAAH,CAAWsC,MAAX,IAAqByC,QAA5B;AACD;;AAED,aAASC,UAAT,CAAoBjD,MAApB,EAA4B/B,KAA5B,EAAmC;AACjC,UAAI+B,MAAM,CAACC,GAAP,EAAJ,EAAkBhC,KAAK,CAACiF,eAAN,GAAwB,IAAxB;AAElB,UAAIpC,KAAK,GAAG7C,KAAK,CAACwD,QAAN,CAAezB,MAAf,EAAuB/B,KAAvB,CAAZ;AACA,UAAIqD,OAAO,GAAGtB,MAAM,CAACsB,OAAP,EAAd,CAJiC,CAMjC;;AACA,UAAIrD,KAAK,CAACiF,eAAN,IAAyB5B,OAAO,IAAI,GAAxC,EACE,OAAOtB,MAAM,CAACiB,KAAP,CAAatB,WAAb,EAA0B,KAA1B,IAAmC,MAAnC,GAA4CH,GAAG,GAAG,UAAH,GAAgBjB,UAAtE;AAEF,UAAI,KAAK4E,IAAL,CAAU7B,OAAV,CAAJ,EAAwBrD,KAAK,CAACiF,eAAN,GAAwB,KAAxB;AAExB,UAAI,CAACpC,KAAK,IAAI,UAAT,IAAuBA,KAAK,IAAI,SAAjC,KACG7C,KAAK,CAACiC,SAAN,IAAmB,MAD1B,EAEEY,KAAK,GAAG,MAAR,CAd+B,CAgBjC;;AACA,UAAIQ,OAAO,IAAI,MAAX,IAAqBA,OAAO,IAAI,QAApC,EACErD,KAAK,CAAC0C,MAAN,IAAgB,CAAhB;AAEF,UAAIW,OAAO,IAAI,QAAf,EAAyBrD,KAAK,CAACmF,MAAN,GAAe,IAAf;AACzB,UAAI9B,OAAO,IAAI,GAAX,IAAkB,CAACrD,KAAK,CAACmF,MAAzB,IAAmCpF,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmB,IAA1D,EACEK,WAAW,CAACzC,KAAD,CAAX;;AAEF,UAAIqD,OAAO,CAACnD,MAAR,IAAkB,CAAlB,IAAuB,CAAC,iBAAiBgF,IAAjB,CAAsBrC,KAAtB,CAA5B,EAA0D;AACxD,YAAIuC,eAAe,GAAG,MAAM7B,OAAN,CAAcF,OAAd,CAAtB;AACA,YAAI+B,eAAe,IAAI,CAAC,CAAxB,EACEP,gBAAgB,CAAC9C,MAAD,EAAS/B,KAAT,EAAgB,MAAMqF,KAAN,CAAYD,eAAZ,EAA6BA,eAAe,GAAC,CAA7C,CAAhB,CAAhB;AAEFA,QAAAA,eAAe,GAAG,MAAM7B,OAAN,CAAcF,OAAd,CAAlB;;AACA,YAAI+B,eAAe,IAAI,CAAC,CAAxB,EAA2B;AACzB,cAAIrF,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmBiB,OAAvB,EAAgCrD,KAAK,CAACkC,MAAN,GAAelC,KAAK,CAACC,MAAN,CAAayE,GAAb,GAAmBpC,MAAnB,GAA4BtB,aAA3C,CAAhC,KACK,OAAOV,UAAP;AACN;AACF;;AACD,UAAIN,KAAK,CAAC0C,MAAN,GAAe,CAAf,IAAoBX,MAAM,CAACuC,GAAP,EAApB,IAAoCvE,GAAG,CAACC,KAAD,CAAH,CAAWoC,IAAX,IAAmB,IAA3D,EAAiE;AAC/D,YAAIpC,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAA1B,EAA6BF,KAAK,CAACC,MAAN,CAAayE,GAAb;AAC7B1E,QAAAA,KAAK,CAAC0C,MAAN,IAAgB,CAAhB;AACD;;AAED,aAAOG,KAAP;AACD;;AAED,QAAIyC,QAAQ,GAAG;AACbC,MAAAA,UAAU,EAAE,UAASC,UAAT,EAAqB;AAC/B,eAAO;AACLhC,UAAAA,QAAQ,EAAE1B,SADL;AAEL7B,UAAAA,MAAM,EAAE,CAAC;AAACqC,YAAAA,MAAM,EAAEkD,UAAU,IAAI,CAAvB;AAA0BpD,YAAAA,IAAI,EAAE,IAAhC;AAAsCwC,YAAAA,KAAK,EAAE;AAA7C,WAAD,CAFH;AAGL1C,UAAAA,MAAM,EAAEsD,UAAU,IAAI,CAHjB;AAILvD,UAAAA,SAAS,EAAE,IAJN;AAKLkD,UAAAA,MAAM,EAAE,KALH;AAMLzC,UAAAA,MAAM,EAAE;AANH,SAAP;AAQD,OAVY;AAYb+C,MAAAA,KAAK,EAAE,UAAS1D,MAAT,EAAiB/B,KAAjB,EAAwB;AAC7B,YAAI0F,MAAM,GAAG1F,KAAK,CAAC4C,UAAnB;AACA,YAAI8C,MAAJ,EAAY1F,KAAK,CAAC4C,UAAN,GAAmB,KAAnB;AACZ,YAAIC,KAAK,GAAGmC,UAAU,CAACjD,MAAD,EAAS/B,KAAT,CAAtB;AAEA,YAAI6C,KAAK,IAAIA,KAAK,IAAI,SAAtB,EACE7C,KAAK,CAACiC,SAAN,GAAmBY,KAAK,IAAI,SAAT,IAAsBA,KAAK,IAAI,aAAhC,GAAiDd,MAAM,CAACsB,OAAP,EAAjD,GAAoER,KAAtF;AACF,YAAIA,KAAK,IAAI,aAAb,EAA4BA,KAAK,GAAG,IAAR;AAE5B,YAAId,MAAM,CAACuC,GAAP,MAAgBtE,KAAK,CAACmF,MAA1B,EACEnF,KAAK,CAACmF,MAAN,GAAe,KAAf;AACF,eAAOO,MAAM,GAAG7C,KAAK,GAAG,GAAR,GAAcvC,UAAjB,GAA8BuC,KAA3C;AACD,OAxBY;AA0BbX,MAAAA,MAAM,EAAE,UAASlC,KAAT,EAAgB2F,SAAhB,EAA2B;AACjC,YAAI3F,KAAK,CAACwD,QAAN,IAAkB1B,SAAtB,EACE,OAAO9B,KAAK,CAACwD,QAAN,CAAeiB,QAAf,GAA0BpF,UAAU,CAACuG,IAArC,GAA4C,CAAnD;AAEF,YAAIC,KAAK,GAAG9F,GAAG,CAACC,KAAD,CAAf;AAAA,YAAwB8F,OAAO,GAAGD,KAAK,CAACzD,IAAN,IAAcuD,SAAS,CAAC7B,MAAV,CAAiB,CAAjB,CAAhD;AACA,YAAI+B,KAAK,CAACjB,KAAN,IAAe,IAAnB,EACE,OAAOiB,KAAK,CAACjB,KAAN,IAAekB,OAAO,GAAG,CAAH,GAAO,CAA7B,CAAP,CADF,KAGE,OAAOD,KAAK,CAACvD,MAAN,IAAgBwD,OAAO,GAAG9E,aAAH,GAAmB,CAA1C,CAAP;AACH,OAnCY;AAqCb+E,MAAAA,aAAa,EAAE,eArCF;AAsCbC,MAAAA,aAAa,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OAtCF;AAuCbC,MAAAA,WAAW,EAAE,GAvCA;AAwCbC,MAAAA,IAAI,EAAE;AAxCO,KAAf;AA0CA,WAAOb,QAAP;AACD,GAzVD;AA2VAjG,EAAAA,UAAU,CAAC+G,UAAX,CAAsB,eAAtB,EAAuC,QAAvC;;AAEA,MAAI7G,KAAK,GAAG,UAAS8G,GAAT,EAAc;AAAE,WAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAP;AAAwB,GAApD;;AAEAjH,EAAAA,UAAU,CAAC+G,UAAX,CAAsB,eAAtB,EAAuC;AACrCG,IAAAA,IAAI,EAAE,QAD+B;AAErCnF,IAAAA,cAAc,EAAE7B,KAAK,CAAC,gDACA,2CADA,GAEA,wCAFD;AAFgB,GAAvC;AAOD,CA3YD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\")\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"]},"metadata":{},"sourceType":"script"}