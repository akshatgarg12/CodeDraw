{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function () {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null\n        };\n      },\n      copyState: function (state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n        };\n      },\n      token: function (stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function (state, textAfter, line) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n      },\n      blankLine: function (state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function (state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});","map":{"version":3,"sources":["/Users/akshatgarg/Documents/codedraw-server/client/node_modules/@uiw/react-codemirror/node_modules/codemirror/addon/mode/multiplex.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","multiplexingMode","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","startState","innerActive","inner","copyState","state","mode","token","stream","cutOff","Infinity","oldContent","i","other","open","pos","parseDelimiters","match","outerIndent","indent","possibleOuterIndent","Pass","delimStyle","outerToken","curInner","close","sol","innerToken","innerStyle","textAfter","line","blankLine","electricChars","innerMode"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n"]},"metadata":{},"sourceType":"script"}